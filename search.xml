<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>B站视频下载并转换成MP4</title>
    <url>/2024/05/14/B%E7%AB%99%E8%A7%86%E9%A2%91%E4%B8%8B%E8%BD%BD%E5%B9%B6%E8%BD%AC%E6%8D%A2%E6%88%90MP4/</url>
    <content><![CDATA[<h2 id="Bilibili客户端PC版下载"><a href="#Bilibili客户端PC版下载" class="headerlink" title="Bilibili客户端PC版下载"></a>Bilibili客户端PC版下载</h2><p><a href="https://app.bilibili.com/">官网下载</a></p>
<p><strong>首先下载PC版的B站客户端；打开B站首页，点击右上角的下载客户端，下载Windows客户端即可（mac没试过）</strong></p>
<h2 id="缓存视频"><a href="#缓存视频" class="headerlink" title="缓存视频"></a>缓存视频</h2><p><strong>打开你想下载的视频；</strong></p>
<p><img src="/2024/05/14/B%E7%AB%99%E8%A7%86%E9%A2%91%E4%B8%8B%E8%BD%BD%E5%B9%B6%E8%BD%AC%E6%8D%A2%E6%88%90MP4/image-20240514213258485.png" alt="image-20240514213258485"></p>
<p><strong>点击缓存后会弹出窗口让你选择下载的画质，点击下载即可</strong></p>
<p><img src="/2024/05/14/B%E7%AB%99%E8%A7%86%E9%A2%91%E4%B8%8B%E8%BD%BD%E5%B9%B6%E8%BD%AC%E6%8D%A2%E6%88%90MP4/image-20240514213420675.png" alt="image-20240514213420675"></p>
<p><strong>下载完后在下面的目录里面就能找到下载的文件了</strong></p>
<p><img src="/2024/05/14/B%E7%AB%99%E8%A7%86%E9%A2%91%E4%B8%8B%E8%BD%BD%E5%B9%B6%E8%BD%AC%E6%8D%A2%E6%88%90MP4/image-20240514213721864.png" alt="image-20240514213721864"></p>
<p><strong>找到两个m4s文件，这两个文件分别是视频和音频</strong></p>
<p><img src="/2024/05/14/B%E7%AB%99%E8%A7%86%E9%A2%91%E4%B8%8B%E8%BD%BD%E5%B9%B6%E8%BD%AC%E6%8D%A2%E6%88%90MP4/v2-5207e1bbeacd2207ff555d4abe90b781_r.jpg" alt="v2-5207e1bbeacd2207ff555d4abe90b781_r"></p>
<h2 id="修改m4s视频文件"><a href="#修改m4s视频文件" class="headerlink" title="修改m4s视频文件"></a>修改m4s视频文件</h2><p>用二进制编辑器编辑这两个文件，例如用<code>Notepad++</code>或者<code>Sublime Text</code></p>
<ul>
<li><p><a href="https://github.com/notepad-plus-plus/notepad-plus-plus/releases">Notepad++ 下载</a></p>
</li>
<li><p><a href="https://www.sublimetext.com/download">Sublime Text 下载</a></p>
</li>
</ul>
<p><strong>二进制打开就删除开头的0</strong></p>
<p><img src="/2024/05/14/B%E7%AB%99%E8%A7%86%E9%A2%91%E4%B8%8B%E8%BD%BD%E5%B9%B6%E8%BD%AC%E6%8D%A2%E6%88%90MP4/v2-3bb9f220527b03c48ef665e967c8e95c_r.png" alt="v2-3bb9f220527b03c48ef665e967c8e95c_r"></p>
<p><strong>十六进制打开就删除开头的30</strong></p>
<p><img src="/2024/05/14/B%E7%AB%99%E8%A7%86%E9%A2%91%E4%B8%8B%E8%BD%BD%E5%B9%B6%E8%BD%AC%E6%8D%A2%E6%88%90MP4/image-20240514220710987.png" alt="image-20240514220710987"></p>
<blockquote>
<p>注意，不要用文本编辑器去编辑器这个 *.m4s文件，会有问题</p>
</blockquote>
<h2 id="拓展："><a href="#拓展：" class="headerlink" title="拓展："></a>拓展：</h2><h3 id="Notepad-用十六进制方式打开二进制文件"><a href="#Notepad-用十六进制方式打开二进制文件" class="headerlink" title="Notepad++用十六进制方式打开二进制文件"></a><strong>Notepad++用十六进制方式打开二进制文件</strong></h3><p>在 Notepad++ 中，转到“插件”菜单并选择“插件管理器”。</p>
<p><img src="/2024/05/14/B%E7%AB%99%E8%A7%86%E9%A2%91%E4%B8%8B%E8%BD%BD%E5%B9%B6%E8%BD%AC%E6%8D%A2%E6%88%90MP4/image-20240514222028755.png" alt="image-20240514222028755"></p>
<p>找到<code>HEX-Editor</code>，然后单击安装。</p>
<p><img src="/2024/05/14/B%E7%AB%99%E8%A7%86%E9%A2%91%E4%B8%8B%E8%BD%BD%E5%B9%B6%E8%BD%AC%E6%8D%A2%E6%88%90MP4/image-20240514222249417.png" alt="image-20240514222249417"></p>
<p>打开二进制文件后，在插件中使用HEX插件即可，文件内容既会变成十六进制的内容</p>
<p><img src="/2024/05/14/B%E7%AB%99%E8%A7%86%E9%A2%91%E4%B8%8B%E8%BD%BD%E5%B9%B6%E8%BD%AC%E6%8D%A2%E6%88%90MP4/image-20240514222435071.png" alt="image-20240514222435071"></p>
<h2 id="合并视频"><a href="#合并视频" class="headerlink" title="合并视频"></a>合并视频</h2><p><a href="https://github.com/BtbN/FFmpeg-Builds/releases">ffmpeg 下载</a></p>
<blockquote>
<p><strong>下载后建议添加到系统环境变量，使用更方便</strong></p>
</blockquote>
<p><strong>使用ffmpeg合并成完整的视频</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ffmpeg.exe <span class="literal">-i</span> <span class="number">1</span>.m4s <span class="literal">-i</span> <span class="number">2</span>.m4s <span class="literal">-codec</span> <span class="built_in">copy</span> output.mp4</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>科学上网</title>
    <url>/2024/03/29/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</url>
    <content><![CDATA[<h1 id="零基础保姆级小白节点搭建教学，目前最安全最稳定的搭建方式，通过x-ui面板实现单端口多用户合租"><a href="#零基础保姆级小白节点搭建教学，目前最安全最稳定的搭建方式，通过x-ui面板实现单端口多用户合租" class="headerlink" title="零基础保姆级小白节点搭建教学，目前最安全最稳定的搭建方式，通过x-ui面板实现单端口多用户合租"></a>零基础保姆级小白节点搭建教学，目前最安全最稳定的搭建方式，通过x-ui面板实现单端口多用户合租</h1><p><strong>教程完全零基础手把手教学，只要跟着步骤来一定能成功搭建。</strong><br>使用<code>X-UI</code>面板搭建<code>vmess+ws+tls+web</code>或者<code>vless+ws+tls+web</code>的节点，这是目前最安全的搭建方式<br>并且为了更进一步的安全，有些步骤甚至有点繁琐，这都是值得的，只有安全了才能实现省时省心<br>非常适合想有自己专属稳定的节点又<strong>不太愿意折腾</strong>的朋友。跳出翻墙出来学翻墙的怪圈。</p>
<p>至于高速稳定只有靠<code>钞能力</code>解决了，作为电信用户的我，刨除高攀不起的专线，个人承受范围内最好的线路是<code>CN2 GIA</code><br>本教程使用的是搬瓦工CN2GIA线路，经过了三网优化，电信、移动、联通用户都能获得非常稳定的体验，实现全天稳定丝滑的科学上网体验，告别晚高峰拥堵的情况<br>考虑到GIA线路比较贵，最后给大家提供一种使用x-ui面板通过<code>WS路径分流</code>实现单端口多用户的合租方案，可以和你的朋友合租来分摊费用</p>
<h2 id="VPS购买"><a href="#VPS购买" class="headerlink" title="VPS购买"></a>VPS购买</h2><p><a href="https://bwh81.net/">搬瓦工</a><br>优惠码： <code>BWHNCXNVXV</code></p>
<p>系统：Ubuntu22.04</p>
<blockquote>
<p>执行<code>unminimize</code>之后，中途如果出现的<code>A new version</code>提示信息，输入数字<code>2</code>，再回车即可</p>
</blockquote>
<h2 id="域名购买"><a href="#域名购买" class="headerlink" title="域名购买"></a>域名购买</h2><p><a href="https://www.namesilo.com/">namesilo</a><br>优惠码：<code>oldtong</code></p>
<h2 id="SSH工具"><a href="#SSH工具" class="headerlink" title="SSH工具"></a>SSH工具</h2><p>FinallShell</p>
<h1 id="方法一：手动搭建"><a href="#方法一：手动搭建" class="headerlink" title="方法一：手动搭建"></a>方法一：手动搭建</h1><h2 id="节点搭建"><a href="#节点搭建" class="headerlink" title="节点搭建"></a>节点搭建</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!!!重要！x-ui不要把xray版本升级到1.7.5以上，否则无法搭建vless节点！</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">更新软件源</span></span><br><span class="line">apt update</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启用 BBR TCP 拥塞控制算法</span></span><br><span class="line">echo &quot;net.core.default_qdisc=fq&quot; &gt;&gt; /etc/sysctl.conf</span><br><span class="line">echo &quot;net.ipv4.tcp_congestion_control=bbr&quot; &gt;&gt; /etc/sysctl.conf</span><br><span class="line">sysctl -p</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装x-ui：</span></span><br><span class="line">bash &lt;(curl -Ls https://raw.githubusercontent.com/vaxilu/x-ui/master/install.sh)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装nginx</span></span><br><span class="line">apt install nginx</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装acme：</span></span><br><span class="line">curl https://get.acme.sh | sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加软链接：</span></span><br><span class="line">ln -s  /root/.acme.sh/acme.sh /usr/local/bin/acme.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">切换CA机构：</span> </span><br><span class="line">acme.sh --set-default-ca --server letsencrypt</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">申请证书：</span> </span><br><span class="line">acme.sh  --issue -d 你的域名 -k ec-256 --webroot  /var/www/html</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装证书：</span></span><br><span class="line">acme.sh --install-cert -d 你的域名 --ecc --key-file       /etc/x-ui/server.key  --fullchain-file /etc/x-ui/server.crt --reloadcmd     &quot;systemctl force-reload nginx&quot;</span><br></pre></td></tr></table></figure>

<h2 id="寻找适合的伪装站"><a href="#寻找适合的伪装站" class="headerlink" title="寻找适合的伪装站"></a>寻找适合的伪装站</h2><blockquote>
<p>http站点优先，个人网盘符合单节点大流量特征</p>
</blockquote>
<p>示例关键字：<code>intext:登录 Cloudreve</code></p>
<h2 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h2><p>配置文件路径：<code>/etc/nginx/nginx.conf</code></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">user</span> www-data;</span><br><span class="line"><span class="attribute">worker_processes</span> auto;</span><br><span class="line"><span class="attribute">pid</span> /run/nginx.pid;</span><br><span class="line"><span class="attribute">include</span> /etc/nginx/modules-enabled/<span class="regexp">*.conf</span>;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span> <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">sendfile</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">tcp_nopush</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">tcp_nodelay</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">keepalive_timeout</span> <span class="number">65</span>;</span><br><span class="line">    <span class="attribute">types_hash_max_size</span> <span class="number">2048</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/mime.types;</span><br><span class="line">    <span class="attribute">default_type</span> application/octet-stream;</span><br><span class="line">    <span class="attribute">gzip</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">        </span><br><span class="line">        <span class="attribute">server_name</span> nicename.co;  <span class="comment">#你的域名</span></span><br><span class="line">        <span class="attribute">ssl_certificate</span>       /etc/x-ui/server.crt;  <span class="comment">#证书位置</span></span><br><span class="line">        <span class="attribute">ssl_certificate_key</span>   /etc/x-ui/server.key; <span class="comment">#私钥位置</span></span><br><span class="line">        </span><br><span class="line">        <span class="attribute">ssl_session_timeout</span> <span class="number">1d</span>;</span><br><span class="line">        <span class="attribute">ssl_session_cache</span> shared:MozSSL:<span class="number">10m</span>;</span><br><span class="line">        <span class="attribute">ssl_session_tickets</span> <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">ssl_protocols</span>    TLSv1.<span class="number">2</span> TLSv1.<span class="number">3</span>;</span><br><span class="line">        <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">off</span>;</span><br><span class="line"></span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> https://bing.com; <span class="comment">#伪装网址</span></span><br><span class="line">            <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">            <span class="attribute">proxy_ssl_server_name</span> <span class="literal">on</span>;</span><br><span class="line">            <span class="attribute">sub_filter_once</span> <span class="literal">off</span>;</span><br><span class="line">            <span class="attribute">sub_filter</span> <span class="string">&quot;bing.com&quot;</span> <span class="variable">$server_name</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host <span class="string">&quot;bing.com&quot;</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Referer <span class="variable">$http_referer</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> User-Agent <span class="variable">$http_user_agent</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Forwarded-Proto https;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Accept-Encoding <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Accept-Language <span class="string">&quot;zh-CN&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="section">location</span> /ray &#123;   <span class="comment">#分流路径</span></span><br><span class="line">            <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://127.0.0.1:10000; <span class="comment">#Xray端口</span></span><br><span class="line">            <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="section">location</span> /xui &#123;   <span class="comment">#xui路径</span></span><br><span class="line">            <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://127.0.0.1:9999;  <span class="comment">#xui监听端口</span></span><br><span class="line">            <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">        <span class="section">location</span> /.well-known/ &#123;</span><br><span class="line">               <span class="attribute">root</span> /var/www/html;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line">                <span class="attribute">rewrite</span><span class="regexp"> ^(.*)$</span> https://<span class="variable">$host</span><span class="variable">$1</span> <span class="literal">permanent</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>每次修改nginx配置文件后必须使用 <strong>systemctl reload nginx</strong> 命令重新加载配置文件</p>
<h2 id="多用户合租"><a href="#多用户合租" class="headerlink" title="多用户合租"></a>多用户合租</h2><blockquote>
<p>通过修改nginx的配置文件实现<code>ws path</code>路径分流</p>
</blockquote>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">location</span> /ray &#123;   <span class="comment">#分流路径</span></span><br><span class="line">    <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.1:10000; <span class="comment">#Xray端口</span></span><br><span class="line">    <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="MITM节点"><a href="#MITM节点" class="headerlink" title="MITM节点"></a>MITM节点</h2><h3 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装x-ui</span></span><br><span class="line">bash &lt;(curl -Ls https://raw.githubusercontent.com/vaxilu/x-ui/master/install.sh)</span><br><span class="line"></span><br><span class="line"><span class="comment">#无域名，生成自签证书</span></span><br><span class="line">openssl req -new -x509 -nodes -newkey rsa:2048 -keyout /etc/x-ui/ca.key -out /etc/x-ui/ca.crt -subj <span class="string">&quot;/CN=MITM&quot;</span> -days 36500</span><br></pre></td></tr></table></figure>

<p><img src="../images/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/image-20230531163823796.png" alt="image-20230531163823796"></p>
<h4 id="x-ui模板"><a href="#x-ui模板" class="headerlink" title="x-ui模板"></a>x-ui模板</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;log&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;access&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;error&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;loglevel&quot;</span><span class="punctuation">:</span> <span class="string">&quot;warning&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;inbounds&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">443</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vless&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;clients&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bulianglin&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bulianglin-mitm&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mitm@mitm.com&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;decryption&quot;</span><span class="punctuation">:</span> <span class="string">&quot;none&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;streamSettings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;network&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tcp&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;security&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tls&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;tlsSettings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;certificates&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                        <span class="punctuation">&#123;</span></span><br><span class="line">                            <span class="attr">&quot;certificateFile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/etc/x-ui/ca.crt&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="attr">&quot;keyFile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/etc/x-ui/ca.key&quot;</span></span><br><span class="line">                        <span class="punctuation">&#125;</span></span><br><span class="line">                    <span class="punctuation">]</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;outbounds&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;freedom&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mitm&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;freedom&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;streamSettings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;security&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tls&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;tlsSettings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;alpn&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                        <span class="string">&quot;http/1.1&quot;</span></span><br><span class="line">                    <span class="punctuation">]</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;routing&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;rules&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;user&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mitm@mitm.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;outboundTag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mitm&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;field&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h3><h4 id="xray模板"><a href="#xray模板" class="headerlink" title="xray模板"></a>xray模板</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;log&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;access&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;error&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;loglevel&quot;</span><span class="punctuation">:</span> <span class="string">&quot;warning&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;inbounds&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;socks&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">8888</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;listen&quot;</span><span class="punctuation">:</span> <span class="string">&quot;127.0.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;socks&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;udp&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;sniffing&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">9999</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;listen&quot;</span><span class="punctuation">:</span> <span class="string">&quot;127.0.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;sniffing&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;listen&quot;</span><span class="punctuation">:</span> <span class="string">&quot;127.0.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">11111</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;in-mitm&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dokodemo-door&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">443</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;followRedirect&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;streamSettings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;security&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tls&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;tlsSettings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;certificates&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                        <span class="punctuation">&#123;</span></span><br><span class="line">                            <span class="attr">&quot;usage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;issue&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="attr">&quot;certificateFile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ca.crt&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="attr">&quot;keyFile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ca.key&quot;</span></span><br><span class="line">                        <span class="punctuation">&#125;</span></span><br><span class="line">                    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;alpn&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                        <span class="string">&quot;http/1.1&quot;</span></span><br><span class="line">                    <span class="punctuation">]</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;outbounds&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;proxy&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vless&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;vnext&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你的服务器ip&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">443</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;users&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                            <span class="punctuation">&#123;</span></span><br><span class="line">                                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bulianglin&quot;</span><span class="punctuation">,</span></span><br><span class="line">                                <span class="attr">&quot;encryption&quot;</span><span class="punctuation">:</span> <span class="string">&quot;none&quot;</span><span class="punctuation">,</span></span><br><span class="line">                                <span class="attr">&quot;flow&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">                            <span class="punctuation">&#125;</span></span><br><span class="line">                        <span class="punctuation">]</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">]</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;streamSettings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;network&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tcp&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;security&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tls&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;tlsSettings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;allowInsecure&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;out-mitm&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vless&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;vnext&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你的服务器ip&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">443</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;users&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                            <span class="punctuation">&#123;</span></span><br><span class="line">                                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bulianglin-mitm&quot;</span><span class="punctuation">,</span></span><br><span class="line">                                <span class="attr">&quot;encryption&quot;</span><span class="punctuation">:</span> <span class="string">&quot;none&quot;</span><span class="punctuation">,</span></span><br><span class="line">                                <span class="attr">&quot;flow&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">                            <span class="punctuation">&#125;</span></span><br><span class="line">                        <span class="punctuation">]</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">]</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;streamSettings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;network&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tcp&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;security&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tls&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;tlsSettings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;allowInsecure&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;direct&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;freedom&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;freedom&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;redirect&quot;</span><span class="punctuation">:</span> <span class="string">&quot;127.0.0.1:11111&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;re-entry&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;routing&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;domainStrategy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;IPOnDemand&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;domainMatcher&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mph&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;rules&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;field&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;outboundTag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;direct&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;domain&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="string">&quot;geosite:cn&quot;</span></span><br><span class="line">                <span class="punctuation">]</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;field&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;outboundTag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;direct&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;ip&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="string">&quot;geoip:private&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="string">&quot;geoip:cn&quot;</span></span><br><span class="line">                <span class="punctuation">]</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;field&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;inboundTag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;in-mitm&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;outboundTag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;out-mitm&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;field&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="string">&quot;443&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tls&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;outboundTag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;re-entry&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>新建config.json，粘贴模板，打开v2rayN（6.0以下的版本）文件所在目录，Xray内核和程序在同一目录下，将证书文件和私钥复制到过去，然后在v2rayN中添加自定义配置服务器，随便给个别名，将我们刚才创建的配置文件导入进来，内核选择Xray，点击确定，选中刚才创建的节点，在浏览器中设置代理，可以用配置文件中socks的8888，或者HTTP的9999，尝试访问谷歌，可以看到弹出了不安全的警告信息，这是MITM的正常表现，因为我们现在用的是自己签的ca，证书由于我们还没有信任Xray的根证书颁发机构，所以弹出来警告，尝试访问YouTube，也是同样的警告，接下来需要信任我们的CA证书，双击打开，点击安装证书 存储位置按需选择，我选择当前用户，将证书导入到受信任的根证书颁发机构，导入成功后重启浏览器，此时再来访问谷歌就可以正常访问了，并且消除了TIT的特征，可以看到谷歌的证书是由Xray的自签CA颁发的，我给大家的配置分流规则是，国内网站不走代理，所以百度并没有进行MITM，证书还是正常的证书，只是我们走代理的网站会进行MITM，这就是MITM节点的搭建过程，还是很简单的，如果你不想使用了，强烈建议把刚才导入的CA证书移除受信任，在开始菜单中搜索cer，由于刚才我们是将证书导入到当前用户，所以选择管理用户证书，如果你导入的是本地计算机，就选择下面的管理计算机证书，在受信任的根证书颁发机构里面，找到刚才导入的MITM证书，将其删除即可，删除之后，再重新使用MITM节点访问谷歌，又会弹出安全警告了，这就是MITM节点的搭建方法，我个人是不建议平时用这种方式进行科学上网的，因为你无法保证你的VPS绝对安全，当然具体还是得看你自己，毕竟每个人对安全都有自己不同的标准</p>
<h2 id="naive节点"><a href="#naive节点" class="headerlink" title="naive节点"></a>naive节点</h2><h3 id="naive服务端配置"><a href="#naive服务端配置" class="headerlink" title="naive服务端配置"></a>naive服务端配置</h3><h4 id="编译安装caddy-naive："><a href="#编译安装caddy-naive：" class="headerlink" title="编译安装caddy+naive："></a>编译安装caddy+naive：</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt install software-properties-common</span><br><span class="line">add-apt-repository ppa:longsleep/golang-backports </span><br><span class="line">apt update </span><br><span class="line">apt install golang-go</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">测试</span></span><br><span class="line">go version</span><br><span class="line"></span><br><span class="line">go install github.com/caddyserver/xcaddy/cmd/xcaddy@latest</span><br><span class="line">~/go/bin/xcaddy build --with github.com/caddyserver/forwardproxy@caddy2=github.com/klzgrad/forwardproxy@naive</span><br></pre></td></tr></table></figure>

<h4 id="Caddyfile配置："><a href="#Caddyfile配置：" class="headerlink" title="Caddyfile配置："></a>Caddyfile配置：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:443, naive.buliang0.tk #你的域名</span><br><span class="line">tls example@example.com #你的邮箱</span><br><span class="line">route &#123;</span><br><span class="line"> forward_proxy &#123;</span><br><span class="line">   basic_auth user pass #用户名和密码</span><br><span class="line">   hide_ip</span><br><span class="line">   hide_via</span><br><span class="line">   probe_resistance</span><br><span class="line">  &#125;</span><br><span class="line"> #支持多用户</span><br><span class="line"> forward_proxy &#123;</span><br><span class="line">   basic_auth user2 pass2 #用户名和密码</span><br><span class="line">   hide_ip</span><br><span class="line">   hide_via</span><br><span class="line">   probe_resistance</span><br><span class="line">  &#125;</span><br><span class="line"> reverse_proxy  https://demo.cloudreve.org  &#123; #伪装网址</span><br><span class="line">   header_up  Host  &#123;upstream_hostport&#125;</span><br><span class="line">   header_up  X-Forwarded-Host  &#123;host&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="caddy常用指令："><a href="#caddy常用指令：" class="headerlink" title="caddy常用指令："></a>caddy常用指令：</h4><p>前台运行caddy：<code>./caddy run</code><br>后台运行caddy：<code>./caddy start</code><br>停止caddy：<code>./caddy stop</code><br>重载配置：<code>./caddy reload</code></p>
<p>caddy配置守护进程（开机自启）：<a href="https://bulianglin.com/g/aHR0cHM6Ly9naXRodWIuY29tL2tsemdyYWQvbmFpdmVwcm94eS93aWtpL1J1bi1DYWRkeS1hcy1hLWRhZW1vbg">https://github.com/klzgrad/naiveproxy/wiki/Run-Caddy-as-a-daemon</a></p>
<h4 id="自定义端口："><a href="#自定义端口：" class="headerlink" title="自定义端口："></a>自定义端口：</h4><blockquote>
<p>naive如果要用自定义端口，需要使用json的配置方式，新手可以直接跳过</p>
</blockquote>
<p>启动方式：<code>./caddy start --config config.json</code></p>
<p><strong>config.json内容：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">//需删除注释内容caddy才能加载</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"> <span class="attr">&quot;apps&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;http&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">     <span class="attr">&quot;servers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">       <span class="attr">&quot;srv0&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;listen&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">           <span class="string">&quot;:4431&quot;</span>   <span class="comment">//监听端口</span></span><br><span class="line">         <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;routes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">           <span class="punctuation">&#123;</span></span><br><span class="line">             <span class="attr">&quot;handle&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">               <span class="punctuation">&#123;</span></span><br><span class="line">                 <span class="attr">&quot;auth_user_deprecated&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span><span class="punctuation">,</span>   <span class="comment">//用户名</span></span><br><span class="line">                 <span class="attr">&quot;auth_pass_deprecated&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pass&quot;</span><span class="punctuation">,</span>  <span class="comment">//密码</span></span><br><span class="line">                 <span class="attr">&quot;handler&quot;</span><span class="punctuation">:</span> <span class="string">&quot;forward_proxy&quot;</span><span class="punctuation">,</span></span><br><span class="line">                 <span class="attr">&quot;hide_ip&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">                 <span class="attr">&quot;hide_via&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">                 <span class="attr">&quot;probe_resistance&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">               <span class="punctuation">&#125;</span></span><br><span class="line">             <span class="punctuation">]</span></span><br><span class="line">           <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">           <span class="punctuation">&#123;</span></span><br><span class="line">             <span class="attr">&quot;handle&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">               <span class="punctuation">&#123;</span></span><br><span class="line">                 <span class="attr">&quot;handler&quot;</span><span class="punctuation">:</span> <span class="string">&quot;reverse_proxy&quot;</span><span class="punctuation">,</span></span><br><span class="line">                 <span class="attr">&quot;headers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                   <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                     <span class="attr">&quot;set&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                       <span class="attr">&quot;Host&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                         <span class="string">&quot;&#123;http.reverse_proxy.upstream.hostport&#125;&quot;</span></span><br><span class="line">                       <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                       <span class="attr">&quot;X-Forwarded-Host&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                         <span class="string">&quot;&#123;http.request.host&#125;&quot;</span></span><br><span class="line">                       <span class="punctuation">]</span></span><br><span class="line">                     <span class="punctuation">&#125;</span></span><br><span class="line">                   <span class="punctuation">&#125;</span></span><br><span class="line">                 <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                 <span class="attr">&quot;transport&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                   <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http&quot;</span><span class="punctuation">,</span></span><br><span class="line">                   <span class="attr">&quot;tls&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">                 <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                 <span class="attr">&quot;upstreams&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                   <span class="punctuation">&#123;</span></span><br><span class="line">                     <span class="attr">&quot;dial&quot;</span><span class="punctuation">:</span> <span class="string">&quot;demo.cloudreve.org:443&quot;</span>  <span class="comment">//伪装网址</span></span><br><span class="line">                   <span class="punctuation">&#125;</span></span><br><span class="line">                 <span class="punctuation">]</span></span><br><span class="line">               <span class="punctuation">&#125;</span></span><br><span class="line">             <span class="punctuation">]</span></span><br><span class="line">           <span class="punctuation">&#125;</span></span><br><span class="line">         <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;tls_connection_policies&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">           <span class="punctuation">&#123;</span></span><br><span class="line">             <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">               <span class="attr">&quot;sni&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                 <span class="string">&quot;naive.buliang0.tk&quot;</span>  <span class="comment">//域名</span></span><br><span class="line">               <span class="punctuation">]</span></span><br><span class="line">             <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">             <span class="attr">&quot;certificate_selection&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">               <span class="attr">&quot;any_tag&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                 <span class="string">&quot;cert0&quot;</span></span><br><span class="line">               <span class="punctuation">]</span></span><br><span class="line">             <span class="punctuation">&#125;</span></span><br><span class="line">           <span class="punctuation">&#125;</span></span><br><span class="line">         <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;automatic_https&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">           <span class="attr">&quot;disable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">         <span class="punctuation">&#125;</span></span><br><span class="line">       <span class="punctuation">&#125;</span></span><br><span class="line">     <span class="punctuation">&#125;</span></span><br><span class="line">   <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;tls&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">     <span class="attr">&quot;certificates&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">       <span class="attr">&quot;load_files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">         <span class="punctuation">&#123;</span></span><br><span class="line">           <span class="attr">&quot;certificate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/root/a.crt&quot;</span><span class="punctuation">,</span>  <span class="comment">//公钥路径</span></span><br><span class="line">           <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/root/a.key&quot;</span><span class="punctuation">,</span>   <span class="comment">//私钥路径</span></span><br><span class="line">           <span class="attr">&quot;tags&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">             <span class="string">&quot;cert0&quot;</span></span><br><span class="line">           <span class="punctuation">]</span></span><br><span class="line">         <span class="punctuation">&#125;</span></span><br><span class="line">       <span class="punctuation">]</span></span><br><span class="line">     <span class="punctuation">&#125;</span></span><br><span class="line">   <span class="punctuation">&#125;</span></span><br><span class="line"> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="客户端配置-1"><a href="#客户端配置-1" class="headerlink" title="客户端配置"></a>客户端配置</h3><p>naive客户端：<a href="https://bulianglin.com/g/aHR0cHM6Ly9naXRodWIuY29tL2tsemdyYWQvbmFpdmVwcm94eS9yZWxlYXNlcy9sYXRlc3Q">https://github.com/klzgrad/naiveproxy/releases/latest</a></p>
<p>客户端配置：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;listen&quot;</span><span class="punctuation">:</span> <span class="string">&quot;socks://127.0.0.1:1080&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;proxy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://user:pass@example.com&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>使用v2rayN加载naive内核需要将配置文件的log行删除，否则会断流</p>
<h3 id="TLS指纹查看"><a href="#TLS指纹查看" class="headerlink" title="TLS指纹查看"></a>TLS指纹查看</h3><p>jarm工具：<a href="https://bulianglin.com/g/aHR0cHM6Ly9naXRodWIuY29tL3NhbGVzZm9yY2UvamFybQ">https://github.com/salesforce/jarm</a></p>
<p>下载jarm：<code>wget https://raw.githubusercontent.com/salesforce/jarm/master/jarm.py</code><br>查看网站jarm指纹：<code>python3 jarm.py naive.buliang0.tk</code></p>
<p>网络空间资产搜索引擎：<a href="https://bulianglin.com/g/aHR0cHM6Ly9mb2ZhLmluZm8">https://fofa.info</a></p>
<h1 id="方法二：脚本搭建"><a href="#方法二：脚本搭建" class="headerlink" title="方法二：脚本搭建"></a>方法二：脚本搭建</h1><h2 id="更新软件和安装工具"><a href="#更新软件和安装工具" class="headerlink" title="更新软件和安装工具"></a>更新软件和安装工具</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#系统centos</span></span><br><span class="line">yum update -y &amp;&amp; yum upgrade -y &amp;&amp; yum install curl -y &amp;&amp; yum -y install wget</span><br><span class="line"></span><br><span class="line"><span class="comment">#系统debian</span></span><br><span class="line">apt update &amp;&amp; apt upgrade -y &amp;&amp; apt install curl -y &amp;&amp; apt -y install wget</span><br></pre></td></tr></table></figure>

<h2 id="安装脚本"><a href="#安装脚本" class="headerlink" title="安装脚本"></a>安装脚本</h2><blockquote>
<p>一直默认回车就好，碰到y or n 也可以回车</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -P /root -N --no-check-certificate &quot;https://raw.githubusercontent.com/mack-a/v2ray-agent/master/install.sh&quot; &amp;&amp; chmod 700 /root/install.sh &amp;&amp; /root/install.sh</span><br></pre></td></tr></table></figure>

<h2 id="开启BBR加速"><a href="#开启BBR加速" class="headerlink" title="开启BBR加速"></a>开启BBR加速</h2><blockquote>
<p>选择2 和 11 安装，然后再reboot</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate -O tcpx.sh https://raw.githubusercontent.com/ylx2016/Linux-NetSpeed/master/tcpx.sh &amp;&amp; chmod +x tcpx.sh &amp;&amp; ./tcpx.sh</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>反向面试</title>
    <url>/2023/11/19/%E5%8F%8D%E5%90%91%E9%9D%A2%E8%AF%95/</url>
    <content><![CDATA[<h1 id="反向面试"><a href="#反向面试" class="headerlink" title="反向面试"></a>反向面试</h1><blockquote>
<p>大部分翻译自：<a href="https://github.com/viraptor/reverse-interview">https://github.com/viraptor/reverse-interview</a> ，亦有其他网友补充。</p>
</blockquote>
<blockquote>
<p>译者总结的一份适合突击记忆的简洁版 LeetCode 题解和面试问题，也欢迎 Star。<a href="https://github.com/yifeikong/interview">https://github.com/yifeikong/interview</a></p>
</blockquote>
<p>下面列表里的问题对于参加技术面试的人来说可能有些用。<br>列表里的问题并不一定适用于某个特定的职位或者工作类型，也没有排序<br>最开始的时候这只是我自己的问题列表，但是慢慢地添加了一些我觉得可能让我对这家公司亮红牌的问题。<br>我也注意到被我面试的人提问我的问题太少了，感觉他们挺浪费机会的。</p>
<p>如果你问过的问题没有被列出来，请提交一个 PR。</p>
<p>翻译：</p>
<p><a href="https://github.com/viraptor/reverse-interview">English</a><br><a href="https://github.com/JaeYeopHan/Interview_Question_for_Beginner/blob/master/Reverse_Interview/README.md">Korean</a><br><a href="https://github.com/viraptor/reverse-interview/blob/master/translations/PORTUGUESE.md">Portuguese</a><br><a href="https://github.com/NeroCube/reverse-interview-zh-tw/blob/master/README.md">繁體中文</a></p>
<h2 id="预期使用方式"><a href="#预期使用方式" class="headerlink" title="预期使用方式"></a>预期使用方式</h2><ul>
<li>检查一下哪些问题你感兴趣</li>
<li>检查一下哪些是你可以自己在网上找到答案的</li>
<li>找不到的话就向面试官提问</li>
</ul>
<p>绝对不要想把这个列表里的每个问题都问一遍。（尊重面试官的时间，而且你可以通过查找已经发布的答案来显示<br>你的主动性）</p>
<p>请记住事情总是灵活的，组织的结构调整也会经常发生。拥有一个 bug 追踪系统并不会保证高效处理 bug。<br>CI/CD （持续集成系统） 也不一定保证交付时间会很短。</p>
<h1 id="职责"><a href="#职责" class="headerlink" title="职责"></a>职责</h1><ul>
<li>On-call （电话值班）的计划或者规定是什么？值班或者遇到问题加班时候有加班费吗？</li>
<li>我的日常工作是什么？</li>
<li>有给我设定的特定目标吗？</li>
<li>团队里面初级和高级工程师的比例是多少？（有计划改变吗）</li>
<li>入职培训 (onboarding) 会是什么样的？</li>
<li>每个开发者有多大的自由来做出决定？</li>
<li>在你看来，这个工作做到什么程度算成功？</li>
<li>你期望我在最初的一个月 / 三个月能够完成什么？</li>
<li>试用期结束的时候，你会怎么样衡量我的绩效？</li>
<li>自己单独的开发活动和按部就班工作的比例大概是怎样的？</li>
<li>一个典型的一天或者一周的工作是怎样安排的？</li>
<li>对我的申请你有什么疑虑么？</li>
<li>在这份工作上，我将会和谁紧密合作？</li>
<li>我的直接上级他们的上级都是什么样的管理风格？（事无巨细还是着眼宏观）</li>
<li>我在这个岗位上应该如何发展？会有哪些机会？</li>
<li>每天预期 / 核心工作时间是多少小时？</li>
<li>我入职的岗位是新增还是接替之前离职的同事？（是否有技术债需要还）？(zh)</li>
<li>入职之后在哪个项目组，项目是新成立还是已有的？(zh)</li>
</ul>
<h1 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h1><ul>
<li>公司常用的技术栈是什么？</li>
<li>你们怎么使用源码控制系统？</li>
<li>你们怎么测试代码？</li>
<li>你们怎么追踪 bug?</li>
<li>你们怎样监控项目？</li>
<li>你们怎么集成和部署代码改动？是使用持续集成和持续部署吗 (CI/CD)？</li>
<li>你们的基础设施搭建在版本管理系统里吗？或者是代码化的吗？</li>
<li>从计划到完成一项任务的工作流是什么样的？</li>
<li>你们如何准备故障恢复？</li>
<li>有标准的开发环境吗？是强制的吗？</li>
<li>你们需要花费多长时间来给产品搭建一个本地测试环境？（分钟 / 小时 / 天）</li>
<li>你们需要花费多长时间来响应代码或者依赖中的安全问题？</li>
<li>所有的开发者都可以使用他们电脑的本地管理员权限吗？</li>
<li>介绍一下你们的技术原则或者展望。</li>
<li>你们的代码有开发文档吗？有没有单独的供消费者阅读的文档？</li>
<li>你们有更高层次的文档吗？比如说 ER 图，数据库范式</li>
<li>你们使用静态代码分析吗？</li>
<li>你们如何管理内部和外部的数字资产？</li>
<li>你们如何管理依赖？</li>
<li>公司是否有技术分享交流活动？有的话，多久一次呢？(zh)</li>
<li>你们的数据库是怎么进行版本控制的？(zh)</li>
<li>业务需求有没有文档记录？是如何记录的？(zh)</li>
</ul>
<h1 id="团队"><a href="#团队" class="headerlink" title="团队"></a>团队</h1><ul>
<li>工作是怎么组织的？</li>
<li>团队内 / 团队间的交流通常是怎样的？</li>
<li>你们使用什么工具来做项目组织？你的实际体会是什么？</li>
<li>如果遇到不同的意见怎样处理？</li>
<li>谁来设定优先级 / 计划？</li>
<li>如果团队没能赶上预期发布日期怎么办？</li>
<li>每周都会开什么类型的会议？</li>
<li>会有定期的和上级的一对一谈话吗？</li>
<li>产品 / 服务的规划是什么样的？（n 周一发布 / 持续部署 / 多个发布流 / …)</li>
<li>生产环境发生事故了怎么办？是否有不批评人而分析问题的文化？</li>
<li>有没有一些团队正在经历还尚待解决的挑战？</li>
<li>你们如何跟踪进度？</li>
<li>预期和目标是如何设定的？谁来设定？</li>
<li>Code Review 如何实施？</li>
<li>给我介绍下团队里一个典型的 sprint</li>
<li>你们如何平衡技术和商业目标？</li>
<li>你们如何共享知识？</li>
<li>团队有多大？</li>
<li>公司技术团队的架构和人员组成？(zh)</li>
<li>团队内开发、产品、运营哪一方是需求的主要提出方？哪一方更强势？(zh)</li>
</ul>
<h1 id="问未来的同事"><a href="#问未来的同事" class="headerlink" title="问未来的同事"></a>问未来的同事</h1><ul>
<li>开发者倾向于从哪里学习？</li>
<li>你对在这里工作最满意的地方是？</li>
<li>最不满意的呢？</li>
<li>如果可以的话，你想改变哪里？</li>
<li>团队最老的成员在这里多久了？</li>
<li>在小团队中，有没有出现成员性格互相冲突的情况？最后是如何解决的？</li>
</ul>
<h1 id="公司"><a href="#公司" class="headerlink" title="公司"></a>公司</h1><ul>
<li>公司为什么在招人？（产品发展 / 新产品 / 波动…)</li>
<li>有没有会议 / 旅行预算？使用的规定是什么？</li>
<li>晋升流程是怎样的？要求 / 预期是怎样沟通的？</li>
<li>绩效评估流程是怎样的？</li>
<li>技术和管理两条职业路径是分开的吗？</li>
<li>对于多元化招聘的现状或者观点是什么？</li>
<li>有公司级别的学习资源吗？比如电子书订阅或者在线课程？</li>
<li>有获取证书的预算吗？</li>
<li>公司的成熟度如何？（早期寻找方向 / 有内容的工作 / 维护中 / …)</li>
<li>我可以为开源项目做贡献吗？是否需要审批？</li>
<li>你认为公司未来五年或者十年会发展成什么样子？</li>
<li>公司的大多数员工是如何看待整洁代码的？</li>
<li>你上次注意到有人成长是什么时候？他们在哪方面成长了？</li>
<li>在这里成功的定义是什么？如何衡量成功？</li>
<li>有体育活动或者团建么？</li>
<li>有内部的黑客马拉松活动吗？</li>
<li>公司支持开源项目吗？</li>
<li>有竞业限制或者保密协议需要签吗？</li>
<li>你们认为公司文化中的空白是什么？</li>
<li>能够跟我说一公司处于不良情况，以及如何处理的故事吗？</li>
<li>您在这工作了多久了？您觉得体验如何？(zh)</li>
<li>大家为什么会喜欢这里？(zh)</li>
<li>公司的调薪制度是如何的？(zh)</li>
</ul>
<h1 id="社会问题"><a href="#社会问题" class="headerlink" title="社会问题"></a>社会问题</h1><ul>
<li>你们关于多元化招聘什么看法？</li>
<li>你们的公司文化如何？你认为有什么空白么？</li>
<li>这里的工作生活平衡地怎么样？</li>
<li>公司对气候变化有什么态度吗？</li>
</ul>
<h1 id="冲突"><a href="#冲突" class="headerlink" title="冲突"></a>冲突</h1><ul>
<li>不同的意见如何处理？</li>
<li>如果被退回了会怎样？（“这个在预计的时间内做不完”）</li>
<li>当团队有压力并且在超负荷工作的时候怎么处理？</li>
<li>如果有人注意到了在流程或者技术等其他方面又改进的地方，怎么办？</li>
<li>当管理层的预期和工程师的绩效之间有差距的时候如何处理？</li>
<li>能给我讲一个公司深处有毒环境以及如何处理的故事吗？</li>
<li>如果在公司内你的同事因涉嫌性侵犯他人而被调查，请问你会如何处理？</li>
<li>假设我自己很不幸是在公司内被性侵的受害者，在公司内部有没有争取合法权益的渠道？</li>
</ul>
<h1 id="商业"><a href="#商业" class="headerlink" title="商业"></a>商业</h1><ul>
<li>你们现在盈利吗？</li>
<li>如果没有的话，还需要多久？</li>
<li>公司的资金来源是什么？谁影响或者制定高层计划或方向？</li>
<li>你们如何挣钱？</li>
<li>什么阻止了你们挣更多的钱？</li>
<li>公司未来一年的增长计划怎样？五年呢？</li>
<li>你们认为什么是你们的竞争优势？</li>
<li>你们的竞争优势是什么？</li>
<li>公司未来的商业规划是怎样的？有上市的计划吗？(zh)</li>
</ul>
<h1 id="远程工作"><a href="#远程工作" class="headerlink" title="远程工作"></a>远程工作</h1><ul>
<li>远程工作和办公室工作的比例是多少？</li>
<li>公司提供硬件吗？更新计划如何？</li>
<li>使用自己的硬件办公可以吗？现在有政策吗？</li>
<li>额外的附件和家具可以通过公司购买吗？这方面是否有预算？</li>
<li>有共享办公或者上网的预算吗？</li>
<li>多久需要去一次办公室？</li>
<li>公司的会议室是否一直是视频会议就绪的？</li>
</ul>
<h1 id="办公室布局"><a href="#办公室布局" class="headerlink" title="办公室布局"></a>办公室布局</h1><ul>
<li>办公室的布局如何？（开放的 / 小隔间 / 独立办公室）</li>
<li>有没有支持 / 市场 / 或者其他需要大量打电话的团队在我的团队旁边办公？</li>
</ul>
<h1 id="终极问题"><a href="#终极问题" class="headerlink" title="终极问题"></a>终极问题</h1><ul>
<li>该职位为何会空缺？</li>
<li>公司如何保证人才不流失？</li>
<li>这份工作 / 团队 / 公司最好和最坏的方面是？</li>
<li>你最开始为什么选择了这家公司？</li>
<li>你为什么留在这家公司？</li>
</ul>
<h1 id="待遇"><a href="#待遇" class="headerlink" title="待遇"></a>待遇</h1><ul>
<li>如果有奖金计划的话，奖金如何分配？</li>
<li>如果有奖金计划的话，过去的几年里通常会发百分之多少的奖金？</li>
<li>有五险一金(zh)/401k(us)或者其他退休养老金等福利吗？</li>
<li>五险一金中，补充公积金一般交多少比例？/401k一般交多少比例？我可以自己选择这一比例吗？</li>
<li>有什么医疗保险吗？如果有的话何时开始？</li>
<li>有额外商业保险吗？例如人寿保险和额外的养老/医疗保险？</li>
<li>更换工作地点，公司付费吗？</li>
</ul>
<h1 id="休假"><a href="#休假" class="headerlink" title="休假"></a>休假</h1><ul>
<li>带薪休假时间有多久？</li>
<li>病假和事假是分开的还是一起算？</li>
<li>我可以提前使用假期时间吗？也就是说应休假期是负的？</li>
<li>假期的更新策略是什么样的？也就是说未休的假期能否滚入下一周期</li>
<li>照顾小孩的政策如何？</li>
<li>无薪休假政策是什么样的？</li>
<li>学术性休假政策是怎么样的？</li>
</ul>
]]></content>
      <categories>
        <category>技巧</category>
      </categories>
      <tags>
        <tag>面试技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo-next主题美化</title>
    <url>/2023/11/19/hexo-next%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/</url>
    <content><![CDATA[<blockquote>
<p>NexT version 8.18.2</p>
</blockquote>
<h3 id="开启第三方插件"><a href="#开启第三方插件" class="headerlink" title="开启第三方插件"></a>开启第三方插件</h3><p>编辑整个博客文件夹下的<code>themes/next/_config.yml</code>按<code>ctrl+F</code>搜索<code>pjax</code>将<strong>false</strong>改为<strong>true</strong></p>
<p><strong>接下来就可以添加喜欢的第三方插件了</strong></p>
<h3 id="添加看板娘-live2d-widget"><a href="#添加看板娘-live2d-widget" class="headerlink" title="添加看板娘-live2d_widget"></a>添加看板娘-live2d_widget</h3><p>项目地址：<a href="https://github.com/stevenjoezhang/live2d-widget">live2d-widget</a></p>
<blockquote>
<p>加强版的live2d看板娘，可对话，换装互动</p>
</blockquote>
<h4 id="常用配置说明"><a href="#常用配置说明" class="headerlink" title="常用配置说明"></a>常用配置说明</h4><p>模型的大小、位置、格式和文本内容等配置，需要自行设置一些配置文件<code>waifu-tips.js</code> 、<code>waifu-tips.json</code>和<code>waifu.css</code>，这里提一些各文件里常用的配置。</p>
<p><strong>waifu-tips.js</strong></p>
<p>这里是模型加载启动/点击工具栏相应按钮时的行为和文本内容定义，具体对应可以对照参考原模型的行为，比如</p>
<p><img src="/2023/11/19/hexo-next%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/2183122-20210503112404379-1613061177.png" alt="2183122-20210503112404379-1613061177"></p>
<p>这个部分是用来显示用户点回本页面时显示的文本，其余同理。</p>
<p><strong>waifu-tips.json</strong></p>
<p>这里是除了上面js里定义的文本以外的其余文本内容，同样可以对照参考原模型猜测来进行修改。</p>
<p><img src="/2023/11/19/hexo-next%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/2183122-20210503112404630-2003319113.png" alt="2183122-20210503112404630-2003319113"></p>
<p>值得注意的是，这个文件里分了几大块，架构大概是：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;mouseover&quot;: [&#123; // 鼠标悬停在某个特定元素时显示的文本</span><br><span class="line">		&quot;selector&quot;: <span class="string">&quot;...&quot;</span>,</span><br><span class="line">		<span class="string">&quot;text&quot;</span>: <span class="string">&quot;...&quot;</span></span><br><span class="line">	&#125;],</span><br><span class="line">	&quot;click&quot;: [&#123; // 鼠标点击某个特定元素时显示的文本</span><br><span class="line">		&quot;selector&quot;: <span class="string">&quot;...&quot;</span>,</span><br><span class="line">		<span class="string">&quot;text&quot;</span>: <span class="string">&quot;...&quot;</span></span><br><span class="line">	&#125;],</span><br><span class="line">	&quot;seasons&quot;: [&#123; // 在特定日期显示的文本</span><br><span class="line">		&quot;date&quot;: <span class="string">&quot;01/01&quot;</span>,</span><br><span class="line">		<span class="string">&quot;text&quot;</span>: <span class="string">&quot;...&quot;</span></span><br><span class="line">	&#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>text</code>这里很显然是填显示的文本。</p>
<p><code>date</code>是指定的特定日期。</p>
<p>至于<code>selector</code>就类似于CSS里的<a href="https://www.w3school.com.cn/cssref/css_selectors.asp">CSS选择器</a>，是用来指定元素类型的。</p>
<blockquote>
<p>值得注意的，使用cdn来引用GitHub仓库的代码，只会记录第一次上传的代码，后续在github仓库上修改代码，是不会刷新jsdelivr缓存的，这个我暂时没办法解决，最后本地配置调整好在push到仓库上</p>
</blockquote>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p><strong>编辑<code>themes/next/ayout/_layout.njk</code>文件</strong></p>
<blockquote>
<p>建议把项目克隆到自己的仓库，这样就可以使用自己的cdn加速，也可以根据自己喜欢来修改配置</p>
</blockquote>
<p>在<code>head</code>头部添加</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://fastly.jsdelivr.net/gh/AienH/blog_plugin/live2d/assets/waifu.css&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>在<code>body</code>添加</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;waifu&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;waifu-tips&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;live2d&quot;</span> <span class="attr">class</span>=<span class="string">&quot;live2d&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;waifu-tool&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;fui-home&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;fui-chat&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;fui-eye&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;fui-user&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;fui-photo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;fui-info-circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;fui-cross&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://fastly.jsdelivr.net/gh/AienH/blog_plugin/live2d/assets/waifu-tips.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://fastly.jsdelivr.net/gh/AienH/blog_plugin/live2d/assets/live2d.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    live2d_settings[<span class="string">&#x27;modelId&#x27;</span>] = <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">    live2d_settings[<span class="string">&#x27;modelTexturesId&#x27;</span>] = <span class="number">87</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">initModel</span>(<span class="string">&quot;https://fastly.jsdelivr.net/gh/AienH/blog_plugin/live2d/assets/waifu-tips.json&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>最后再次编辑整个博客文件夹下的<code>themes/next/_config.yml</code>文件</p>
<p>在最下面添加</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="音乐播放器插件-APlayer-amp-MetingJS"><a href="#音乐播放器插件-APlayer-amp-MetingJS" class="headerlink" title="音乐播放器插件-APlayer &amp; MetingJS"></a>音乐播放器插件-APlayer &amp; MetingJS</h3><p>项目地址：<a href="https://github.com/DIYgod/APlayer">APlayer</a>   <a href="https://github.com/metowolf/MetingJS">MetingJS</a></p>
<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><ul>
<li>APlayer 是一个简洁漂亮、功能强大的 Html5 音乐播放器。</li>
<li>MetingJS 是为 APlayer 添加网易云、QQ音乐等支持的插件。</li>
</ul>
<blockquote>
<p>老规矩，最好把项目拉到自己的GitHub仓库，防止作者链接失效</p>
</blockquote>
<p>在<code>head</code>头部添加</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://fastly.jsdelivr.net/npm/jquery/dist/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://fastly.jsdelivr.net/npm/font-awesome/css/font-awesome.min.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot; https://cdn.jsdelivr.net/npm/jquery-ui@1.13.2/dist/jquery-ui.min.js &quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">rel</span>=<span class="string">&quot;preload&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://fastly.jsdelivr.net/gh/AienH/blog_plugin@master/APlayer/dist/APlayer.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">rel</span>=<span class="string">&quot;preload&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://fastly.jsdelivr.net/gh/AienH/blog_plugin@master/MetingJS/dist/Meting.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://fastly.jsdelivr.net/gh/AienH/blog_plugin@master/APlayer/dist/APlayer.min.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在<code>body</code>添加</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meting-js</span></span></span><br><span class="line"><span class="tag"><span class="attr">server</span>=<span class="string">&quot;netease&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">type</span>=<span class="string">&quot;playlist&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">id</span>=<span class="string">&quot;8269382559&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">autoplay</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">volume</span>=<span class="string">&quot;0.7&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">fixed</span>=<span class="string">&quot;true&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">order</span>=<span class="string">&quot;list&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">preload</span>=<span class="string">&quot;metadata&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">lrc-type</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">meting-js</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><ul>
<li><strong>引用这两个插件的前提是要先引用<code>jquery.min.js</code>、<code>font-awesome.min.css</code>、<code>jquery-ui.min.js</code></strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://fastly.jsdelivr.net/npm/jquery/dist/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://fastly.jsdelivr.net/npm/font-awesome/css/font-awesome.min.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot; https://cdn.jsdelivr.net/npm/jquery-ui@1.13.2/dist/jquery-ui.min.js &quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>不然音乐插件不会生效</p>
<ul>
<li><strong>MetingJS参数详情</strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">id=&#x27;外链播放器id&#x27;,必须参数</span></span><br><span class="line"><span class="comment">type=[song=单曲, playlist=歌单, album=专辑, search=搜索结果, artist=艺术家],必须参数</span></span><br><span class="line"><span class="comment">server=[netease=网易云音乐, tencent=QQ音乐, kugou=酷狗音乐, xiami=虾米音乐, baidu=百度音乐],必须参数</span></span><br><span class="line"><span class="comment">fixed=启用固定模式，固定在左下角,默认false</span></span><br><span class="line"><span class="comment">mini=启用迷你模式,默认false</span></span><br><span class="line"><span class="comment">preload=[none,metadata,auto]</span></span><br><span class="line"><span class="comment">mutex=[互斥锁，默认true],默认false</span></span><br><span class="line"><span class="comment">order=[random=随机播放,list=列表播放]</span></span><br><span class="line"><span class="comment">loop=[all=全部循环, one=循环一次 ,none=不循环]</span></span><br><span class="line"><span class="comment">volume=[音量，默认0.7]</span></span><br><span class="line"><span class="comment">lrc-type=[歌词类型，默认0]</span></span><br><span class="line"><span class="comment">list-folded=[列表是否折叠，默认false]</span></span><br><span class="line"><span class="comment">list-max-height=列表最大高度,默认340px</span></span><br><span class="line"><span class="comment">storage-name=本地存储存储密钥，用于存储播放器设置,默认metingjs</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>blog插件</tag>
      </tags>
  </entry>
  <entry>
    <title>两种方法上传本地文件到github</title>
    <url>/2023/07/04/git%E4%B8%8A%E4%BC%A0%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>自从使用github以来，一直都是在<a href="https://github.com/">github网站</a>在线上传文件到仓库中，但是有时因为网络或者电脑的原因上传失败。最重要的原因是我习惯本地编辑，完成以后再一起上传github。看过了几个教程，总结出最适合自己的比较简单的方法。</p>
<p><img src="/2023/07/04/git%E4%B8%8A%E4%BC%A0%E6%96%B9%E6%B3%95/webp.png" alt="img"></p>
<h4 id="1-github在线上传文件夹"><a href="#1-github在线上传文件夹" class="headerlink" title="1. github在线上传文件夹"></a>1. github在线上传文件夹</h4><p>在线上传也可以上传完整的文件夹结构，直接拖拽到上传文件页面的框中即可。</p>
<h5 id="1-1点击上传文件"><a href="#1-1点击上传文件" class="headerlink" title="1.1点击上传文件"></a>1.1点击上传文件</h5><p><img src="/2023/07/04/git%E4%B8%8A%E4%BC%A0%E6%96%B9%E6%B3%95/webp1.png" alt="img"></p>
<h5 id="1-2-直接拖拽"><a href="#1-2-直接拖拽" class="headerlink" title="1.2 直接拖拽"></a>1.2 直接拖拽</h5><p>直接拖拽即可上传文件夹及文件夹里面的文件。如果点击* choose your files *就只能上传单个文件。</p>
<p><img src="/2023/07/04/git%E4%B8%8A%E4%BC%A0%E6%96%B9%E6%B3%95/webp2.png" alt="img"></p>
<h4 id="2-通过git工具上传本地文件夹（本地项目）"><a href="#2-通过git工具上传本地文件夹（本地项目）" class="headerlink" title="2. 通过git工具上传本地文件夹（本地项目）"></a>2. 通过git工具上传本地文件夹（本地项目）</h4><h5 id="2-1-下载git工具"><a href="#2-1-下载git工具" class="headerlink" title="2.1 下载git工具"></a>2.1 下载<a href="https://link.jianshu.com/?t=https://git-scm.com/downloads">git工具</a></h5><p><img src="/2023/07/04/git%E4%B8%8A%E4%BC%A0%E6%96%B9%E6%B3%95/webp7.png" alt="img"></p>
<h5 id="2-2-下载完成后安装完成，注意在安装过程中可以选择创建桌面快捷方式"><a href="#2-2-下载完成后安装完成，注意在安装过程中可以选择创建桌面快捷方式" class="headerlink" title="2.2 下载完成后安装完成，注意在安装过程中可以选择创建桌面快捷方式"></a>2.2 下载完成后安装完成，注意在安装过程中可以选择创建桌面快捷方式</h5><p><img src="/2023/07/04/git%E4%B8%8A%E4%BC%A0%E6%96%B9%E6%B3%95/webp8.png" alt="img"></p>
<h5 id="2-3-绑定用户"><a href="#2-3-绑定用户" class="headerlink" title="2.3 绑定用户"></a>2.3 绑定用户</h5><p>打开git-bash.exe（直接在桌面上点击右键，或者点击开始按钮找到Git Bash）</p>
<p><img src="/2023/07/04/git%E4%B8%8A%E4%BC%A0%E6%96%B9%E6%B3%95/%E8%BF%90%E8%A1%8CgitBash.gif" alt="img"></p>
<p>在打开的GIt Bash中输入以下命令（用户和邮箱为你github注册的账号和邮箱）</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">$ git config --<span class="keyword">global</span> user.name <span class="string">&quot;hanyuntao&quot;</span></span><br><span class="line">$ git config --<span class="keyword">global</span> user.email <span class="string">&quot;hanyuntaocn@163.com&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2023/07/04/git%E4%B8%8A%E4%BC%A0%E6%96%B9%E6%B3%95/webp4.png" alt="img"></p>
<h5 id="2-4-设置SSH-key（git中sshkey有何作用？）"><a href="#2-4-设置SSH-key（git中sshkey有何作用？）" class="headerlink" title="2.4 设置SSH key（git中sshkey有何作用？）"></a>2.4 设置SSH key（<a href="https://link.jianshu.com/?t=https://segmentfault.com/q/1010000000118744">git中sshkey有何作用？</a>）</h5><h6 id="2-4-1-生成ssh-key"><a href="#2-4-1-生成ssh-key" class="headerlink" title="2.4.1 生成ssh key"></a>2.4.1 生成ssh key</h6><p>首先检查是否已生成密钥<code>cd ~/.ssh</code>，如果返回的<code>ls</code>有3个文件,则密钥已经生成。</p>
<p><img src="/2023/07/04/git%E4%B8%8A%E4%BC%A0%E6%96%B9%E6%B3%95/webp5.png" alt="img"></p>
<p>如果没有密钥，则通过</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>ssh-keygen -t rsa -C <span class="string">&quot;hanyuntaocn@163.com&quot;</span></span><br></pre></td></tr></table></figure>

<p>生成，生成过程中一路按3次回车键就好了。（默认路径，默认没有密码登录）<br> 生成成功后，去对应目录C:/Users/hyt.ssh里（hyt为电脑用户名，每个人不同）用记事本打开id_rsa.pub，得到ssh key公钥。</p>
<p><img src="/2023/07/04/git%E4%B8%8A%E4%BC%A0%E6%96%B9%E6%B3%95/ssh-key%E5%85%AC%E9%92%A5.png" alt="img"></p>
<h6 id="2-4-2-为github账号配置ssh-key"><a href="#2-4-2-为github账号配置ssh-key" class="headerlink" title="2.4.2 为github账号配置ssh key"></a>2.4.2 为github账号配置ssh key</h6><p>切换到github，展开个人头像的小三角，点击settings，然后打开SSH keys菜单， 点击Add SSH key新增密钥，填上标题（最好跟本地仓库保持一致）。</p>
<p><img src="/2023/07/04/git%E4%B8%8A%E4%BC%A0%E6%96%B9%E6%B3%95/%E8%AE%BE%E7%BD%AEsshkey.gif" alt="img"></p>
<p>接着将id_rsa.pub文件中key粘贴到此，最后Add key生成密钥.</p>
<h4 id="2-5-上传本地项目到github"><a href="#2-5-上传本地项目到github" class="headerlink" title="2.5 上传本地项目到github"></a>2.5 上传本地项目到github</h4><h5 id="2-5-1-创建一个本地项目"><a href="#2-5-1-创建一个本地项目" class="headerlink" title="2.5.1 创建一个本地项目"></a>2.5.1 创建一个本地项目</h5><p>这是我自己创建的几个文件夹及文件。</p>
<p><img src="/2023/07/04/git%E4%B8%8A%E4%BC%A0%E6%96%B9%E6%B3%95/%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE.png" alt="img"></p>
<h5 id="2-5-2-建立本地仓库"><a href="#2-5-2-建立本地仓库" class="headerlink" title="2.5.2 建立本地仓库"></a>2.5.2 建立本地仓库</h5><p>1.首先进入text文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> d:text</span><br></pre></td></tr></table></figure>

<p><img src="/2023/07/04/git%E4%B8%8A%E4%BC%A0%E6%96%B9%E6%B3%95/webp9.png" alt="img"></p>
<p>2.执行指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<p>![img](git上传方法/执行git init.png)</p>
<p>初始化成功后你会发现项目里多了一个隐藏文件夹.git</p>
<p><img src="/2023/07/04/git%E4%B8%8A%E4%BC%A0%E6%96%B9%E6%B3%95/%E9%9A%90%E8%97%8F%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%B9.png" alt="img"></p>
<p>3.执行指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>


<p> 将所有文件添加到仓库</p>
<p><img src="/2023/07/04/git%E4%B8%8A%E4%BC%A0%E6%96%B9%E6%B3%95/webp12.png" alt="img"></p>
<p>4.执行指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;提交文件&quot;</span></span><br></pre></td></tr></table></figure>


<p> 双引号内是提交注释。</p>
<p><img src="/2023/07/04/git%E4%B8%8A%E4%BC%A0%E6%96%B9%E6%B3%95/%E6%8F%90%E4%BA%A4%E6%96%87%E4%BB%B6.png" alt="img"></p>
<h5 id="2-5-3-关联github仓库"><a href="#2-5-3-关联github仓库" class="headerlink" title="2.5.3 关联github仓库"></a>2.5.3 关联github仓库</h5><p>1.到github text仓库复制仓库地址</p>
<p><img src="/2023/07/04/git%E4%B8%8A%E4%BC%A0%E6%96%B9%E6%B3%95/%E5%A4%8D%E5%88%B6%E4%BB%93%E5%BA%93%E5%9C%B0%E5%9D%80.png" alt="img"></p>
<p> 2.执行指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin https://github.com/hanyuntao/text.git</span><br></pre></td></tr></table></figure>



<p><img src="/2023/07/04/git%E4%B8%8A%E4%BC%A0%E6%96%B9%E6%B3%95/%E6%89%A7%E8%A1%8C%E6%8C%87%E4%BB%A41.png" alt="img"></p>
<h5 id="2-5-4-上传本地代码"><a href="#2-5-4-上传本地代码" class="headerlink" title="2.5.4 上传本地代码"></a>2.5.4 上传本地代码</h5><p>执行指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>

<p><img src="/2023/07/04/git%E4%B8%8A%E4%BC%A0%E6%96%B9%E6%B3%95/%E6%89%A7%E8%A1%8C%E6%8C%87%E4%BB%A42.png" alt="img"></p>
<h5 id="2-5-5完成"><a href="#2-5-5完成" class="headerlink" title="2.5.5完成"></a>2.5.5完成</h5><p>可以看到我们的本地项目已经上传到了github上了。</p>
<p><img src="/2023/07/04/git%E4%B8%8A%E4%BC%A0%E6%96%B9%E6%B3%95/webp17.png" alt="img"></p>
<blockquote>
<p>注意：git是不能管理空的文件夹的，文件夹里必须有文件才能上传。</p>
</blockquote>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>git命令</tag>
      </tags>
  </entry>
  <entry>
    <title>将自己的树莓派/服务器变成自己的NAS、下载器</title>
    <url>/2023/06/06/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%98%E6%88%90%E8%87%AA%E5%B7%B1%E7%9A%84NAS%E5%92%8C%E4%B8%8B%E8%BD%BD%E5%99%A8/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>对NAS总是抱有好奇？对NAS的价格望而却步？<br>但是，如果你有<strong>树莓派（或者其它arm64架构的开发板也行）</strong>，或者是Linux服务器，为什么不试试让它们变成自己的小型NAS？</p>
<h2 id="NAS"><a href="#NAS" class="headerlink" title="NAS"></a>NAS</h2><p>NAS（Network Attached Storage：网络附属存储）按字面简单说就是连接在网络上，具备资料存储功能的装置，因此也称为“网络存储器”。它是一种专用数据存储服务器。</p>
<p>大型的NAS，比如：群晖。可以有App，对手机照片进行备份，还可以对数据进行灾变处理，但是价格就比较贵了。而本次搭建NAS，主要满足：</p>
<ul>
<li>在线访问数据</li>
<li>下载站</li>
<li>挂载到电脑上，作为网络U盘</li>
</ul>
<h2 id="操作思路"><a href="#操作思路" class="headerlink" title="操作思路"></a>操作思路</h2><h3 id="1-在线访问数据"><a href="#1-在线访问数据" class="headerlink" title="1. 在线访问数据"></a>1. 在线访问数据</h3><p>比如：.flv、.mp4、.jpg等等，我们使用PHP实现网络浏览，这里我们使用_h5ai:</p>
<p><strong><a href="https://larsjung.de/h5ai/demo/">演示网站</a></strong></p>
<p><strong><a href="https://larsjung.de/h5ai/">官方文档</a></strong></p>
<h3 id="2-下载站"><a href="#2-下载站" class="headerlink" title="2. 下载站"></a>2. 下载站</h3><p><img src="/2023/06/06/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%98%E6%88%90%E8%87%AA%E5%B7%B1%E7%9A%84NAS%E5%92%8C%E4%B8%8B%E8%BD%BD%E5%99%A8/DownloadToNAS.png" alt="DownloadToNAS"><br>下载站，我们使用Aria2这个多线程下载器实现，难点是挂载到电脑上，也就是目录映射。最好能满足：</p>
<ul>
<li>加密传输，保证安全</li>
<li>支持平台多，速度稳定</li>
</ul>
<h3 id="3-挂载到本地磁盘"><a href="#3-挂载到本地磁盘" class="headerlink" title="3. 挂载到本地磁盘"></a>3. 挂载到本地磁盘</h3><p>在Windwos上挂载<img src="/2023/06/06/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%98%E6%88%90%E8%87%AA%E5%B7%B1%E7%9A%84NAS%E5%92%8C%E4%B8%8B%E8%BD%BD%E5%99%A8/MountInWindows.png" alt="在Windwos上挂载"></p>
<p>其实，本地挂载树莓派、服务器磁盘的选择有很多。比如：SMB、FTP等。但是，考虑安全和利用情况下，我还是选择Webdav。</p>
<p>Windows和macOS都支持挂载Webdav，但是可能会出现无法写的情况。我建议使用第三方免费工具：</p>
<ul>
<li><a href="https://www.raidrive.com/">For Windwos：Raidrive</a></li>
<li><a href="https://apps.apple.com/cn/app/fe%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E5%99%A8/id1444382558?mt=12">For macOS：FE文件管理器</a></li>
</ul>
<p>以上两款软件也都是免费的。</p>
<p>本文使用Webdav挂载，如果你使用宝塔，或者使用SMB，那么也完全可以选择非Webdav协议挂载磁盘。</p>
<p>（宝塔不可使用Nginx Webdav插件）</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>综上，我们本次需要安装：</p>
<ul>
<li>Nginx：用来提供Web目录访问</li>
<li>PHP：用来映射目录，实现_h5ai</li>
<li>Nginx模块：Webdav模块和Fancyindex模块，用来实现Webdav</li>
</ul>
<h1 id="前排提示"><a href="#前排提示" class="headerlink" title="前排提示"></a>前排提示</h1><p>本次教程，适用所有架构的Linux（arm架构和x86都可以）。PHP、Nginx的配置，使用编译安装的方法。</p>
<p>不建议用宝塔安装Nginx和PHP，服务管理起来不方便，其它的懂的都懂</p>
<h1 id="服务器要求"><a href="#服务器要求" class="headerlink" title="服务器要求"></a>服务器要求</h1><p>如果是<strong>树莓派（或者其它arm64架构的开发板也行）</strong>，那么没什么具体要求，有个可以刷写SD卡的软件即可</p>
<p>但是，如果是服务器，最好选择高带宽的服务器，内存最好需要2G以上，否则编译PHP时，可能需要SWAP的支持。</p>
<p>我的是香橙派，也是arm64架构的开发板，系统用的Debian11，用其它linux系统的可以根据 命令自行修改一下即可</p>
<blockquote>
<p>从下面开始我都是用root用户来进行，不想用root用户的可以在命令前面加上<code>sudo</code></p>
</blockquote>
<h1 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h1><p><strong><a href="https://www.php.net/downloads.php">PHP官方下载地址</a></strong></p>
<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><blockquote>
<p>为下面编译参数做准备</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install build-essential pkg-config openssl libssl-dev libsqlite3-dev zlib1g-dev libcurl4-openssl-dev libpng-dev libjpeg-dev libonig-dev libzip-dev ffmpeg imagemagick -y</span><br></pre></td></tr></table></figure>

<h2 id="下载PHP"><a href="#下载PHP" class="headerlink" title="下载PHP"></a>下载PHP</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://www.php.net/distributions/php-8.2.6.tar.gz -P /usr/local/src</span><br><span class="line"><span class="built_in">cd</span> /usr/local/src &amp;&amp; tar xf php-8.2.6.tar.gz</span><br><span class="line"><span class="built_in">cd</span> php-8.2.6</span><br></pre></td></tr></table></figure>

<h2 id="配置用户和用户组"><a href="#配置用户和用户组" class="headerlink" title="配置用户和用户组"></a>配置用户和用户组</h2><blockquote>
<p>orangepi是我开发板自带的用户，不想用自带的用户也可以创建一个别的用户和用户组</p>
</blockquote>
<p>如果你在服务器上操作，建议创建一个www用户和www用户组：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一个www用户</span></span><br><span class="line">sudo useradd www</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个www用户组</span></span><br><span class="line">sudo groupadd www</span><br><span class="line"></span><br><span class="line"><span class="comment"># www用户归属于www用户组</span></span><br><span class="line">sudo usermod -a -G www www</span><br></pre></td></tr></table></figure>



<h2 id="配置编译参数"><a href="#配置编译参数" class="headerlink" title="配置编译参数"></a>配置编译参数</h2><blockquote>
<p>这是我配置的编译参数，其他PHP版本可能略微不一样，需要自己判断），也可以参考我这篇文章<a href="https://aienh.github.io/post/debian11%E9%83%A8%E7%BD%B2LNMP%EF%BC%88nginx-mariadb-php%EF%BC%89%E6%95%99%E7%A8%8B">部署LNMP教程</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure \</span><br><span class="line">--prefix=/usr/local/php \</span><br><span class="line">--with-curl \</span><br><span class="line">--with-mysqli \</span><br><span class="line">--with-openssl \</span><br><span class="line">--with-pdo-mysql \</span><br><span class="line">--with-jpeg \</span><br><span class="line">--enable-gd \</span><br><span class="line">--enable-fpm \</span><br><span class="line">--with-fpm-user=orangepi \</span><br><span class="line">--with-fpm-group=orangepi \</span><br><span class="line">--enable-bcmath \</span><br><span class="line">--enable-xml \</span><br><span class="line">--with-zip \</span><br><span class="line">--enable-mbstring \</span><br><span class="line">--enable-sockets  \</span><br><span class="line">--with-zlib   \</span><br><span class="line">--enable-fileinfo \</span><br><span class="line">--enable-exif</span><br></pre></td></tr></table></figure>

<ul>
<li>–with-fpm-user：fpm进程属于的用户</li>
<li>–with-fpm-group：fpm进程属于的用户组</li>
</ul>
<h2 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h2><blockquote>
<p>上面的<code>configure</code>配置没有问题，接下来就是编译和安装了，我图方便就一条命令来执行，新手可以把两条命令分开执行，先<code>make</code>在<code>make install</code></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make -j$(<span class="built_in">nproc</span>) &amp;&amp; make install -j$(<span class="built_in">nproc</span>)</span><br></pre></td></tr></table></figure>

<h2 id="复制配置文件"><a href="#复制配置文件" class="headerlink" title="复制配置文件"></a>复制配置文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> /usr/local/php/etc/php-fpm.conf.default /usr/local/php/etc/php-fpm.conf</span><br><span class="line"><span class="built_in">cp</span> /usr/local/php/etc/php-fpm.d/www.conf.default /usr/local/php/etc/php-fpm.d/www.conf</span><br></pre></td></tr></table></figure>

<h2 id="测试运行"><a href="#测试运行" class="headerlink" title="测试运行"></a>测试运行</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/local/php7/sbin/php-fpm</span><br></pre></td></tr></table></figure>

<h2 id="查看服务进程和端口"><a href="#查看服务进程和端口" class="headerlink" title="查看服务进程和端口"></a>查看服务进程和端口</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps aux | grep php-fpm</span><br><span class="line">lsof -i:9000</span><br></pre></td></tr></table></figure>

<h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><p><a href="http://nginx.org/en/download.html">Nginx官方下载地址</a></p>
<h2 id="安装依赖-1"><a href="#安装依赖-1" class="headerlink" title="安装依赖"></a>安装依赖</h2><blockquote>
<p>为下面编译参数做准备</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install build-essential libpcre3 libpcre3-dev zlib1g-dev openssl libssl-dev libxml2-dev libxslt-dev -y</span><br></pre></td></tr></table></figure>

<h2 id="额外模块"><a href="#额外模块" class="headerlink" title="额外模块"></a>额外模块</h2><ul>
<li><a href="https://github.com/aperezdc/ngx-fancyindex">Fancyindex模块</a></li>
</ul>
<p>如果我们需要进行目录映射，需要更好看的、更实用的目录映射，需要额外的Fancyindex模块支持。</p>
<ul>
<li><a href="https://github.com/arut/nginx-dav-ext-module">WebDav模块</a></li>
</ul>
<p>Nginx自带的Webdav支持不完善，需要额外的模块进行支持。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /usr/local/src/NginxModule/ &amp;&amp; <span class="built_in">cd</span> /usr/local/src/NginxModule</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/arut/nginx-dav-ext-module.git</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/aperezdc/ngx-fancyindex.git</span><br></pre></td></tr></table></figure>

<h2 id="下载Nginx"><a href="#下载Nginx" class="headerlink" title="下载Nginx"></a>下载Nginx</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://nginx.org/download/nginx-1.24.0.tar.gz -P /usr/local/src</span><br><span class="line"><span class="built_in">cd</span> /usr/local/src &amp;&amp; tar xf nginx-1.24.0.tar.gz</span><br><span class="line"><span class="built_in">cd</span> nginx-1.24.0</span><br></pre></td></tr></table></figure>

<h2 id="配置用户和用户组-1"><a href="#配置用户和用户组-1" class="headerlink" title="配置用户和用户组"></a>配置用户和用户组</h2><blockquote>
<p>orangepi是我开发板自带的用户，不想用自带的用户也可以创建一个别的用户和用户组</p>
</blockquote>
<p>如果你在服务器上操作，建议创建一个www用户和www用户组：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一个www用户</span></span><br><span class="line">sudo useradd www</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个www用户组</span></span><br><span class="line">sudo groupadd www</span><br><span class="line"></span><br><span class="line"><span class="comment"># www用户归属于www用户组</span></span><br><span class="line">sudo usermod -a -G www www</span><br></pre></td></tr></table></figure>

<h2 id="配置编译参数-1"><a href="#配置编译参数-1" class="headerlink" title="配置编译参数"></a>配置编译参数</h2><blockquote>
<p>这是我配置的编译参数，其他Nginx版本可能略微不一样，需要自己判断），也可以参考我这篇文章<a href="https://aienh.github.io/post/debian11%E9%83%A8%E7%BD%B2LNMP%EF%BC%88nginx-mariadb-php%EF%BC%89%E6%95%99%E7%A8%8B">部署LNMP教程</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure \</span><br><span class="line">--prefix=/usr/local/nginx \</span><br><span class="line">--user=orangepi \</span><br><span class="line">--group=orangepi \</span><br><span class="line">--sbin-path=/usr/local/nginx/sbin/nginx \</span><br><span class="line">--conf-path=/usr/local/nginx/nginx.conf \</span><br><span class="line">--error-log-path=/var/log/nginx/error.log \</span><br><span class="line">--http-log-path=/var/log/nginx/access.log \</span><br><span class="line">--pid-path=/var/run/nginx.pid \</span><br><span class="line">--lock-path=/var/run/nginx.lock \</span><br><span class="line">--http-client-body-temp-path=/var/cache/nginx/client_temp \</span><br><span class="line">--http-proxy-temp-path=/var/cache/nginx/proxy_temp \</span><br><span class="line">--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \</span><br><span class="line">--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \</span><br><span class="line">--http-scgi-temp-path=/var/cache/nginx/scgi_temp \</span><br><span class="line">--with-file-aio \</span><br><span class="line">--with-threads \</span><br><span class="line">--with-http_addition_module \</span><br><span class="line">--with-http_auth_request_module \</span><br><span class="line">--with-http_dav_module \</span><br><span class="line">--with-http_flv_module \</span><br><span class="line">--with-http_gunzip_module \</span><br><span class="line">--with-http_gzip_static_module \</span><br><span class="line">--with-http_mp4_module \</span><br><span class="line">--with-http_random_index_module \</span><br><span class="line">--with-http_realip_module \</span><br><span class="line">--with-http_secure_link_module \</span><br><span class="line">--with-http_slice_module \</span><br><span class="line">--with-http_ssl_module \</span><br><span class="line">--with-http_stub_status_module \</span><br><span class="line">--with-http_sub_module \</span><br><span class="line">--with-http_v2_module \</span><br><span class="line">--with-mail \</span><br><span class="line">--with-mail_ssl_module \</span><br><span class="line">--with-stream \</span><br><span class="line">--with-stream_realip_module \</span><br><span class="line">--with-stream_ssl_module \</span><br><span class="line">--with-stream_ssl_preread_module \</span><br><span class="line">--add-module=/usr/local/src/NginxModule/nginx-dav-ext-module \</span><br><span class="line">--add-module=/usr/local/src/NginxModule/ngx-fancyindex</span><br></pre></td></tr></table></figure>

<ul>
<li>–user：nginx进程属于的用户</li>
<li>–group：nginx进程属于的用户组</li>
</ul>
<h2 id="编译安装-1"><a href="#编译安装-1" class="headerlink" title="编译安装"></a>编译安装</h2><blockquote>
<p>上面的<code>configure</code>配置没有问题，接下来就是编译和安装了，我图方便就一条命令来执行，新手可以把两条命令分开执行，先<code>make</code>在<code>make install</code></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make -j$(<span class="built_in">nproc</span>) &amp;&amp; make install -j$(<span class="built_in">nproc</span>)</span><br></pre></td></tr></table></figure>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><blockquote>
<p>因为上面配置参数指定缓存文件在<code>/var/cache/nginx</code>，日志文件在<code>/var/log/nginx</code>，所以需要创建</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /var/cache/nginx</span><br><span class="line"><span class="built_in">mkdir</span> /var/log/nginx</span><br></pre></td></tr></table></figure>

<h2 id="测试运行-1"><a href="#测试运行-1" class="headerlink" title="测试运行"></a>测试运行</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure>

<h2 id="查看服务进程和端口-1"><a href="#查看服务进程和端口-1" class="headerlink" title="查看服务进程和端口"></a>查看服务进程和端口</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps aux | grep nginx</span><br><span class="line">lsof -i:80</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="配置-h5ai"><a href="#配置-h5ai" class="headerlink" title="配置_h5ai"></a>配置_h5ai</h1><p>H5AI，其实全称是：HTML5 Apache Index。最初是用来在Apache Web服务器上，完成资源映射，但是后来适配到Nginx等其他平台。配置很简单：<code>下载_h5ai</code>-<code>修改Nginx配置文件</code>-<code>开始使用</code>。<br>注意_h5ai的映射逻辑：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">网站根目录(需要映射的目录）</span><br><span class="line"> ├─ _h5ai</span><br><span class="line"> ├─ 你的其他文件1</span><br><span class="line"> └─ 你的其他文件1</span><br></pre></td></tr></table></figure>

<h2 id="下载-h5ai"><a href="#下载-h5ai" class="headerlink" title="下载_h5ai"></a>下载_h5ai</h2><p>因为是开源的工具，所以网上有很多修改版本，包含官方的：</p>
<ul>
<li><a href="https://larsjung.de/h5ai/">官方版本</a>：官方的版本，功能全、稳定。</li>
<li><a href="https://github.com/Pearlulu/h5ai_dplayer">Dplayer版本</a>：基于官方旧版本开发，支持更多格式的在线视频播放。</li>
<li><a href="https://github.com/Mintimate/h5ai_M">Mintimate’s _h5ai</a>：基于Dplayer版本并合并官方最新版本代码。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/orangepi</span><br><span class="line"><span class="built_in">mkdir</span> Downloads</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> Downloads</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/Mintimate/h5ai_M</span><br><span class="line"></span><br><span class="line"><span class="comment">#将h5ai_M项目里的_h5ai移到Downloads目录下</span></span><br><span class="line"><span class="built_in">cd</span> h5ai_M</span><br><span class="line"><span class="built_in">mv</span> _h5ai ..</span><br><span class="line"></span><br><span class="line"><span class="comment">#因为是用root用户创建的，需要修改该文件夹的所属用户和组</span></span><br><span class="line"><span class="built_in">cd</span> /home/orangepi</span><br><span class="line"><span class="built_in">chown</span> -R orangpepi:orangepi Downloads</span><br></pre></td></tr></table></figure>

<h2 id="修改Nginx配置"><a href="#修改Nginx配置" class="headerlink" title="修改Nginx配置"></a>修改Nginx配置</h2><p>备份原先的nginx配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> /usr/local/nginx/nginx.conf /usr/local/nginx/nginx.conf.bak</span><br></pre></td></tr></table></figure>

<p>新建一个配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /usr/local/nginx/nginx.conf</span><br></pre></td></tr></table></figure>

<p>直接添加配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#所属用户</span></span><br><span class="line">user  orangepi;</span><br><span class="line">worker_processes  1;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    gzip  on;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        <span class="comment">#映射目录</span></span><br><span class="line">        root /home/orangepi/Downloads;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            index  index.html index.htm /_h5ai/public/index.php;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">#webdav配置</span></span><br><span class="line">        location ^~/webdav&#123;</span><br><span class="line">            <span class="built_in">set</span> <span class="variable">$dest</span> <span class="variable">$http_destination</span>;</span><br><span class="line">            <span class="keyword">if</span> (-d \<span class="variable">$request_filename</span>) &#123;</span><br><span class="line">                   rewrite ^(.*[^/])$ <span class="variable">$1</span>/;</span><br><span class="line">                   <span class="built_in">set</span> <span class="variable">$dest</span> <span class="variable">$dest</span>/;</span><br><span class="line">             &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$request_method</span> ~ MKCOL) &#123;</span><br><span class="line">                   rewrite ^(.*[^/])$ <span class="variable">$1</span>/ <span class="built_in">break</span>;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="comment"># 映射目录</span></span><br><span class="line">            <span class="built_in">alias</span> /home/pi/Downloads/;</span><br><span class="line">            autoindex on;</span><br><span class="line">            <span class="comment"># Webdav设置</span></span><br><span class="line">            dav_methods PUT DELETE MKCOL COPY MOVE;</span><br><span class="line">            dav_ext_methods PROPFIND OPTIONS;</span><br><span class="line">            create_full_put_path on;</span><br><span class="line">            <span class="comment"># 最大上传文件</span></span><br><span class="line">            client_max_body_size 3G;</span><br><span class="line">            dav_access user:rw group:rw all:rw;</span><br><span class="line">            auth_basic <span class="string">&quot;Authorized Users Only&quot;</span>;</span><br><span class="line">            <span class="comment"># 验证用户</span></span><br><span class="line">            auth_basic_user_file webdavpasswd;</span><br><span class="line">        &#125;		</span><br><span class="line"></span><br><span class="line">        <span class="comment"># php-fpm配置</span></span><br><span class="line">        location ~ [^/]\.php(/|$)&#123;</span><br><span class="line">            <span class="comment"># try_files $uri =404;</span></span><br><span class="line">            fastcgi_pass  127.0.0.1:9000;</span><br><span class="line">            include fastcgi.conf;</span><br><span class="line">            fastcgi_index  index.php;</span><br><span class="line">            fastcgi_param  SCRIPT_FILENAME  <span class="variable">$document_root</span>/<span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><blockquote>
<p>如果装了宝塔的，使用前记得开放对应端口，80端口和9000端口</p>
</blockquote>
<p>直接用浏览器访问香橙派的IP，就可以访问<code>_h5ai</code>的映射目录</p>
<p>默认：</p>
<ul>
<li>用户名：<code>admin</code></li>
<li>密码：<code>admin</code></li>
</ul>
<p>然后进入这个地址：http://服务器的IP/_h5ai/public/index.php，这个界面是没有密码的，直接点击login</p>
<p>看到配置全绿就OK了</p>
<h1 id="配置下载器"><a href="#配置下载器" class="headerlink" title="配置下载器"></a>配置下载器</h1><p>如果只配置了_h5ai，距离NAS基本算完成一大步了。但是，我认为还需要配置下载器，能把网上资源，直接下载到服务器才算是NAS。<br>这里我们使用Aria2作为下载器。</p>
<h2 id="配置Aria2"><a href="#配置Aria2" class="headerlink" title="配置Aria2"></a>配置Aria2</h2><p>一键脚本搭建：</p>
<p><a href="https://github.com/Mintimate/AutoInstallAria2">AutoInstallAria2</a></p>
<blockquote>
<p>因为一键安装脚本会在家目录下创建目录，所以切换到orangepi用户</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su orangepi</span><br><span class="line">wget <span class="string">&quot;https://cdn.jsdelivr.net/gh/Mintimate/AutoInstallAria2@latest/AutoInstallAria2ForLinux.sh&quot;</span> &amp;&amp; bash AutoInstallAria2ForLinux.sh</span><br></pre></td></tr></table></figure>

<h2 id="测试使用"><a href="#测试使用" class="headerlink" title="测试使用"></a>测试使用</h2><p>这个时候，我们本地就可以使用Aria2的RPC进行下载了，首先Linux服务器上启动Aira2:</p>
<blockquote>
<p>如果装了宝塔的，使用前记得开放对应端口，默认6800端口，可在配置中修改</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">sudo ./aria2.sh</span><br></pre></td></tr></table></figure>

<p>上面修改的Nginx配置，已经设置Webdav参数和目录，还设置了<strong>验证用户</strong>，所以还需要创建<strong>webdavpasswd</strong>这个验证文件。如果不需要验证，可以注释这一项，就可以使用本地的Webdav客户端访问了。</p>
<h2 id="设置验证用户"><a href="#设置验证用户" class="headerlink" title="设置验证用户"></a>设置验证用户</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> &lt;&lt; <span class="string">EOF &gt; /usr/local/nginx/webdavpasswd</span></span><br><span class="line"><span class="string">#设置登录用户名和密码</span></span><br><span class="line"><span class="string">admin:$(openssl passwd 123)</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>admin</code>是设置的<strong>用户名</strong></p>
</li>
<li><p><code>123</code>是设置的<strong>密码</strong></p>
</li>
</ul>
<p><strong>用户名</strong>和<strong>密码</strong>可自行修改，之后重新加载配置文件和重启服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx -s reload</span><br><span class="line">killall nginx</span><br><span class="line">/usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure>



<h2 id="客户端登陆"><a href="#客户端登陆" class="headerlink" title="客户端登陆"></a>客户端登陆</h2><p>macOS和Windows的文件管理器都可以登录，但是功能不全（无法上传），这里推荐：</p>
<ul>
<li><a href="https://apps.apple.com/cn/app/fe%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E5%99%A8/id1444382558?mt=12">macOS：FE文件管理器</a></li>
<li><a href="https://www.raidrive.com/">Windwos：Raidrive</a></li>
</ul>
<p>以上软件，个人使用免费版本就可以了：</p>
<blockquote>
<p>没用过mac，我用windows演示</p>
</blockquote>
<p><img src="/2023/06/06/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%98%E6%88%90%E8%87%AA%E5%B7%B1%E7%9A%84NAS%E5%92%8C%E4%B8%8B%E8%BD%BD%E5%99%A8/image-20230607013014512.png" alt="image-20230607013014512"></p>
<p>nginx默认80端口，如果80端口要跑其它服务，也可以修改nginx配置文件把80端口改成其它端口，路径要加<code>/webdav</code>，然后一定要取消勾选<strong>地址！！！</strong></p>
<h1 id="添加系统服务"><a href="#添加系统服务" class="headerlink" title="添加系统服务"></a>添加系统服务</h1><blockquote>
<p>还是可以参考我这篇文章<a href="https://aienh.github.io/post/debian11%E9%83%A8%E7%BD%B2LNMP%EF%BC%88nginx-mariadb-php%EF%BC%89%E6%95%99%E7%A8%8B">部署LNMP教程</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /usr/lib/systemd/system/nginx.service</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=nginx</span><br><span class="line">After=network.target</span><br><span class="line">  </span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/nginx/sbin/nginx</span><br><span class="line">ExecReload=/usr/local/nginx/sbin/nginx -s reload</span><br><span class="line">ExecStop=/usr/local/nginx/sbin/nginx -s quit</span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line">  </span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /usr/lib/systemd/system/php-fpm.service</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=php-fpm</span><br><span class="line">After=network.target</span><br><span class="line">  </span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/php7/sbin/php-fpm</span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line">  </span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /usr/lib/systemd/system/aria2.service</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Aria2</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User=pi</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/etc/aria2/aria2c --conf-path=/etc/aria2/aria2.conf</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<p>建议还是给予执行权限：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x nginx.service</span><br><span class="line"><span class="built_in">chmod</span> +x php-fpm.service</span><br><span class="line"><span class="built_in">chmod</span> +x aria2.service</span><br></pre></td></tr></table></figure>

<p>允许开机启动并激活：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> nginx.service</span><br><span class="line">systemctl <span class="built_in">enable</span> php-fpm.service</span><br><span class="line">systemctl <span class="built_in">enable</span> aria2.service</span><br></pre></td></tr></table></figure>

<h1 id="连接Aria2进程"><a href="#连接Aria2进程" class="headerlink" title="连接Aria2进程"></a>连接Aria2进程</h1><ul>
<li>使用AriaNG连接Aria2进程</li>
</ul>
<h2 id="AriaNG-Native"><a href="#AriaNG-Native" class="headerlink" title="AriaNG Native"></a>AriaNG Native</h2><p>个人推荐使用AriaNG Native连接服务器和本地的Aria2进程。</p>
<ul>
<li>GitHub地址：<a href="https://github.com/mayswind/AriaNg-Native/releases">https://github.com/mayswind/AriaNg-Native/releases</a></li>
</ul>
<p>我们下载对应自己电脑版本的AriaNG Native：<br>之后，我们设置RPC：</p>
<blockquote>
<p>设置的RPC要和在linux上aria2.conf配置文件中的RPC一致（rpc-secret：设置Aria2验证远程码）</p>
</blockquote>
<p><img src="/2023/06/06/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%98%E6%88%90%E8%87%AA%E5%B7%B1%E7%9A%84NAS%E5%92%8C%E4%B8%8B%E8%BD%BD%E5%99%A8/AriaNG_NativeSetting.png" alt="设置RPC"></p>
<p>刷新即可连接：<br><img src="/2023/06/06/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%98%E6%88%90%E8%87%AA%E5%B7%B1%E7%9A%84NAS%E5%92%8C%E4%B8%8B%E8%BD%BD%E5%99%A8/AriaNG_Native.png" alt="连接成功"></p>
<h2 id="搭建网页前端——AriaNg"><a href="#搭建网页前端——AriaNg" class="headerlink" title="搭建网页前端——AriaNg"></a>搭建网页前端——AriaNg</h2><p>这个一般是部署在服务器<br>项目地址（GitHub）： <a href="https://github.com/mayswind/AriaNg/releases">https://github.com/mayswind/AriaNg/releases</a>    </p>
<h2 id="浏览器的扩展程序"><a href="#浏览器的扩展程序" class="headerlink" title="浏览器的扩展程序"></a>浏览器的扩展程序</h2><p>这是Chrome浏览器的扩展程序：</p>
<p><a href="https://chrome.google.com/webstore/detail/aria2-explorer/mpkodccbngfoacfalldjimigbofkhgjn?utm_source=ext_app_menu">https://chrome.google.com/webstore/detail/aria2-explorer/mpkodccbngfoacfalldjimigbofkhgjn?utm_source=ext_app_menu</a>    </p>
<blockquote>
<p>我图方便用的也是这种，用的火狐浏览器</p>
</blockquote>
<p><img src="/2023/06/06/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%98%E6%88%90%E8%87%AA%E5%B7%B1%E7%9A%84NAS%E5%92%8C%E4%B8%8B%E8%BD%BD%E5%99%A8/image-20230607021439381.png" alt="image-20230607021439381"></p>
<p>我下载的是第一个扩展</p>
<h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><p>打开管理扩展，点击选项</p>
<p><img src="/2023/06/06/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%98%E6%88%90%E8%87%AA%E5%B7%B1%E7%9A%84NAS%E5%92%8C%E4%B8%8B%E8%BD%BD%E5%99%A8/image-20230607021742222.png" alt="image-20230607021742222"></p>
<p>点击RPC服务器后再点击默认服务器</p>
<p><img src="/2023/06/06/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%98%E6%88%90%E8%87%AA%E5%B7%B1%E7%9A%84NAS%E5%92%8C%E4%B8%8B%E8%BD%BD%E5%99%A8/image-20230607021835467.png" alt="image-20230607021835467"></p>
<p>协议选http，填入服务器IP，密钥要和在linux上aria2.conf配置文件中的RPC一致，然后点保存</p>
<p><img src="/2023/06/06/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%98%E6%88%90%E8%87%AA%E5%B7%B1%E7%9A%84NAS%E5%92%8C%E4%B8%8B%E8%BD%BD%E5%99%A8/image-20230607022037734.png" alt="image-20230607022037734"></p>
<h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><p>固定到工具栏</p>
<p><img src="/2023/06/06/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%98%E6%88%90%E8%87%AA%E5%B7%B1%E7%9A%84NAS%E5%92%8C%E4%B8%8B%E8%BD%BD%E5%99%A8/image-20230607022319769.png" alt="image-20230607022319769"></p>
<p>点详情就可以使用了</p>
<p><img src="/2023/06/06/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%98%E6%88%90%E8%87%AA%E5%B7%B1%E7%9A%84NAS%E5%92%8C%E4%B8%8B%E8%BD%BD%E5%99%A8/image-20230607022411558.png" alt="image-20230607022411558"></p>
<p><img src="/2023/06/06/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%98%E6%88%90%E8%87%AA%E5%B7%B1%E7%9A%84NAS%E5%92%8C%E4%B8%8B%E8%BD%BD%E5%99%A8/image-20230607022456123.png" alt="image-20230607022456123"></p>
<p>连接到Aria2后就可以新建任务，把下载链接复制过去，就能把文件下载到Linux本地上了</p>
]]></content>
      <categories>
        <category>orangepi</category>
      </categories>
      <tags>
        <tag>arm64</tag>
      </tags>
  </entry>
  <entry>
    <title>旧手机变为linux服务器之Mobian</title>
    <url>/2023/05/26/%E6%97%A7%E6%89%8B%E6%9C%BA%E5%8F%98%E4%B8%BAlinux%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%8BMobian/</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>我上一台手机是小米的mix2s，因为用了三年多了，也有一些毛病，存储也不太够，所以我就换手机了，我这台小米mix2s就成为了备用机，但用到的时候很少，我就想着能不能刷成linux，<strong>我找到了一篇文章：<a href="https://forum.renegade-project.tech/t/835-845-855-uefi-archlinux/2497">在骁龙（835 845 855等）设备通过UEFI运行Archlinux</a>，</strong>我要刷ubuntu，其实步骤差不多，只是rootfs用的是ubuntu，因为本人技术有限，没刷成，我就想着看有没有现成的，然后就找到两个适合我手机型号的开源系统，分别是</p>
<ul>
<li><p><strong><a href="https://www.postmarketos.org/">postmarketOS</a></strong></p>
</li>
<li><p><strong><a href="https://mobian-project.org/">Mobian</a></strong></p>
</li>
</ul>
<p>其中postmarketOS使用Alpine Linux，而Mobian使用Debian GNU/Linux作为其开发和运行环境。</p>
<p>postmarketOS上适配小米mix2s设备的是社区某个大佬移植，测试版，不是稳定版，功能很少，我用过postmarketOS，bug挺多的。</p>
<p>而mobian相比于postmarketOS，适配小米mix2s的功能更多，所以我使用了mobian。</p>
<blockquote>
<p>在对应官网上查看支持的设备型号，看有没有支持自己型号的手机，在选择对应的系统，尽量选择稳定版（Main）的，测试版（Testing）的bug较多</p>
</blockquote>
<ul>
<li><p><strong><a href="https://wiki.postmarketos.org/wiki/Devices">postmarketOS支持设备</a></strong></p>
</li>
<li><p><strong><a href="https://wiki.mobian.org/doku.php?id=devices">Mobian支持设备</a></strong></p>
</li>
</ul>
<p><strong>除了这些支持的设备，可以在github上面找找，应该能找到非官方移植支持的其它设备，例如<a href="https://zhuanlan.zhihu.com/p/554022195">红米2刷Mobian体验原生Linux及软件安装问题处理[ 手机刷LINUX系列]</a>，<a href="https://www.bilibili.com/video/BV1xM4y1q7Na/">为红米6 Pro移植mobian</a></strong></p>
<h2 id="Mobian简介"><a href="#Mobian简介" class="headerlink" title="Mobian简介"></a>Mobian简介</h2><p>Mobian是一个社区驱动的项目，它基于Debian GNU / Linux操作系统设计，专为支持ARM架构而开发。作为一个非官方移植的操作系统，Mobian致力于在智能手机、平板电脑、单板计算机等设备上提供一种开放、自由和隐私保护的替代操作系统。</p>
<p>Mobian采用了GNOME桌面环境和Phosh用户界面，并集成了各种自由和开源应用程序，如Firefox浏览器、电话、信息、媒体播放器等。这样，用户可以方便地实现日常任务和消费需求。此外，Mobian还强调安全性和隐私性，为用户设备数据提供匿名性和私密性保障。通过添加各种安全控件和软件特性，Mobian确保用户在使用其操作系统时都有充分的保障和安全。</p>
<p>尽管Mobian是一个非官方移植，但已经获得了广泛的关注和支持。它由自愿参与的开发者和社区成员共同维护，不受任何公司或组织的控制。对于需要一个符合自己需求的操作系统的ARM设备用户来说，Mobian是一个令人兴奋的选择。</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p><strong>刷镜像前要确保已经解了BL锁，解BL锁方法上网一搜随便都能找到，这里是我搜到一篇小米的：<a href="https://zhuanlan.zhihu.com/p/465104171">【玩机教程】小米手机详细官方解BL锁🔒教程</a></strong></p>
<h2 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h2><p><strong>mobian有支持我的设备，直接按官方方法刷入即可</strong></p>
<h3 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h3><p><strong><a href="https://images.mobian.org/sdm845/weekly/">SDM845</a></strong> </p>
<blockquote>
<p>下载最新的版本，最新版本是debian12</p>
</blockquote>
<h3 id="安装adb-fastboot"><a href="#安装adb-fastboot" class="headerlink" title="安装adb-fastboot"></a>安装adb-fastboot</h3><p>首先电脑要安装<strong>adb-fastboot</strong>，这里我们下载windows版的</p>
<ul>
<li><strong><a href="https://dl.google.com/android/repository/platform-tools-latest-windows.zip">Windows版本</a></strong></li>
<li><strong><a href="https://dl.google.com/android/repository/platform-tools-latest-darwin.zip">Mac版本</a></strong></li>
<li><strong><a href="https://dl.google.com/android/repository/platform-tools-latest-linux.zip">Linux版本</a></strong></li>
</ul>
<p>解压，进入解压的目录，打开<code>platform-tools</code>文件夹，可以看到有<code>adb</code>和<code>fastboot</code>的exe文件，把整个<code>platform-tools</code>文件夹拖到你的任意盘里（建议弄个专门放工具的目录tools）</p>
<p>添加环境变量，这样我们就方便使用<code>adb</code>和<code>fastboot</code>命令了，环境变量参数就是<code>platform-tools</code>文件夹的路径，例如<code>E:\tools\platform-tools</code></p>
<h3 id="刷入镜像"><a href="#刷入镜像" class="headerlink" title="刷入镜像"></a>刷入镜像</h3><p><strong><a href="https://wiki.mobian-project.org/doku.php?id=install-android">官方文档</a></strong></p>
<p>我下载的目前最新的20230521包，是解压下载的tar.gz包，然后进入文件夹，在当前目录上面的路径显示框中输入cmd，然后回车即可。</p>
<blockquote>
<p>如果不同型号也是骁龙845的，看官方文档来确定手机的代号，小米mix2s的代号是polaris</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#检查设备是否连接</span></span><br><span class="line">fastboot devices</span><br><span class="line"></span><br><span class="line"><span class="comment">#刷入boot分区</span></span><br><span class="line">fastboot flash boot mobian-sdm845-phosh-20230521.boot-polaris.img</span><br><span class="line"></span><br><span class="line"><span class="comment">#刷入system分区</span></span><br><span class="line">fastboot flash system mobian-sdm845-phosh-20230521.boot.img</span><br><span class="line"></span><br><span class="line"><span class="comment">#刷入userdata分区</span></span><br><span class="line">fastboot -S 100M flash userdata mobian-sdm845-phosh-20230521.rootfs.img</span><br><span class="line"></span><br><span class="line"><span class="comment">#清除缓存文件</span></span><br><span class="line">fastboot erase dtbo</span><br></pre></td></tr></table></figure>

<p><strong>重启完就能使用mobian了</strong></p>
<h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p>默认用户：<code>mobian</code></p>
<p>默认密码：<code>1234</code></p>
<h2 id="基础配置和使用"><a href="#基础配置和使用" class="headerlink" title="基础配置和使用"></a>基础配置和使用</h2><h3 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#中科大源</span></span><br><span class="line">deb https://mirrors.ustc.edu.cn/debian/ bookworm main contrib non-free non-free-firmware</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/debian/ bookworm main contrib non-free non-free-firmware</span><br><span class="line">deb https://mirrors.ustc.edu.cn/debian/ bookworm-updates main contrib non-free non-free-firmware</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/debian/ bookworm-updates main contrib non-free non-free-firmware</span><br><span class="line">deb https://mirrors.ustc.edu.cn/debian/ bookworm-backports main contrib non-free non-free-firmware</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/debian/ bookworm-backports main contrib non-free non-free-firmware</span><br><span class="line">deb https://mirrors.ustc.edu.cn/debian-security/ bookworm-security main contrib non-free non-free-firmware</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/debian-security/ bookworm-security main contrib non-free non-free-firmware</span><br></pre></td></tr></table></figure>

<h3 id="登录-root"><a href="#登录-root" class="headerlink" title="登录 root"></a>登录 root</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo -i</span><br></pre></td></tr></table></figure>

<blockquote>
<p>下面的命令我都是用root用户进行，命令失败注意看权限</p>
</blockquote>
<h3 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">passwd root</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">passwd mobian</span><br></pre></td></tr></table></figure>

<h3 id="更新源"><a href="#更新源" class="headerlink" title="更新源"></a>更新源</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt update &amp;&amp; apt upgrade -y</span><br></pre></td></tr></table></figure>

<h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><p>设置firefox浏览器为中文</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install firefox-esr-l10n-zh-cn -y </span><br></pre></td></tr></table></figure>

<h3 id="安装基础工具"><a href="#安装基础工具" class="headerlink" title="安装基础工具"></a>安装基础工具</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install cmake make wget curl git gcc g++ clang python3-pip openssh* lrzsz neofetch htop -y</span><br></pre></td></tr></table></figure>

<h3 id="允许root用户ssh远程登录"><a href="#允许root用户ssh远程登录" class="headerlink" title="允许root用户ssh远程登录"></a>允许root用户ssh远程登录</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;PermitRootLogin yes &quot;</span> &gt;&gt; /etc/ssh/sshd_config | <span class="built_in">echo</span> <span class="string">&quot;PasswordAuthentication yes &quot;</span> &gt;&gt; /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart sshd</span><br></pre></td></tr></table></figure>

<h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><h4 id="安装-apt-依赖包，用于通过-HTTPS-来获取仓库。"><a href="#安装-apt-依赖包，用于通过-HTTPS-来获取仓库。" class="headerlink" title="安装 apt 依赖包，用于通过 HTTPS 来获取仓库。"></a>安装 apt 依赖包，用于通过 HTTPS 来获取仓库。</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install apt-transport-https ca-certificates gnupg2 software-properties-common -y</span><br></pre></td></tr></table></figure>

<h4 id="添加-Docker-的官方-GPG-密钥："><a href="#添加-Docker-的官方-GPG-密钥：" class="headerlink" title="添加 Docker 的官方 GPG 密钥："></a>添加 Docker 的官方 GPG 密钥：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/debian/gpg | apt-key add -</span><br></pre></td></tr></table></figure>

<h4 id="添加源"><a href="#添加源" class="headerlink" title="添加源"></a>添加源</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/apt/sources.list.d/docker.list</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#中科大源</span></span><br><span class="line">deb [<span class="built_in">arch</span>=arm64] https://mirrors.ustc.edu.cn/docker-ce/linux/debian bookworm stable</span><br><span class="line"><span class="comment">#deb-src [arch=arm64] https://mirrors.ustc.edu.cn/docker-ce/linux/debian bookworm stable</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt update</span><br></pre></td></tr></table></figure>

<h4 id="warning"><a href="#warning" class="headerlink" title="warning"></a>warning</h4><p>会出现以下warning：</p>
<blockquote>
<p>W: <a href="https://mirrors.ustc.edu.cn/docker-ce/linux/debian/dists/bookworm/InRelease">https://mirrors.ustc.edu.cn/docker-ce/linux/debian/dists/bookworm/InRelease</a>: 密钥存储在过时的 trusted.gpg 密钥环中（/etc/apt/trusted.gpg），请参见 apt-key(8) 的 DEPRECATION 一节以了解详情。</p>
</blockquote>
<h4 id="解决warning"><a href="#解决warning" class="headerlink" title="解决warning"></a>解决warning</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-key list</span><br></pre></td></tr></table></figure>

<p>找到docker的公钥指纹，复制后八个字符0EBFCD88（不包括空格）</p>
<p>导入 <code>/etc/apt/trusted.gpg.d</code> 目录下专用文件中的 GPG 密钥：</p>
<blockquote>
<p>这里是新创建了一个文件 <code>docker.gpg</code></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-key <span class="built_in">export</span> 0EBFCD88 | gpg --dearmour -o /etc/apt/trusted.gpg.d/docker.gpg</span><br></pre></td></tr></table></figure>

<h3 id="安装-Docker-Engine-Community"><a href="#安装-Docker-Engine-Community" class="headerlink" title="安装 Docker Engine-Community"></a>安装 Docker Engine-Community</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install docker-ce docker-ce-cli containerd.io -y</span><br></pre></td></tr></table></figure>

<h4 id="配置镜像加速"><a href="#配置镜像加速" class="headerlink" title="配置镜像加速"></a>配置镜像加速</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br></pre></td></tr></table></figure>

<p>加入以下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://docker.mirrors.ustc.edu.cn/&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload &amp;&amp; systemctl restart docker</span><br></pre></td></tr></table></figure>

<h3 id="安装Zerotier-One"><a href="#安装Zerotier-One" class="headerlink" title="安装Zerotier-One"></a>安装Zerotier-One</h3><blockquote>
<p>用脚本安装zerotier，脚本会将你的系统识别为buster，所以可以手动安装zerotier</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/apt/sources.list.d/zerotier.list</span><br></pre></td></tr></table></figure>

<p>添加下面内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deb http://download.zerotier.com/debian/bookworm bookworm main</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt update</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install zerotier-one -y</span><br></pre></td></tr></table></figure>



<blockquote>
<p><strong>直接把mobian变为kali</strong></p>
</blockquote>
<h3 id="安装Kali-Linux的工具集"><a href="#安装Kali-Linux的工具集" class="headerlink" title="安装Kali Linux的工具集"></a>安装Kali Linux的工具集</h3><p>Kali Linux 2019.03开始对默认工具集进行重大更改，默认工具集将分为三个主要类别：</p>
<ul>
<li>kali-linux-default，其中包含用于渗透测试的基本工具</li>
<li>kali-linux-large，具有更广泛的渗透测试工具集</li>
<li>kali-linux-everything，所有黑客工具</li>
</ul>
<h4 id="添加kali源"><a href="#添加kali源" class="headerlink" title="添加kali源"></a>添加kali源</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/apt/sources.list.d/kali.list</span><br></pre></td></tr></table></figure>

<p>添加以下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#中科大源</span></span><br><span class="line">deb https://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span><br></pre></td></tr></table></figure>

<h4 id="添加kali公钥"><a href="#添加kali公钥" class="headerlink" title="添加kali公钥"></a>添加kali公钥</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://archive.kali.org/archive-key.asc | apt-key add - </span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt update</span><br></pre></td></tr></table></figure>

<h4 id="warning-1"><a href="#warning-1" class="headerlink" title="warning"></a>warning</h4><p>会出现以下warning：</p>
<blockquote>
<p>W: <a href="https://mirrors.ustc.edu.cn/kali/dists/kali-rolling/InRelease">https://mirrors.ustc.edu.cn/kali/dists/kali-rolling/InRelease</a>: 密钥存储在过时的 trusted.gpg 密钥环中（/etc/apt/trusted.gpg），请参见 apt-key(8) 的 DEPRECATION 一节以了解详情。</p>
</blockquote>
<h4 id="解决warning-1"><a href="#解决warning-1" class="headerlink" title="解决warning"></a>解决warning</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-key list</span><br></pre></td></tr></table></figure>

<p>找到kali的公钥指纹，复制后八个字符7D8D0BF6（不包括空格）</p>
<p>导入 <code>/etc/apt/trusted.gpg.d</code> 目录下专用文件中的 GPG 密钥：</p>
<blockquote>
<p>这里是新创建了一个文件 <code>kali-linux.gpg</code></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-key <span class="built_in">export</span> 7D8D0BF6 | gpg --dearmour -o /etc/apt/trusted.gpg.d/kali-linux.gpg</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt update</span><br></pre></td></tr></table></figure>

<p>这样就可以安装一些kali的的工具集了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt search kali-linux</span><br></pre></td></tr></table></figure>

<p>例如安装kali-linux-default</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install kali-linux-default -y</span><br></pre></td></tr></table></figure>

<blockquote>
<p>默认的工具集里面有些工具需要GUI，例如burpsuite，手机不好操作，所以我就没有安装了，只挑了几个工具安装</p>
</blockquote>
<h4 id="安装一些kali工具"><a href="#安装一些kali工具" class="headerlink" title="安装一些kali工具"></a>安装一些kali工具</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install sqlmap nmap metasploit-framework <span class="built_in">set</span> -y</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>debian</tag>
      </tags>
  </entry>
  <entry>
    <title>debian11部署LNMP（nginx+mariadb+php）教程</title>
    <url>/2023/05/22/debian11%E9%83%A8%E7%BD%B2LNMP%EF%BC%88nginx-mariadb-php%EF%BC%89%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>LNMP是一种常见的网站开发和运行环境，它由四个主要的软件组成：</p>
<ul>
<li>Linux：操作系统，提供基础的运行平台</li>
<li>Nginx：高性能的Web服务器，负责处理HTTP请求和响应</li>
<li>MariaDB：开源的关系型数据库管理系统，负责存储和管理数据</li>
<li>PHP：脚本语言，负责处理业务逻辑和动态内容</li>
</ul>
<p>在本教程中，我们将使用debian11作为操作系统，编译安装最新版本的nginx、mariadb和php，并且开启一些常用的和必要的模块。我们假设你已经有了一台安装了debian11的服务器，并且可以通过SSH远程登录。</p>
<h2 id="步骤一：安装必要的依赖包"><a href="#步骤一：安装必要的依赖包" class="headerlink" title="步骤一：安装必要的依赖包"></a>步骤一：安装必要的依赖包</h2><p>在开始编译安装之前，我们需要先安装一些必要的依赖包，这些包可以帮助我们编译、安装和运行LNMP的各个组件。我们可以使用apt命令来安装这些包，如下所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update &amp;&amp; apt upgrade -y</span><br><span class="line">sudo apt install build-essential libpcre3 libpcre3-dev zlib1g zlib1g-dev openssl libssl-dev libxml2-dev libcurl4-openssl-dev libjpeg-dev libpng-dev libfreetype6-dev libmcrypt-dev libzip-dev libpam0g-dev libjudy-dev libsnappy-dev liblzma-dev bison libpmem-dev libbz2-dev -y</span><br></pre></td></tr></table></figure>

<p>这里我们安装了以下几类包：</p>
<ul>
<li>build-essential：包含了编译器、链接器等基本的开发工具</li>
<li>libpcre3、libpcre3-dev：提供了Perl兼容正则表达式的库，用于nginx的rewrite模块</li>
<li>zlib1g、zlib1g-dev：提供了压缩和解压缩的库，用于nginx的gzip模块</li>
<li>openssl、libssl-dev：提供了加密和解密的库，用于nginx的ssl模块</li>
<li>libxml2-dev、libcurl4-openssl-dev：提供了XML解析和HTTP客户端的库，用于php的curl、dom、simplexml等扩展</li>
<li>libjpeg-dev、libpng-dev、libfreetype6-dev：提供了图像处理的库，用于php的gd扩展</li>
<li>libmcrypt-dev：提供了加密算法的库，用于php的mcrypt扩展</li>
<li>libzip-dev：提供了ZIP文件处理的库，用于php的zip扩展</li>
</ul>
<p>安装完成后，我们可以检查一下这些包是否正确安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dpkg -l | grep -E <span class="string">&#x27;build-essential|libpcre3|zlib1g|openssl|libxml2|libcurl4|libjpeg|libpng|libfreetype6|libmcrypt|libzip&#x27;</span></span><br></pre></td></tr></table></figure>

<p>如果没有报错，就说明这些包都已经成功安装。</p>
<blockquote>
<p>要养成把源码包放到/usr/local/src目录下的好习惯</p>
</blockquote>
<h2 id="步骤二：下载并编译安装nginx"><a href="#步骤二：下载并编译安装nginx" class="headerlink" title="步骤二：下载并编译安装nginx"></a>步骤二：下载并编译安装nginx</h2><p>接下来，我们要下载并编译安装nginx。我们可以从官网下载最新版本的源码包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://nginx.org/download/nginx-1.24.0.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> nginx-1.24.0.tar.gz /usr/local/src</span><br></pre></td></tr></table></figure>

<p>然后解压缩源码包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar zxvf nginx-1.24.0.tar.gz</span><br></pre></td></tr></table></figure>

<p>进入源码目录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> nginx-1.24.0</span><br></pre></td></tr></table></figure>

<p>执行configure命令来配置编译选项：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/usr/local/nginx --user=www-data --group=www-data --with-http_ssl_module --with-http_gzip_static_module --with-http_stub_status_module --with-pcre</span><br></pre></td></tr></table></figure>

<p>这里我们指定了以下几个选项：</p>
<ul>
<li>–prefix=/usr/local/nginx：指定了安装目录为/usr/local/nginx</li>
<li>–user=www-data –group=www-data：指定了运行nginx的用户和组为www-data（如果不存在，则会自动创建）</li>
<li>–with-http_ssl_module：开启了ssl模块，支持HTTPS协议</li>
<li>–with-http_gzip_static_module：开启了gzip_static模块，支持压缩静态文件</li>
<li>–with-http_stub_status_module：开启了stub_status模块，支持查看nginx状态信息</li>
<li>–with-pcre：使用pcre库支持rewrite模块</li>
</ul>
<p>如果没有报错，就说明配置成功。然后执行make命令来编译源码：</p>
<blockquote>
<ul>
<li>如果你服务器线程够多，可以在make 命令后面加个-j参数，编译会更快，安装也同理，如给四个线程 make -j4 ，或者直接最大线程  make -j$(nproc)</li>
<li>如果make 或者make install 出现报错，则：<ol>
<li>检查你的环境是否安装了需要的依赖包，比如编译工具、库文件等等。可以尝试使用 apt install package 安装相关依赖。</li>
<li>检查编译选项中是否有与当前系统不兼容的配置。可搜索相应错误信息来确认具体原因，然后酌情修改编译选项。</li>
</ol>
</li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make -j$(<span class="built_in">nproc</span>)</span><br></pre></td></tr></table></figure>

<p>如果没有报错，就说明编译成功。最后执行make install命令来安装nginx：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo make install -j$(<span class="built_in">nproc</span>)</span><br></pre></td></tr></table></figure>

<p>如果没有报错，就说明安装成功。我们可以检查一下nginx是否正确安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo /usr/local/nginx/sbin/nginx -v</span><br></pre></td></tr></table></figure>

<p>如果输出了nginx的版本信息，就说明nginx已经正确安装。我们可以查看一下nginx的配置文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure>

<p>这里我们可以看到nginx的默认配置，包括监听端口、日志文件、虚拟主机等。我们可以根据自己的需要修改这些配置，或者添加新的配置。例如，我们可以开启gzip压缩功能，提高网站的性能：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    ...</span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_min_length 1k;</span><br><span class="line">    gzip_comp_level 9;</span><br><span class="line">    gzip_types text/plain text/css text/javascript application/json application/javascript application/xml application/x-font-ttf image/svg+xml;</span><br><span class="line">    gzip_vary on;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>保存并退出后，我们可以使用以下命令来测试配置文件是否正确：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo /usr/local/nginx/sbin/nginx -t</span><br></pre></td></tr></table></figure>

<p>如果没有报错，就说明配置文件正确。然后我们可以使用以下命令来启动nginx：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo /usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure>

<p>如果没有报错，就说明nginx已经启动。我们可以使用以下命令来查看nginx的进程：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps aux | grep nginx</span><br></pre></td></tr></table></figure>

<p>如果看到有一个master进程和几个worker进程，就说明nginx正常运行。我们也可以使用以下命令来查看nginx的状态信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://localhost/nginx_status</span><br></pre></td></tr></table></figure>

<p>如果看到类似以下的输出，就说明nginx状态信息正常：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Active connections: 1 </span><br><span class="line">server accepts handled requests</span><br><span class="line"> 1 1 1 </span><br><span class="line">Reading: 0 Writing: 1 Waiting: 0 </span><br></pre></td></tr></table></figure>

<p>至此，我们已经完成了下载并编译安装nginx的步骤。</p>
<h2 id="步骤三：下载并编译安装mariadb"><a href="#步骤三：下载并编译安装mariadb" class="headerlink" title="步骤三：下载并编译安装mariadb"></a>步骤三：下载并编译安装mariadb</h2><p>安装前依赖解决</p>
<ul>
<li>cmake</li>
</ul>
<p><a href="https://cmake.org/download/">https://cmake.org/download/</a></p>
<ul>
<li>boost</li>
</ul>
<p>boost Boost库是一个可移植、提供源代码的C库，作为标准库的后备，是C标准化进程的开发引擎之 一 </p>
<p><a href="https://www.boost.org/">https://www.boost.org</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#cmake命令 2.8 以上</span></span><br><span class="line">cmake --version</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://boostorg.jfrog.io/artifactory/main/release/1.82.0/source/boost_1_82_0.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> boost_1_82_0.tar.gz /usr/local/src</span><br><span class="line"></span><br><span class="line">tar -zxvf boost_1_82_0.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="built_in">mv</span> boost_1_82_0 /usr/local/boost</span><br></pre></td></tr></table></figure>

<p>接下来，我们要下载并编译安装mariadb。我们可以从官网下载最新版本的源码包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://mirrors.ustc.edu.cn/mariadb/mariadb-10.10.4/source/mariadb-10.10.4.tar.gz</span><br><span class="line"><span class="built_in">cp</span> mariadb-10.10.4.tar.gz /usr/local/src</span><br></pre></td></tr></table></figure>

<p>然后解压缩源码包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar zxvf mariadb-10.10.4.tar.gz</span><br></pre></td></tr></table></figure>

<p>进入源码目录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> mariadb-10.10.4</span><br></pre></td></tr></table></figure>

<p>创建build目录，用来放编译后的缓存文件，然后进入build目录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果cmake 出错或者又需要添加别的库的支持，直接执行 <code>rm -rf *</code>命令，删除build当前目录下的所有编译文件</p>
</blockquote>
<p>执行cmake命令来配置编译选项：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local/mariadb \</span><br><span class="line">-DMYSQL_DATADIR=/usr/local/mariadb/data \ </span><br><span class="line">-DMYSQL_UNIX_ADDR=/usr/local/mariadb/mysql.sock \</span><br><span class="line">-DWITH_INNOBASE_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_ARCHIVE_STPRAGE_ENGINE=1 \</span><br><span class="line">-DWITH_BLACKHOLE_STORAGE_ENGINE=1 \ </span><br><span class="line">-DWITH_EMBEDDED_SERVER=1 \</span><br><span class="line">-DENABLED_LOCAL_INFILE=1  \</span><br><span class="line">-DWIYH_READLINE=1 \</span><br><span class="line">-DWITH_LIBWRAP=0 \</span><br><span class="line">-DEXTRA_CHARSETS=all -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci \</span><br><span class="line">-DWITH_SSL=system \</span><br><span class="line">-DWITH_ZLIB=system \ </span><br><span class="line">-DMYSQL_TCP_PORT=3306 \</span><br><span class="line">-DWITH_BOOST=/usr/local/boost -DBOOST_ROOT=/usr/local/boost \</span><br><span class="line">-DMYSQL_USER=mysql \</span><br><span class="line">-DWITHOUT_GSSAPI=ON</span><br></pre></td></tr></table></figure>

<p>这里我们指定了以下几个选项：</p>
<ul>
<li>-DCMAKE_INSTALL_PREFIX=/usr/local/mariadb：指定了安装目录为/usr/local/mariadb</li>
<li>-DMYSQL_DATADIR=/usr/local/mariadb/data：指定了数据文件的目录为/usr/local/mariadb/data</li>
<li>-DMYSQL_UNIX_ADDR=/usr/local/mariadb/mysql.sock：指定sock文件路径</li>
<li>-DWITH_INNOBASE_STORAGE_ENGINE=1：开启了InnoDB存储引擎支持，支持事务和外键等特性  </li>
<li>-DWITH_ARCHIVE_STORAGE_ENGINE=1：开启了Archive存储引擎支持，支持高压缩比的存储 </li>
<li>-DWITH_BLACKHOLE_STORAGE_ENGINE=1：开启了Blackhole存储引擎，支持不存储任何数据的存储</li>
<li>-DWITH_EMBEDDED_SERVER=1：开启嵌入式服务器支持，可以作为一个嵌入式服务器集成到其他程序中。生成一个libmysqld.a(.so)的库，这个库同时集成了mysql服务与客户端API</li>
<li>-DENABLED_LOCAL_INFILE=1：开启本地数据导入支持。</li>
<li>-DWITH_READLINE=1：使用readline库支持命令行编辑和历史记录功能</li>
<li> -DWITH_LIBWRAP=0：关闭libwrap库的支持，避免编译错误</li>
<li>-DEXTRA_CHARSETS=all -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci  ：安装所有字符集、默认字符集utf-8 、校验字符</li>
<li>-DWITH_SSL=system：使用系统自带的openssl库支持加密连接功能</li>
<li>-DWITH_ZLIB=system：使用系统自带的zlib库支持压缩功能</li>
<li>-DMYSQL_TCP_PORT=3306：指定了TCP端口号为3306</li>
<li>-DWITH_BOOST=/usr/local/boost  -DBOOST_ROOT=/usr/local/boost ：允许下载boost库文件</li>
<li>-DMYSQL_USER=mysql ： 指定了运行mariadb的用户为mysql</li>
</ul>
<blockquote>
<p>以上参数需要和下文<code>my.cnf</code>同步（如果你需要修改我的编译参数，记得下文配置文件一并修改）</p>
</blockquote>
<p>如果没有报错，就说明配置成功。然后执行make命令来编译源码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make -j$(<span class="built_in">nproc</span>)</span><br></pre></td></tr></table></figure>

<p>如果没有报错，就说明编译成功。最后执行make install命令来安装mariadb：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo make install -j$(<span class="built_in">nproc</span>)</span><br></pre></td></tr></table></figure>

<p>如果没有报错，就说明安装成功。我们可以检查一下mariadb是否正确安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo /usr/local/mariadb/bin/mysql --version</span><br></pre></td></tr></table></figure>

<p>如果输出了mariadb的版本信息，就说明mariadb已经正确安装。</p>
<p>编译并安装完成后，我们需要进行一些配置工作，以确保MariaDB能够正常运行。首先，我们需要创建一个mysql用户和组，并修改MariaDB目录的属主和属组：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo groupadd mysql</span><br><span class="line">sudo useradd -r -g mysql mysql</span><br><span class="line">sudo <span class="built_in">chown</span> -R mysql:mysql /usr/local/mariadb</span><br></pre></td></tr></table></figure>

<p>然后，我们需要复制初始化脚本到相应的位置，并设置相应的权限：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">cp</span> /usr/local/mariadb/support-files/mysql.server /etc/init.d/mysqld</span><br><span class="line">sudo <span class="built_in">chmod</span> +x /etc/init.d/mysqld</span><br></pre></td></tr></table></figure>

<p>查看MySQL/MariaDB将要从哪些配置文件中读取默认选项：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqld --<span class="built_in">help</span> --verbose | grep <span class="string">&quot;Default options are read&quot;</span> </span><br></pre></td></tr></table></figure>

<blockquote>
<p>默认情况下会在以下位置读取：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/my.cnf /etc/mysql/my.cnf ~/.my.cnf $MARIADB_INSTALL_DIR/my.cnf</span><br></pre></td></tr></table></figure>
</blockquote>
<p>修改MariaDB配置文件，优化MariaDB </p>
<p>配置文件位于/etc/my.cnf ，没有则创建一个（直接用vim也会自动创建）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /usr/local/mariadb/my.cnf</span><br></pre></td></tr></table></figure>

<p>参考配置示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Begin /etc/mysql/my.cnf</span><br><span class="line"># The following options will be passed to all MySQL clients</span><br><span class="line">[client]</span><br><span class="line">port = 3306</span><br><span class="line">socket = /tmp/mysql.sock</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">user = mysql</span><br><span class="line">port = 3306</span><br><span class="line">socket = /tmp/mysql.sock</span><br><span class="line"># MariaDB安装地址</span><br><span class="line">basedir = /usr/local/mariadb/</span><br><span class="line">datadir = /usr/local/mariadb/data/</span><br><span class="line">pid-file = /usr/local/mariadb/mysqld.pid</span><br><span class="line">log-error = /usr/local/mariadb/data/logs/mysqld.log</span><br><span class="line"></span><br><span class="line"># 开启慢查询日志功能</span><br><span class="line">slow_query_log = 1</span><br><span class="line">slow_query_log_file = /usr/local/mariadb/data/logs/slow.log</span><br><span class="line">long_query_time = 1</span><br><span class="line">log_queries_not_using_indexes = 1</span><br><span class="line"></span><br><span class="line">#skip-external-locking</span><br><span class="line">key_buffer_size = 16M</span><br><span class="line">max_allowed_packet = 1M</span><br><span class="line">sort_buffer_size = 512K</span><br><span class="line">net_buffer_length = 16K</span><br><span class="line">myisam_sort_buffer_size = 8M</span><br><span class="line">skip-name-resolve = 0</span><br><span class="line"></span><br><span class="line"># character set settings</span><br><span class="line">character-set-server = utf8</span><br><span class="line">collation-server = utf8_general_ci</span><br><span class="line"></span><br><span class="line"># default storage engine</span><br><span class="line">default-storage-engine = InnoDB</span><br><span class="line"></span><br><span class="line"># innodb settings</span><br><span class="line">innodb_buffer_pool_size = 32M</span><br><span class="line">innodb_log_file_size = 48M</span><br><span class="line">innodb_log_buffer_size = 16M</span><br><span class="line">innodb_flush_log_at_trx_commit = 1</span><br><span class="line">innodb_flush_method = O_DIRECT</span><br><span class="line">innodb_thread_concurrency = 8</span><br><span class="line">innodb_lock_wait_timeout = 50</span><br><span class="line">innodb_write_io_threads = 4</span><br><span class="line">innodb_read_io_threads = 4</span><br><span class="line">innodb_force_recovery =1</span><br><span class="line"></span><br><span class="line">[mysqldump]</span><br><span class="line">quick</span><br><span class="line">max_allowed_packet = 16M</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">no-auto-rehash</span><br><span class="line"># Remove the next comment character if you are not familiar with SQL</span><br><span class="line">#safe-updates</span><br><span class="line"></span><br><span class="line">[isamchk]</span><br><span class="line">key_buffer = 20M</span><br><span class="line">sort_buffer_size = 20M</span><br><span class="line">read_buffer = 2M</span><br><span class="line">write_buffer = 2M</span><br><span class="line"></span><br><span class="line">[myisamchk]</span><br><span class="line">key_buffer_size = 20M</span><br><span class="line">sort_buffer_size = 20M</span><br><span class="line">read_buffer = 2M</span><br><span class="line">write_buffer = 2M</span><br><span class="line"></span><br><span class="line">[mysqlhotcopy]</span><br><span class="line">interactive-timeout</span><br><span class="line"># End /etc/my.cnf</span><br></pre></td></tr></table></figure>

<p>保存并退出后，我们可以使用以下命令来初始化数据库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo /usr/local/mariadb/scripts/mysql_install_db --user=mysql --basedir=/usr/local/mariadb --datadir=/usr/local/mariadb/data</span><br></pre></td></tr></table></figure>

<p>如果没有报错，就说明数据库初始化成功。然后我们可以使用以下命令来启动mariadb：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo /usr/local/mariadb/bin/mysqld_safe --user=mysql</span><br></pre></td></tr></table></figure>

<p>如果没有报错，就说明mariadb已经启动。我们可以使用以下命令来查看mariadb的进程：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps aux | grep mysqld</span><br></pre></td></tr></table></figure>

<p>如果看到有一个mysqld_safe进程和一个mysqld进程，就说明mariadb正常运行。我们也可以使用以下命令来登录mariadb：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/local/mariadb/bin/mysql -u root -p</span><br></pre></td></tr></table></figure>

<p>如果看到类似以下的输出，就说明mariadb登录成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection <span class="built_in">id</span> is 2</span><br><span class="line">Server version: 10.6.5-MariaDB Source distribution</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt;</span><br></pre></td></tr></table></figure>

<p>至此，我们已经完成了下载并编译安装mariadb的步骤。</p>
<h2 id="步骤四：下载并编译安装php"><a href="#步骤四：下载并编译安装php" class="headerlink" title="步骤四：下载并编译安装php"></a>步骤四：下载并编译安装php</h2><p>接下来，我们要下载并编译安装php。我们可以从官网下载最新版本的源码包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://www.php.net/distributions/php-8.1.0.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> php-8.1.0.tar.gz /usr/local/src</span><br></pre></td></tr></table></figure>

<p>然后解压缩源码包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar zxvf php-8.1.0.tar.gz</span><br></pre></td></tr></table></figure>

<p>进入源码目录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> php-8.1.0</span><br></pre></td></tr></table></figure>

<p>执行configure命令来配置编译选项：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/usr/local/php --with-config-file-path=/usr/local/php/etc --enable-fpm --with-fpm-user=www-data --with-fpm-group=www-data --with-mysqli=/usr/local/mariadb/bin/mysql_config --with-pdo-mysql=/usr/local/mariadb/bin/mysql_config --with-openssl --with-zlib --with-curl --with-gd --with-jpeg --with-png --with-freetype --enable-gd-jis-conv --with-zip --enable-mbstring</span><br></pre></td></tr></table></figure>

<p>这里我们指定了以下几个选项：</p>
<ul>
<li>–prefix=/usr/local/php：指定了安装目录为/usr/local/php</li>
<li>–with-config-file-path=/usr/local/php/etc：指定了配置文件的目录为/usr/local/php/etc</li>
<li>–enable-fpm：开启了fpm模式，支持与nginx配合使用</li>
<li>–with-fpm-user=www-data –with-fpm-group=www-data：指定了运行php-fpm的用户和组为www-data</li>
<li>–with-mysqli=/usr/local/mariadb/bin/mysql_config –with-pdo-mysql=/usr/local/mariadb/bin/mysql_config：开启了mysqli和pdo_mysql扩展，支持与mariadb交互</li>
<li>–with-openssl：开启了openssl扩展，支持加密功能</li>
<li>–with-zlib：开启了zlib扩展，支持压缩功能</li>
<li>–with-curl：开启了curl扩展，支持HTTP客户端功能</li>
<li>–with-gd：开启了gd扩展，支持图像处理功能</li>
<li>–with-jpeg –with-png –with-freetype：指定了gd扩展使用的图像库</li>
<li>–enable-gd-jis-conv：开启了gd扩展的日文转换功能</li>
<li>–with-zip：开启了zip扩展，支持ZIP文件处理功能</li>
<li>–enable-mbstring：开启了mbstring扩展，支持多字节字符串处理功能</li>
</ul>
<p>如果没有报错，就说明配置成功。然后执行make命令来编译源码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo make -j$(<span class="built_in">nproc</span>)</span><br></pre></td></tr></table></figure>

<p>如果没有报错，就说明编译成功。最后执行make install命令来安装php：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo make install -j$(<span class="built_in">nproc</span>)</span><br></pre></td></tr></table></figure>

<p>如果没有报错，就说明安装成功。我们可以检查一下php是否正确安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo /usr/local/php/bin/php -v</span><br></pre></td></tr></table></figure>

<p>如果输出了php的版本信息，就说明php已经正确安装。我们可以查看一下php的配置文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /usr/local/php/etc/php.ini</span><br></pre></td></tr></table></figure>

<p>这里我们可以看到php的默认配置，包括错误报告、内存限制、文件上传、时区等。我们可以根据自己的需要修改这些配置，或者添加新的配置。例如，我们可以开启错误显示功能，方便调试：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[PHP]</span><br><span class="line">...</span><br><span class="line">display_errors = On</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>保存并退出后，我们可以使用以下命令来复制php-fpm的配置文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">cp</span> /usr/local/php/etc/php-fpm.conf.default /usr/local/php/etc/php-fpm.conf</span><br><span class="line">sudo <span class="built_in">cp</span> /usr/local/php/etc/php-fpm.d/www.conf.default /usr/local/php/etc/php-fpm.d/www.conf</span><br></pre></td></tr></table></figure>

<p>然后我们可以使用以下命令来启动php-fpm</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo /usr/local/php/sbin/php-fpm</span><br></pre></td></tr></table></figure>

<p>如果没有报错，就说明php-fpm已经启动。我们可以使用以下命令来查看php-fpm的进程：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps aux | grep php-fpm</span><br></pre></td></tr></table></figure>

<p>如果看到有一个master进程和几个worker进程，就说明php-fpm正常运行。我们也可以使用以下命令来测试php是否能够处理请求：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://localhost/index.php</span><br></pre></td></tr></table></figure>

<p>如果看到类似以下的输出，就说明php能够处理请求：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Hello, world!</span><br></pre></td></tr></table></figure>

<p>至此，我们已经完成了下载并编译安装php的步骤。</p>
<h2 id="步骤五：配置nginx和php-fpm的通信"><a href="#步骤五：配置nginx和php-fpm的通信" class="headerlink" title="步骤五：配置nginx和php-fpm的通信"></a>步骤五：配置nginx和php-fpm的通信</h2><p>最后，我们要配置nginx和php-fpm的通信，让nginx能够将PHP请求转发给php-fpm处理，并将结果返回给客户端。我们可以使用以下命令来编辑nginx的虚拟主机配置文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /usr/local/nginx/conf/vhost/default.conf</span><br></pre></td></tr></table></figure>

<p>这里我们可以添加以下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name localhost;</span><br><span class="line">    root /usr/local/nginx/html;</span><br><span class="line">    index index.html index.php;</span><br><span class="line"></span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">        fastcgi_index index.php;</span><br><span class="line">        fastcgi_param SCRIPT_FILENAME $document_root<span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">        include fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里我们指定了以下几个参数：</p>
<ul>
<li>listen 80：指定了监听端口为80</li>
<li>server_name localhost：指定了服务器名称为localhost</li>
<li>root /usr/local/nginx/html：指定了网站根目录为/usr/local/nginx/html</li>
<li>index index.html index.php：指定了默认首页为index.html或index.php</li>
<li>location ~ .php$：匹配所有以.php结尾的请求</li>
<li>fastcgi_pass 127.0.0.1:9000：指定了将请求转发给本地9000端口的php-fpm进程</li>
<li>fastcgi_index index.php：指定了默认PHP文件为index.php</li>
<li>fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name：指定了PHP脚本文件的完整路径</li>
<li>include fastcgi_params：包含了一些通用的fastcgi参数</li>
</ul>
<p>保存并退出后，我们可以使用以下命令来测试配置文件是否正确：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo /usr/local/nginx/sbin/nginx -t</span><br></pre></td></tr></table></figure>

<p>如果没有报错，就说明配置文件正确。然后我们可以使用以下命令来重载nginx：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo /usr/local/nginx/sbin/nginx -s reload</span><br></pre></td></tr></table></figure>

<p>如果没有报错，就说明nginx已经重载。我们可以使用以下命令来测试nginx是否能够处理PHP请求：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://localhost/index.php</span><br></pre></td></tr></table></figure>

<p>如果看到类似以下的输出，就说明nginx能够处理PHP请求：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Hello, world!</span><br></pre></td></tr></table></figure>

<p>至此，我们已经完成了配置nginx和php-fpm的通信的步骤。</p>
<h2 id="步骤六：把所有的服务能通过systemctl来管理启动"><a href="#步骤六：把所有的服务能通过systemctl来管理启动" class="headerlink" title="步骤六：把所有的服务能通过systemctl来管理启动"></a>步骤六：把所有的服务能通过systemctl来管理启动</h2><p>为了方便管理和控制我们的LNMP服务，我们可以把它们都注册为systemd的服务单元，这样我们就可以使用systemctl命令来启动、停止、重启、查看状态等操作。我们可以使用以下命令来创建服务单元文件：</p>
<p>创建nginx.service文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /lib/systemd/system/nginx.service</span><br></pre></td></tr></table></figure>

<p>然后添加以下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#nginx.service</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=nginx - high performance web server</span><br><span class="line">Documentation=https://nginx.org/en/docs/</span><br><span class="line">After=network-online.target remote-fs.target nss-lookup.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">PIDFile=/usr/local/nginx/logs/nginx.pid</span><br><span class="line">ExecStartPre=/usr/local/nginx/sbin/nginx -t -c /usr/local/nginx/conf/nginx.conf</span><br><span class="line">ExecStart=/usr/local/nginx/sbin/nginx</span><br><span class="line">ExecReload=/bin/kill -s HUP <span class="variable">$MAINPID</span></span><br><span class="line">ExecStop=/bin/kill -s QUIT <span class="variable">$MAINPID</span></span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>


<p>创建mariadb.service文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /lib/systemd/system/mariadb.service</span><br></pre></td></tr></table></figure>

<p>然后添加以下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mariadb.service</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=MariaDB database server</span><br><span class="line">Documentation=https://mariadb.com/kb/en/</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">PIDFile=/usr/local/mariadb/mariadb.pid</span><br><span class="line">ExecStart=/usr/local/mariadb/bin/mysqld_safe --user=mysql --basedir=/usr/local/mariadb --datadir=/usr/local/mariadb/data</span><br><span class="line">ExecStop=/bin/kill -s QUIT <span class="variable">$MAINPID</span></span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>


<p>创建php-fpm.service文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /lib/systemd/system/php-fpm.service</span><br></pre></td></tr></table></figure>

<p>然后添加以下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># php-fpm.service</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=PHP FastCGI Process Manager</span><br><span class="line">Documentation=https://www.php.net/manual/en/install.fpm.php</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">PIDFile=/usr/local/php/var/run/php-fpm.pid</span><br><span class="line">ExecStart=/usr/local/php/sbin/php-fpm --nodaemonize --fpm-config /usr/local/php/etc/php-fpm.conf</span><br><span class="line">ExecReload=/bin/kill -USR2 <span class="variable">$MAINPID</span></span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<p>这里我们指定了以下几个参数：</p>
<ul>
<li>Description：服务的描述信息</li>
<li>Documentation：服务的文档链接</li>
<li>After：服务的启动顺序，表示在哪些服务之后启动</li>
<li>Wants：服务的启动依赖，表示需要哪些服务同时启动</li>
<li>Type：服务的类型，表示如何启动和停止服务，这里我们使用forking类型，表示服务会创建子进程并返回主进程的PID</li>
<li>PIDFile：服务的PID文件位置，用于记录主进程的PID，方便管理和控制服务</li>
<li>ExecStart：服务的启动命令，用于执行服务的主程序或脚本，可以指定一些参数或选项</li>
<li>ExecStartPre：服务的启动前置命令，用于执行一些准备工作，例如检查配置文件等</li>
<li>ExecReload：服务的重载命令，用于重新加载配置文件或刷新缓存等，不会中断服务的运行</li>
<li>ExecStop：服务的停止命令，用于终止服务的运行，通常是发送一个信号给主进程</li>
<li>PrivateTmp：服务的私有临时目录选项，表示是否为每个服务创建一个独立的/tmp目录，避免文件冲突或泄露等问题</li>
<li>WantedBy：服务的安装目标，表示在哪些运行级别下启用该服务，这里我们使用multi-user.target，表示在多用户模式下启用该服务</li>
</ul>
<p>保存并退出后，我们可以使用以下命令来重新加载systemd：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure>

<p>然后给添加的服务给予执行权限：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> a+x /lib/systemd/system/nginx.service</span><br><span class="line"><span class="built_in">chmod</span> a+x /lib/systemd/system/mariadb.service</span><br><span class="line"><span class="built_in">chmod</span> a+x /lib/systemd/system/php-fpm.service</span><br></pre></td></tr></table></figure>

<p>如果没有报错，就说明systemd已经重新加载。然后我们可以使用以下命令来启动、停止、重启、查看状态等操作：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl start nginx <span class="comment"># 启动nginx服务</span></span><br><span class="line">sudo systemctl stop nginx <span class="comment"># 停止nginx服务</span></span><br><span class="line">sudo systemctl restart nginx <span class="comment"># 重启nginx服务</span></span><br><span class="line">sudo systemctl reload nginx <span class="comment"># 重载nginx服务</span></span><br><span class="line">sudo systemctl status nginx <span class="comment"># 查看nginx服务状态</span></span><br><span class="line"></span><br><span class="line">sudo systemctl start mariadb <span class="comment"># 启动mariadb服务</span></span><br><span class="line">sudo systemctl stop mariadb <span class="comment"># 停止mariadb服务</span></span><br><span class="line">sudo systemctl restart mariadb <span class="comment"># 重启mariadb服务</span></span><br><span class="line">sudo systemctl status mariadb <span class="comment"># 查看mariadb服务状态</span></span><br><span class="line"></span><br><span class="line">sudo systemctl start php-fpm <span class="comment"># 启动php-fpm服务</span></span><br><span class="line">sudo systemctl stop php-fpm <span class="comment"># 停止php-fpm服务</span></span><br><span class="line">sudo systemctl restart php-fpm <span class="comment"># 重启php-fpm服务</span></span><br><span class="line">sudo systemctl reload php-fpm <span class="comment"># 重载php-fpm服务</span></span><br><span class="line">sudo systemctl status php-fpm <span class="comment"># 查看php-fpm服务状态</span></span><br></pre></td></tr></table></figure>

<p>如果没有报错，就说明systemctl能够正常管理和控制我们的LNMP服务。我们也可以使用以下命令来设置LNMP服务为开机自启动：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> nginx <span class="comment"># 设置nginx服务为开机自启动</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> mariadb <span class="comment"># 设置mariadb服务为开机自启动</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> php-fpm <span class="comment"># 设置php-fpm服务为开机自启动</span></span><br></pre></td></tr></table></figure>

<p>如果没有报错，就说明LNMP服务已经设置为开机自启动。我们可以使用以下命令来查看LNMP服务的开机自启动状态：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl is-enabled nginx <span class="comment"># 查看nginx服务是否开机自启动</span></span><br><span class="line">sudo systemctl is-enabled mariadb <span class="comment"># 查看mariadb服务是否开机自启动</span></span><br><span class="line">sudo systemctl is-enabled php-fpm <span class="comment"># 查看php-fpm服务是否开机自启动</span></span><br></pre></td></tr></table></figure>

<p>如果输出了enabled，就说明LNMP服务已经开机自启动。</p>
<p>至此，我们已经完成了把所有的服务能通过systemctl来管理启动的步骤。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>恭喜你，你已经成功地用debian11来部署了LNMP（nginx+mariadb+php）环境，并且把它们都注册为systemd的服务单元，方便管理和控制。你现在可以使用这个环境来开发和运行你的网站项目了。希望这个教程文档对你有帮助，如果你有任何问题或者建议，可以随时跟我说哦。谢谢你的阅读和支持。😘</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>LNMP</tag>
        <tag>debian</tag>
      </tags>
  </entry>
  <entry>
    <title>linux之crontab定时任务</title>
    <url>/2023/05/15/linux%E4%B9%8Bcrontab%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<h2 id="Linux-crontab-命令"><a href="#Linux-crontab-命令" class="headerlink" title="Linux crontab 命令"></a>Linux crontab 命令</h2><p>Linux crontab 是用来定期执行程序的命令。</p>
<p>当安装完成操作系统之后，默认便会启动此任务调度命令。</p>
<p><strong>crond</strong> 命令每分钟会定期检查是否有要执行的工作，如果有要执行的工作便会自动执行该工作。</p>
<p><strong>注意：</strong>新创建的 cron 任务，不会马上执行，至少要过 2 分钟后才可以，当然你可以重启 cron 来马上执行。</p>
<p>而 linux 任务调度的工作主要分为以下两类：</p>
<ul>
<li>1、系统执行的工作：系统周期性所要执行的工作，如备份系统数据、清理缓存</li>
<li>2、个人执行的工作：某个用户定期要做的工作，例如每隔 10 分钟检查邮件服务器是否有新信，这些工作可由每个用户自行设置 </li>
</ul>
<p><strong>在<code>/etc/crontab</code>文件中可以看到所有用户的crontab任务，我自己实测直接修改<code>/etc/crontab</code>来添加crontab任务没有生效（可能是权限问题，我没深究），所以没有修改该文件来创建crontab任务</strong></p>
<blockquote>
<p>/etc/cron.deny  #该文件中所列的用户不允许使用Crontab命令</p>
<p>/etc/cron.allow  #该文件中所列的用户允许使用Crontab命令</p>
</blockquote>
<p><strong>crontab命令格式详解</strong></p>
<p>每项工作 (每行) 的格式都是具有六个栏位，这六个栏位的意义为：</p>
<table>
<thead>
<tr>
<th align="left">代表意义</th>
<th align="left">分钟</th>
<th align="left">小时</th>
<th align="left">日期（天）</th>
<th align="left">月份</th>
<th align="left">周</th>
<th align="left">命令</th>
</tr>
</thead>
<tbody><tr>
<td align="left">数字范围</td>
<td align="left">0-59</td>
<td align="left">0-23</td>
<td align="left">1-31</td>
<td align="left">1-12</td>
<td align="left">0-7</td>
<td align="left">呀就命令啊</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">crontab -u &#123;username&#125; -e  <span class="comment">#不加-u参数默认为当前用户创建定时任务</span></span><br></pre></td></tr></table></figure>

<p><strong>输入命令后会显示编辑一个文件，直接在下面添加参数，username可以不加，则默认给当前用户添加定时任务</strong></p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">*    *    *    *    * &#123;username&#125; 命令/要执行shell脚本的路径</span><br><span class="line">-    -    -    -    -</span><br><span class="line">|    |    |    |    |</span><br><span class="line">|    |    |    |    +----- 星期中星期几 (0 - 6) (星期天 为0)</span><br><span class="line">|    |    |    +---------- 月份 (1 - 12) </span><br><span class="line">|    |    +--------------- 一个月中的第几天 (1 - 31)</span><br><span class="line">|    +-------------------- 小时 (0 - 23)</span><br><span class="line">+------------------------- 分钟 (0 - 59)</span><br></pre></td></tr></table></figure>
</blockquote>
<p><strong>修改定时任务crontab -e的时候，控制台输出“crontab: installing new crontab”，表示任务添加成功，且之后三分钟不会执行对应的任务，所以在调试定时器的时候，要把这三分钟考虑进去，如果执行的时间在三分钟内的话，对应的任务则不会生效。</strong></p>
<h3 id="定时执行命令"><a href="#定时执行命令" class="headerlink" title="定时执行命令"></a>定时执行命令</h3><p>例如安装的Tomcat服务器需要每次开机后都要重启一次</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在crontab -e命令后添加的参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#系统重启后执行重启</span></span><br><span class="line">@reboot systemctl restart tomcat</span><br><span class="line"><span class="comment"># @reboot [nohup] systemctl restart tomcat</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>nohup 是用来让运行的程序忽略 SIGHUP 指令（因为在父程序退出后，所有的子程序会受到 SIGHUP 指令）从而保证运行的程序不退出, 根据实际情况决定是否使用该参数(本人实际操作过程中,加入该参数时无法成功执行任务,请自测)<br>@reboot 只针对可登录服务器的用户生效, 如果使用不可登录服务器的用户执行该类型crontab任务,将会遭到忽略,执行失败</p>
</blockquote>
<p>定时关机</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#每天 23:00 关机</span></span><br><span class="line">* 23 * * * root /sbin/shutdown -h now</span><br><span class="line"><span class="comment">#每天 23:00 十分钟后关机</span></span><br><span class="line">* 23 * * * root /sbin/shutdown -h at 23:10</span><br></pre></td></tr></table></figure>



<p><strong>因为直接crontab来执行命令，可能有些命令太复杂或者太长可能会执行失败，这时候就会用到shell脚本</strong></p>
<h3 id="定时执行shell脚本"><a href="#定时执行shell脚本" class="headerlink" title="定时执行shell脚本"></a>定时执行shell脚本</h3><table>
<thead>
<tr>
<th align="center">执行时间</th>
<th>格式</th>
</tr>
</thead>
<tbody><tr>
<td align="center">每分钟定时执行一次</td>
<td>* * * * *</td>
</tr>
<tr>
<td align="center">每小时定时执行一次</td>
<td>0 * * * *</td>
</tr>
<tr>
<td align="center">每天定时执行一次</td>
<td>0 0 * * *</td>
</tr>
<tr>
<td align="center">每周定时执行一次</td>
<td>0 0 * * 0</td>
</tr>
<tr>
<td align="center">每月定时执行一次</td>
<td>0 0 1 * *</td>
</tr>
<tr>
<td align="center">每月最后一天定时执行一次</td>
<td>0 0 L * *</td>
</tr>
<tr>
<td align="center">每年定时执行一次</td>
<td>0 0 1 1 *</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在crontab -e命令后添加的参数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#每天 02:00 执行任务</span></span><br><span class="line">0 2 * * * /bin/sh backup.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#每天 5:00和17:00执行任务</span></span><br><span class="line">0 5,17 * * * /scripts/script.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#每分钟执行一次任务</span></span><br><span class="line">* * * * * /scripts/script.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#每周日 17:00 执行任务</span></span><br><span class="line">0 17 * * 7  /scripts/script.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#每 10min 执行一次任务</span></span><br><span class="line">*/10 * * * * /scripts/monitor.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#在每周五、周日的17点执行任务</span></span><br><span class="line">0 17 * * sun,fri /script/scripy.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#每四个小时执行一个任务</span></span><br><span class="line">0 */4 * * * /scripts/script.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#每周一、周日的4:00和17:00执行任务</span></span><br><span class="line">0 4,17 * * sun,mon /scripts/script.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>比较有趣的是那个『周』喔！周的数字为0或7时，都代表『星期天』的意思！另外， 还有一些辅助的字符，大概有底下这些：</p>
<table>
<thead>
<tr>
<th align="left">特殊字符</th>
<th align="left">代表意义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">*(星号)</td>
<td align="left">代表任何时刻都接受的意思！举例来说，范例一内那个日、月、周都是 * ， 就代表著『不论何月、何日的礼拜几的 12:00 都运行后续命令』的意思！</td>
</tr>
<tr>
<td align="left">,(逗号)</td>
<td align="left">代表分隔时段的意思。举例来说，如果要下达的工作是 3:00 与 6:00 时，就会是： 0 3,6 * * * command 时间参数还是有五栏，不过第二栏是 3,6 ，代表 3 与 6 都适用！</td>
</tr>
<tr>
<td align="left">-(减号)</td>
<td align="left">代表一段时间范围内，举例来说， 8 点到 12 点之间的每小时的 20 分都进行一项工作： 20 8-12 * * * command 仔细看到第二栏变成 8-12 喔！代表 8,9,10,11,12 都适用的意思！</td>
</tr>
<tr>
<td align="left">/n(斜线)</td>
<td align="left">那个 n 代表数字，亦即是『每隔 n 单位间隔』的意思，例如每五分钟进行一次，则： */5 * * * * command 很简单吧！用 * 与 /5 来搭配，也可以写成 0-59/5 ，相同意思！</td>
</tr>
</tbody></table>
<p>周与日月不可同时并存</p>
<p>另一个需要注意的地方在於：『你可以分别以周或者是日月为单位作为循环，但你不可使用「几月几号且为星期几」的模式工作』。 这个意思是说，你不可以这样编写一个工作排程：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">30 12 11 9 5 root <span class="built_in">echo</span> <span class="string">&quot;just test&quot;</span>  &lt;==这是错误的写法</span><br></pre></td></tr></table></figure>

<p>本来你以为九月十一号且为星期五才会进行这项工作，无奈的是，系统可能会判定每个星期五作一次，或每年的 9 月 11 号分别进行，如此一来与你当初的规划就不一样了～所以罗，得要注意这个地方！上述的写法是不对的！</p>
<h3 id="使crontab任务生效"><a href="#使crontab任务生效" class="headerlink" title="使crontab任务生效"></a>使crontab任务生效</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看crontab任务</span></span><br><span class="line">crontab -l</span><br><span class="line"></span><br><span class="line"><span class="comment">#加载配置文件</span></span><br><span class="line">/etc/init.d/cron reload</span><br></pre></td></tr></table></figure>

<blockquote>
<p>centos的定时任务service是crond</p>
</blockquote>
<h3 id="脚本无法执行问题"><a href="#脚本无法执行问题" class="headerlink" title="脚本无法执行问题"></a>脚本无法执行问题</h3><p>如果我们使用 crontab 来定时执行脚本，无法执行，但是如果直接通过命令（如：./test.sh)又可以正常执行，这主要是因为无法读取环境变量的原因。</p>
<p><strong>解决方法：</strong></p>
<ul>
<li><p>1、所有命令需要写成绝对路径形式，如: /usr/local/bin/docker。</p>
</li>
<li><p>2、在 shell 脚本开头使用以下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">. /etc/profile</span><br><span class="line">. ~/.bashrc</span><br></pre></td></tr></table></figure></li>
<li><p>3、在 <strong>/etc/crontab</strong> 中添加环境变量，在可执行命令之前添加命令  . /etc/profile;/bin/sh，使得环境变量生效，例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">20 03 * * * . /etc/profile;/bin/sh /var/www/runoob/test.sh</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>命令</tag>
      </tags>
  </entry>
  <entry>
    <title>docker之openwrt</title>
    <url>/2023/05/08/docker%E4%B9%8Bopenwrt/</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><strong>如何用docker部署openwrt（本人一般用于挂代理）</strong></p>
<h3 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h3><p><strong>打开<a href="https://hub.docker.com/">dockerhub</a></strong></p>
<blockquote>
<p>无账号的可以注册一个</p>
</blockquote>
<p><img src="/2023/05/08/docker%E4%B9%8Bopenwrt/image-20230508004922422.png" alt="image-20230508004922422"></p>
<p><strong>点击第二个，复制右边的命令，回到操作系统里粘贴</strong></p>
<p><img src="/2023/05/08/docker%E4%B9%8Bopenwrt/image-20230509195820116.png" alt="image-20230509195820116"></p>
<blockquote>
<p>找到适合自己架构拉取镜像即可，我的是aarch64，所以拉取tag为armv8的</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull sulinggg/openwrt:armv8</span><br></pre></td></tr></table></figure>



<h3 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>

<h3 id="打开网卡混杂模式"><a href="#打开网卡混杂模式" class="headerlink" title="打开网卡混杂模式"></a>打开网卡混杂模式</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ip <span class="built_in">link</span> <span class="built_in">set</span> eth0 promisc on </span><br></pre></td></tr></table></figure>

<h3 id="创建网络"><a href="#创建网络" class="headerlink" title="创建网络"></a>创建网络</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker network create -d macvlan --subnet=192.168.1.0/24 --gateway=192.168.1.254 -o parent=eth0 macnet</span><br></pre></td></tr></table></figure>

<blockquote>
<p>须结合实际网络情况，不能照抄命令</p>
<p>–subnet=192.168.1.0/24  #eth0网卡正所处在192.168.1.x网段</p>
<p>–gateway=192.168.1.254    #eth0网卡的网关（即路由器ip）</p>
<p>parent=eth0              #这个是物理网卡名字</p>
<p>macvlan                  #这是创建的一个驱动程序管理网络（已经创建了192.168.254这个网络段给它）</p>
<p>macnet                   #macnet创建的网络名字</p>
</blockquote>
<h3 id="查看创建的macnet网络"><a href="#查看创建的macnet网络" class="headerlink" title="查看创建的macnet网络"></a>查看创建的macnet网络</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker network <span class="built_in">ls</span></span><br></pre></td></tr></table></figure>

<h3 id="创建并启动容器"><a href="#创建并启动容器" class="headerlink" title="创建并启动容器"></a>创建并启动容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --restart always --name openwrt -d --network macnet --privileged sulinggg/openwrt:armv8 /sbin/init</span><br></pre></td></tr></table></figure>

<h3 id="进入容器并修改相关参数"><a href="#进入容器并修改相关参数" class="headerlink" title="进入容器并修改相关参数"></a>进入容器并修改相关参数</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it openwrt bash</span><br></pre></td></tr></table></figure>

<p><strong>执行此命令后我们便进入 OpenWrt 的命令行界面，首先，我们需要编辑 OpenWrt 的网络配置文件：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/config/network</span><br></pre></td></tr></table></figure>

<p><strong>我们需要更改 Lan 口设置：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">config interface <span class="string">&#x27;lan&#x27;</span></span><br><span class="line">        option <span class="built_in">type</span> <span class="string">&#x27;bridge&#x27;</span></span><br><span class="line">        option ifname <span class="string">&#x27;eth0&#x27;</span></span><br><span class="line">        option proto <span class="string">&#x27;static&#x27;</span></span><br><span class="line">        option netmask <span class="string">&#x27;255.255.255.0&#x27;</span></span><br><span class="line">        option ip6assign <span class="string">&#x27;60&#x27;</span></span><br><span class="line">        option ipaddr <span class="string">&#x27;192.168.1.100&#x27;</span>    <span class="comment">#自己设置一个ip，这个ip是你即将要访问的openwrt控制面板,假如本机IP也处于192.168.1.0/24网段，设置的IP不要和本机IP重合</span></span><br><span class="line">        option gateway <span class="string">&#x27;192.168.1.254&#x27;</span>   <span class="comment">#设置网关</span></span><br><span class="line">        option broadcast <span class="string">&#x27;192.168.1.255&#x27;</span></span><br><span class="line">        option dns <span class="string">&#x27;8.8.8.8&#x27;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>所有的 <code>192.168.1.x</code> 需要根据eth0网卡所处网段修改，<code>option gateway</code>填写eth0的网关。</strong></p>
<p><strong><code>option ipaddr </code>项目定义了 OpenWrt 的 IP 地址，在完成网段设置后，IP最后一段可根据自己的爱好修改（前提是符合规则且不和现有已分配 IP 冲突）。</strong></p>
</blockquote>
<h3 id="重启网络"><a href="#重启网络" class="headerlink" title="重启网络"></a><strong>重启网络</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/init.d/network restart</span><br></pre></td></tr></table></figure>

<p><strong>输入完成这段命令之后，按住键盘的<code>ctrl+p+q</code>就能退出<code>openwrt</code>容器的命令行界面。</strong></p>
<h3 id="管理页面"><a href="#管理页面" class="headerlink" title="管理页面"></a>管理页面</h3><p><strong>进入控制面板</strong></p>
<p><strong>在浏览器中输入<code>option ipaddr </code>项目中的 IP 进入 Luci 控制面板，若<code>option ipaddr </code>的参数为 <code>192.168.1.100</code>，则可以在浏览器输入 <code>http://192.168.1.100</code>进入控制面板。</strong></p>
<p><strong>用户名：<code>root</code></strong></p>
<p><strong>密码：<code>password</code></strong></p>
<p><img src="/2023/05/08/docker%E4%B9%8Bopenwrt/image-20230509200127717.png" alt="image-20230509200127717"></p>
<p><strong>登进去后建议修改账号密码，不然别人直接不用密码能ssh连接你这个容器</strong></p>
]]></content>
      <categories>
        <category>orangepi</category>
      </categories>
      <tags>
        <tag>arm64</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>ztncui私有化zerotier来创建moon</title>
    <url>/2023/05/04/ztncui%E7%A7%81%E6%9C%89%E5%8C%96zerotier%E6%9D%A5%E5%88%9B%E5%BB%BAmoon/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>zerotier one是众多内网穿透工具平衡性最好的。方便速度快部署简单的比他贵的多，速度比他快比他便宜的部署麻烦，比他便宜部署容易的使用体验又不好。</strong></p>
<p><strong>不过zerotier one的虚拟网络是由官方控制器控制的，虚拟内网被别人控制总感觉不会不舒服。好在zerotier是开源的，因此zerotier有脱离官方控制器的第三方控制器</strong></p>
<p><strong>ztncui是zerotier one众多开源第三方控制器中的一个，之所以选它是因为它是唯一一个拥有图形界面的。通过配置客户端的planet就可以跳过官方节点，使用ztncui完成各个节点之间的通讯和打洞。</strong></p>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul>
<li><strong>官方的节点通道(Planet服务器)是在国外，一般延迟都在四五百ms左右，使用ztncui搭建的zerotier one不走官方节点的通道，走的是用自己公网服务器搭建的节点通道，延迟较低</strong></li>
<li><strong>官方编译的Zerotier搭建的moon服务器不能在Android设备上使用，而私有化搭建的moon服务器则能在Android端(需要配合Zerotier FIX来)使用</strong></li>
<li><strong>相比于用FRP部署的内网穿透，zerotier使用简单，且不像FRP让服务器在公网被来回扫，安全性较高。</strong></li>
</ul>
<blockquote>
<p><strong>FRP部署内网穿透—-&gt;可看这篇文章<a href="https://aienh.github.io/post/%E8%87%AA%E5%BB%BA%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E6%9C%8D%E5%8A%A1%E5%99%A8">《自建内网穿透服务器》</a></strong></p>
</blockquote>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p><strong>Zerotier不支持以域名方式和控制器通讯，所以你需要准备一个具有固定公网ip的云服务器，最好同时具备固定ipv6。</strong></p>
<p><strong>对于android设备，需要使用kaaass大神的Zerotier FIX才可以使用自定义控制器和自定义moon服务器，IOS设备无解。</strong></p>
<p><strong><a href="https://github.com/kaaass/ZerotierFix/releases">Zerotier FIX项目地址</a></strong></p>
<h2 id="云服务器"><a href="#云服务器" class="headerlink" title="云服务器"></a>云服务器</h2><p><strong>我这里用的阿里云领的7个月ECS，系统是debian11，，带宽是1Mbps（到后面用搭建的moon，Android端用数据延迟能到一百左右，理论上带宽比我这个大的延迟会更低），没有申请SSL证书</strong></p>
<p><strong>Debian默认ssh不能root连接，首先在你买服务器的官网的控制台用他们自带的远程连接先连进去，编辑ssh配置文件vim /etc/ssh/sshd_config 添加一个参数：PermitRootLogin yes，这样ssh就能用root连接了</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;PermitRootLogin yes &quot;</span> &gt;&gt; /etc/ssh/sshd_config</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;PasswordAuthentication yes &quot;</span> &gt;&gt; /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>



<h3 id="配置安全组（无SSL证书）"><a href="#配置安全组（无SSL证书）" class="headerlink" title="配置安全组（无SSL证书）"></a>配置安全组（无SSL证书）</h3><p><img src="/2023/05/04/ztncui%E7%A7%81%E6%9C%89%E5%8C%96zerotier%E6%9D%A5%E5%88%9B%E5%BB%BAmoon/image-20230505000328395.png" alt="image-20230505000328395"></p>
<h3 id="配置安全组（有SSL证书）"><a href="#配置安全组（有SSL证书）" class="headerlink" title="配置安全组（有SSL证书）"></a>配置安全组（有SSL证书）</h3><p><img src="/2023/05/04/ztncui%E7%A7%81%E6%9C%89%E5%8C%96zerotier%E6%9D%A5%E5%88%9B%E5%BB%BAmoon/image-20230505000753998.png" alt="image-20230505000753998"></p>
<blockquote>
<p>3000端口和3443端口为ztncui Web控制面板使用的端口</p>
<p>3000是http的，3443是https的</p>
<p>TCP:9993端口为Zerotier节点与控制器通讯的端口</p>
<p>UDP:9993端口为MOON节点与控制器通讯的中继端口</p>
<p>端口可自行选择，根据自己选择的端口配置安全组</p>
</blockquote>
<h2 id="Server端"><a href="#Server端" class="headerlink" title="Server端"></a>Server端</h2><h3 id="Zerotier安装"><a href="#Zerotier安装" class="headerlink" title="Zerotier安装"></a>Zerotier安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#ztncui依赖于zerotier，所以需要先安装zerotier</span></span><br><span class="line">root@Debian:~<span class="comment"># curl -s https://install.zerotier.com | sudo bash</span></span><br></pre></td></tr></table></figure>

<h3 id="ztncui安装"><a href="#ztncui安装" class="headerlink" title="ztncui安装"></a>ztncui安装</h3><p><strong>centos redhat系列下载， root权限执行</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@centos:~<span class="comment"># wget https://gitee.com/opopop880/zerotier_planet/raw/master/zertotier_planet.sh &amp;&amp; chmod +x zertotier_planet.sh &amp;&amp; ./zertotier_planet.sh</span></span><br></pre></td></tr></table></figure>

<p><strong>debain ubuntu 系列下载 root权限执行</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@Debian:~<span class="comment"># wget https://gitee.com/opopop880/zerotier_planet/raw/master/zerotier_planet_debain.sh &amp;&amp; chmod +x zerotier_planet_debain.sh &amp;&amp; ./zerotier_planet_debain.sh</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>我执行完 ./zerotier_planet_debain.sh这个脚本后，编译安装时会失败，缺少依赖库”fatal error: nlohmann/json.hpp : No such file or directory”<br> #include “nlohmann/json.hpp</p>
<p>安装依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@Debian:~<span class="comment"># apt-get install nlohmann-json3-dev</span></span><br></pre></td></tr></table></figure>

<p>在执行一次脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@Debian:~<span class="comment"># ./zerotier_planet_debain.sh</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="配置moon服务器"><a href="#配置moon服务器" class="headerlink" title="配置moon服务器"></a>配置moon服务器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#进入zerotier one文件夹</span></span><br><span class="line">root@Debian:~<span class="comment"># cd /var/lib/zerotier-one</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#生成moon.json文件</span></span><br><span class="line">root@Debian:/var/lib/zerotier-one<span class="comment"># zerotier-idtool initmoon identity.public &gt;&gt; moon.json</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#编辑moon.json文件</span></span><br><span class="line">root@Debian:/var/lib/zerotier-one<span class="comment"># vim moon.json</span></span><br><span class="line"><span class="comment">#修改里面的stableEndpoints参数,修改完后保存退出</span></span><br><span class="line"><span class="string">&quot;stableEndpoints&quot;</span>: [<span class="string">&quot;你的公网IP/9993&quot;</span> ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成客户端用的moon配置文件</span></span><br><span class="line">root@Debian:/var/lib/zerotier-one<span class="comment"># zerotier-idtool genmoon moon.json</span></span><br><span class="line">wrote 00000016089ddab3.moon (signed world with timestamp 1683210080062)</span><br><span class="line"></span><br><span class="line"><span class="comment">#在/var/lib/zerotier-one目录下,手动新建一个moons.d文件夹，并把刚生成的moon配置文件放到该文件夹下</span></span><br><span class="line">root@Debian:/var/lib/zerotier-one<span class="comment"># mkdir moons.d &amp;&amp; mv 00000016089ddab3.moon moons.d/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#刚刚是在/root的目录下安装的ztncui，把moon.json文件拷贝到/root目录下，这个文件在配置ztncui时有用</span></span><br><span class="line">root@Debian:/var/lib/zerotier-one<span class="comment"># cp moon.json /root</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="配置ztncui"><a href="#配置ztncui" class="headerlink" title="配置ztncui"></a>配置ztncui</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看ZT_TOKEN值并复制</span></span><br><span class="line">root@Debian:~<span class="comment"># cat /var/lib/zerotier-one/authtoken.secret</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#检查ztncui的配置文件,看到ZT_TOKEN=的值是否和上面的一样，不一样则替换成上面复制的值（一般都一样）</span></span><br><span class="line">root@Debian:~<span class="comment"># vim /opt/key-networks/ztncui/.env</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#下载mkmoonworld主程序（自己解决github代理）</span></span><br><span class="line">root@Debian:~<span class="comment"># wget https://github.com/kaaass/ZeroTierOne/releases/download/mkmoonworld-1.0/mkmoonworld-x86</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#赋予执行权限</span></span><br><span class="line">root@Debian:~<span class="comment"># ls</span></span><br><span class="line">root@Debian:~<span class="comment"># chmod 777 mkmoonworld-x86</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成planet文件（即world.bin文件）</span></span><br><span class="line">root@Debian:~<span class="comment"># ./mkmoonworld-x86 ./moon.json</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 若要设置多个planet节点，将其他节点的moon.json 写入到另外的文件，如 moon1.json moon2.json</span></span><br><span class="line">root@Debian:~<span class="comment"># ./mkmoonworld-x86 ./moon1.json ./moon2.json</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>！！！注意！！！，要配置Android端的Zerotier，需要用到world.bin文件，所以要先备份一份，一起把world.bin文件和000000XXXXX.moon打包文件发到桌面</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 令planet文件生效</span></span><br><span class="line">root@Debian:~<span class="comment"># mv world.bin planet &amp;&amp; systemctl restart zerotier-one</span></span><br></pre></td></tr></table></figure>

<p><strong>重启完zerotier-one服务moon服务器就已经生效了</strong></p>
<h3 id="备份moon文件"><a href="#备份moon文件" class="headerlink" title="备份moon文件"></a>备份moon文件</h3><p><strong>将生成的000000XXXXX.moon文件打包，留着准备发给各个zerotier one客户端</strong></p>
<blockquote>
<p>这里我用windows上的xshell连的服务器，上传和下载文件可能比较麻烦，用finalshell和filezilla传文件方便（我有，但不习惯用，还是习惯用xshell）</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@Debian:~<span class="comment"># apt install lrzsz -y</span></span><br><span class="line"></span><br><span class="line">root@Debian:~<span class="comment"># cd /var/lib/zerotier-one</span></span><br><span class="line"></span><br><span class="line">root@Debian:/var/lib/zerotier-one<span class="comment"># tar -zcvf moons.d.tat.gz moons.d/</span></span><br><span class="line"></span><br><span class="line">root@Debian:/var/lib/zerotier-one<span class="comment"># sz  moons.d.tar.gz</span></span><br><span class="line"><span class="comment">#然后选择桌面（弹出来的框路径随便你选）</span></span><br></pre></td></tr></table></figure>



<h3 id="ztncui管理界面配置"><a href="#ztncui管理界面配置" class="headerlink" title="ztncui管理界面配置"></a>ztncui管理界面配置</h3><p><strong>访问http://你的公网IP:3000</strong></p>
<p><strong>登录用户名：<code>admin</code></strong> </p>
<p><strong>默认密码： <code>password</code></strong></p>
<p><strong>添加网络</strong></p>
<p><img src="/2023/05/04/ztncui%E7%A7%81%E6%9C%89%E5%8C%96zerotier%E6%9D%A5%E5%88%9B%E5%BB%BAmoon/image-20230505011824909.png" alt="image-20230505011824909"></p>
<p><strong>配置网络</strong></p>
<p><img src="/2023/05/04/ztncui%E7%A7%81%E6%9C%89%E5%8C%96zerotier%E6%9D%A5%E5%88%9B%E5%BB%BAmoon/image-20230505012139481.png" alt="image-20230505012139481"></p>
<p><img src="/2023/05/04/ztncui%E7%A7%81%E6%9C%89%E5%8C%96zerotier%E6%9D%A5%E5%88%9B%E5%BB%BAmoon/image-20230505012503870.png" alt="image-20230505012503870"></p>
<h2 id="Client端"><a href="#Client端" class="headerlink" title="Client端"></a>Client端</h2><h3 id="Linux的client端"><a href="#Linux的client端" class="headerlink" title="Linux的client端"></a>Linux的client端</h3><h4 id="同样安装Zerotier"><a href="#同样安装Zerotier" class="headerlink" title="同样安装Zerotier"></a>同样安装Zerotier</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@orangepi5:~<span class="comment"># curl -s https://install.zerotier.com | sudo bash</span></span><br></pre></td></tr></table></figure>



<h4 id="将打包好的moon服务器放进Zerotier目录下"><a href="#将打包好的moon服务器放进Zerotier目录下" class="headerlink" title="将打包好的moon服务器放进Zerotier目录下"></a>将打包好的moon服务器放进Zerotier目录下</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@orangepi5:~<span class="comment"># cd /var/lib/zerotier-one</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#选择之前下载到桌面的moons.d.tat.gz</span></span><br><span class="line">root@orangepi5:/var/lib/zerotier-one<span class="comment"># rz</span></span><br><span class="line"></span><br><span class="line">root@orangepi5:/var/lib/zerotier-one<span class="comment"># tar -xf moons.d.tat.gz &amp;&amp; rm -rf moons.d.tat.gz</span></span><br></pre></td></tr></table></figure>



<h4 id="配置完moon服务器后重启Zerotier"><a href="#配置完moon服务器后重启Zerotier" class="headerlink" title="配置完moon服务器后重启Zerotier"></a>配置完moon服务器后重启Zerotier</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@orangepi5:~<span class="comment"># systemctl restart zerotier-one</span></span><br></pre></td></tr></table></figure>



<h4 id="加入网络"><a href="#加入网络" class="headerlink" title="加入网络"></a>加入网络</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#加入在ztncui上的网络</span></span><br><span class="line">root@orangepi5:~<span class="comment"># zerotier-cli join  #Network ID</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#离开网络的命令是</span></span><br><span class="line">zerotier-cli leave  <span class="comment">#Network ID</span></span><br></pre></td></tr></table></figure>



<h4 id="在ztncui管理界面允许加入"><a href="#在ztncui管理界面允许加入" class="headerlink" title="在ztncui管理界面允许加入"></a>在ztncui管理界面允许加入</h4><p><img src="/2023/05/04/ztncui%E7%A7%81%E6%9C%89%E5%8C%96zerotier%E6%9D%A5%E5%88%9B%E5%BB%BAmoon/image-20230505015057633.png" alt="image-20230505015057633"></p>
<h4 id="列出网络"><a href="#列出网络" class="headerlink" title="列出网络"></a>列出网络</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@orangepi5:~<span class="comment"># zerotier-cli listnetworks</span></span><br></pre></td></tr></table></figure>

<h4 id="查看moon服务器"><a href="#查看moon服务器" class="headerlink" title="查看moon服务器"></a>查看moon服务器</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@orangepi5:~<span class="comment"># zerotier-cli listpeers</span></span><br></pre></td></tr></table></figure>

<p><strong>列出的moon节点出现自己配置的公网IP则moon服务器已配置成功</strong></p>
<h3 id="Android的client端"><a href="#Android的client端" class="headerlink" title="Android的client端"></a>Android的client端</h3><p><strong>先安装<a href="https://github.com/kaaass/ZerotierFix/releases">Zerotier FIX</a>，然后打开Zerotier FIX，点+号先加入Network ID</strong></p>
<p><strong>将服务器上的world.bin和000000XXXXX.moon文件下载到本地，将world.bin更名为palnet。然后上传到手机</strong></p>
<p><strong>第一步，安装好Zerotier FIX，打开软件——右上角——设置——启动自定义planet——选择从文件导入——选择刚才的palnet文件。提示导入成功既切换planet成功。</strong></p>
<p><strong>第二步，加入moon服务器，打开软件——右上角——入轨——右下角加号——从文件导入——选择刚才的moon文件。提示成功，会在入轨界面看到moon服务的id。</strong></p>
<p><img src="/2023/05/04/ztncui%E7%A7%81%E6%9C%89%E5%8C%96zerotier%E6%9D%A5%E5%88%9B%E5%BB%BAmoon/image-20230505015941496.png" alt="image-20230505015941496"></p>
<p><strong>只有完成上面这两步，才能在ztncui管理的网络界面点刷新看到手机的ID，然后在ztncui上授权加入</strong></p>
<h3 id="Windows的client端"><a href="#Windows的client端" class="headerlink" title="Windows的client端"></a>Windows的client端</h3><p><a href="https://www.zerotier.com/download/"><strong>ZeroTier官网</strong></a>下载windows的ZeroTier One客户端</p>
<blockquote>
<p>下载的zerotier是msi文件，默认会安装到C盘，安装完后会自动运行，在任务栏里会看到zerotier的UI界面，可以把它关掉退出</p>
</blockquote>
<p>安装完后在我的电脑打开<code>C盘</code>，点击<code>查看</code>，把<code>隐藏的项目</code>打勾</p>
<p><img src="/2023/05/04/ztncui%E7%A7%81%E6%9C%89%E5%8C%96zerotier%E6%9D%A5%E5%88%9B%E5%BB%BAmoon/image-20230520200642469.png" alt="image-20230520200642469"></p>
<p>打开路径<code>C:\ProgramData\ZeroTier\One</code>，直接把之前备份的<code>moons.d</code>整个目录复制一份进去(目录里面有个000000XXXXX.moon文件)</p>
<p>在任务栏的搜索框输入<code>cmd</code>，会搜索到<code>命令提示符</code>，鼠标右键以管理员身份运行</p>
<p>弹出的命令框输入下面的命令进入ZeroTier的目录</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">CD</span> C:\ProgramData\ZeroTier\One\</span><br></pre></td></tr></table></figure>

<p>查看命令帮助</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">zerotier<span class="literal">-one_x64</span>.exe <span class="literal">-h</span></span><br></pre></td></tr></table></figure>

<p>可以看到加了<code>-q</code>参数就可以跟linux端一样操作了</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ZeroTier One version <span class="number">1.10</span>.<span class="number">6</span></span><br><span class="line">Copyright (c) <span class="number">2020</span> ZeroTier, Inc.</span><br><span class="line">Licensed under the ZeroTier BSL <span class="number">1.1</span> (see LICENSE.txt)</span><br><span class="line">Usage: zerotier<span class="literal">-one_x64</span>.exe [-<span class="type">switches</span>] [<span class="type">home</span> <span class="type">directory</span>]</span><br><span class="line"></span><br><span class="line">Available switches:</span><br><span class="line">  <span class="literal">-h</span>                - Display this help</span><br><span class="line">  <span class="literal">-v</span>                - Show version</span><br><span class="line">  <span class="literal">-U</span>                - Skip privilege check and <span class="keyword">do</span> not attempt to drop privileges</span><br><span class="line">  <span class="literal">-p</span>&lt;port&gt;          - Port <span class="keyword">for</span> UDP and TCP/HTTP (default: <span class="number">9993</span>, <span class="number">0</span> <span class="keyword">for</span> random)</span><br><span class="line">  <span class="literal">-C</span>                - Run from command line instead of as service (Windows)</span><br><span class="line">  <span class="literal">-I</span>                - Install Windows service (Windows)</span><br><span class="line">  <span class="literal">-R</span>                - Uninstall Windows service (Windows)</span><br><span class="line">  <span class="literal">-D</span>                - Remove all instances of Windows tap device (Windows)</span><br><span class="line">  <span class="literal">-i</span>                - Generate and manage identities (zerotier<span class="literal">-idtool</span>)</span><br><span class="line">  <span class="literal">-q</span>                - Query API (zerotier<span class="literal">-cli</span>)</span><br></pre></td></tr></table></figure>

<h4 id="加入网络-1"><a href="#加入网络-1" class="headerlink" title="加入网络"></a>加入网络</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#加入在ztncui上的网络</span></span><br><span class="line">zerotier<span class="literal">-one_x64</span>.exe <span class="literal">-q</span> join  <span class="comment">#Network ID</span></span><br></pre></td></tr></table></figure>

<h4 id="列出网络-1"><a href="#列出网络-1" class="headerlink" title="列出网络"></a>列出网络</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">zerotier<span class="literal">-one_x64</span>.exe <span class="literal">-q</span> listnetworks</span><br></pre></td></tr></table></figure>

<h3 id="重启-ZeroTier"><a href="#重启-ZeroTier" class="headerlink" title="重启 ZeroTier"></a>重启 ZeroTier</h3><p>按“WIN+R”键，打开<strong>运行</strong>窗口；2 输入”<strong>services.msc</strong>”，回车，运行的服务中找到ZeroTier one,选中点击右键，选择重新启动。</p>
<h4 id="查看moon服务器-1"><a href="#查看moon服务器-1" class="headerlink" title="查看moon服务器"></a>查看moon服务器</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">zerotier<span class="literal">-one_x64</span>.exe <span class="literal">-q</span> listpeers</span><br></pre></td></tr></table></figure>

<p><strong>列出的moon节点出现自己配置的公网IP则moon服务器已配置成功</strong></p>
<h2 id="安全问题"><a href="#安全问题" class="headerlink" title="安全问题"></a>安全问题</h2><p>进入ztncui控制面板需要通过访问公网服务器的3000端口来管理网络，所以要一直开着公网服务器的3000端口，很不安全，我们可以把节点控制器也加入到网络中，加入后就可以通过zerotier分配的IP来访问ztncui控制面板。</p>
<p>加入方法和linux client端加入网络类似</p>
<p>ssh连接到公网服务器</p>
<h3 id="加入网络-2"><a href="#加入网络-2" class="headerlink" title="加入网络"></a>加入网络</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#加入在ztncui上创建网络的ID</span></span><br><span class="line">root@orangepi5:~<span class="comment"># zerotier-cli join  #Network ID</span></span><br></pre></td></tr></table></figure>

<h3 id="授权加入网络"><a href="#授权加入网络" class="headerlink" title="授权加入网络"></a>授权加入网络</h3><p><img src="/2023/05/04/ztncui%E7%A7%81%E6%9C%89%E5%8C%96zerotier%E6%9D%A5%E5%88%9B%E5%BB%BAmoon/image-20230520204946512.png" alt="image-20230520204946512"></p>
<p><strong>授权后点刷新，网络就会给控制器分配IP了</strong></p>
<p><strong>这样配置完成后我们就可以在其它授权设备上访问<code>http://控制器IP:3000</code>来登录控制面板了，访问成功后就可以去公网服务器的安全组把放行的3000端口关掉了</strong></p>
]]></content>
      <categories>
        <category>orangepi</category>
      </categories>
      <tags>
        <tag>zerotier</tag>
        <tag>moon</tag>
        <tag>内网穿透</tag>
      </tags>
  </entry>
  <entry>
    <title>挂载多个云盘</title>
    <url>/2023/05/03/%E6%8C%82%E8%BD%BD%E5%A4%9A%E4%B8%AA%E4%BA%91%E7%9B%98/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>介绍一款能挂载多种网盘的神器AList</strong></p>
<p><strong>AList：支持多种存储的目录文件列表程序，支持 web 浏览与 webdav，后端基于<code>gin</code>，前端使用<code>react</code>。</strong></p>
<h2 id="支持的存储"><a href="#支持的存储" class="headerlink" title="支持的存储"></a>支持的存储</h2><ul>
<li> 本地存储</li>
<li> <a href="https://www.aliyundrive.com/">阿里云盘</a></li>
<li> OneDrive / Sharepoint（<a href="https://www.office.com/">国际版</a>, <a href="https://portal.partner.microsoftonline.cn/">世纪互联</a>,de,us）</li>
<li> <a href="https://cloud.189.cn/">天翼云盘</a> (个人云, 家庭云)</li>
<li> <a href="https://drive.google.com/">GoogleDrive</a></li>
<li> <a href="https://www.123pan.com/">123 云盘</a></li>
<li> <a href="https://pc.woozooo.com/">蓝奏云</a></li>
<li> <a href="https://github.com/Xhofe/alist">Alist</a></li>
<li> FTP</li>
<li> <a href="https://www.mypikpak.com/">PikPak</a></li>
<li> <a href="https://shandianpan.com/">闪电盘</a></li>
<li> <a href="https://aws.amazon.com/cn/s3/">S3</a></li>
<li> WebDav</li>
<li> Teambition（<a href="https://www.teambition.com/">中国</a>，<a href="https://us.teambition.com/">国际</a>）</li>
<li> <a href="https://www.mediatrack.cn/">分秒帧</a></li>
<li> <a href="https://yun.139.com/">和彩云</a> (个人云, 家庭云)</li>
<li> <a href="https://disk.yandex.com/">Yandex.Disk</a></li>
<li> <a href="http://pan.baidu.com/">百度网盘</a></li>
<li> <a href="https://pan.quark.cn/">夸克网盘</a></li>
<li> <a href="https://pan.xunlei.com/">迅雷云盘</a></li>
</ul>
<h2 id="系统挂载云盘"><a href="#系统挂载云盘" class="headerlink" title="系统挂载云盘"></a>系统挂载云盘</h2><p><strong><a href="https://github.com/alist-org/alist/releases/">Alist 开源项目地址</a></strong></p>
<p><strong><a href="https://www.raidrive.com/">raidrive网址</a></strong></p>
<p><strong><a href="https://potplayer.daum.net/">potplayer播放器网址</a></strong></p>
<h2 id="下载Alist"><a href="#下载Alist" class="headerlink" title="下载Alist"></a>下载Alist</h2><p><strong>有三种安装方式：一键脚本安装，手动安装，docker镜像</strong></p>
<p><strong><a href="https://alist.nn.ci/zh/guide/">Alist官方文档</a></strong></p>
<p><strong>推荐用脚本安装，方便</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#自定义路径</span></span><br><span class="line">curl -fsSL <span class="string">&quot;https://alist.nn.ci/v3.sh&quot;</span> | bash -s install /root</span><br></pre></td></tr></table></figure>

<p><img src="/2023/05/03/%E6%8C%82%E8%BD%BD%E5%A4%9A%E4%B8%AA%E4%BA%91%E7%9B%98/image-20230503223713159.png" alt="image-20230503223713159"></p>
<p><strong>启动Alist</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start alist</span><br><span class="line"><span class="comment">#设置自启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> alist</span><br></pre></td></tr></table></figure>

<h2 id="服务器放行端口"><a href="#服务器放行端口" class="headerlink" title="服务器放行端口"></a>服务器放行端口</h2><blockquote>
<p>这里我用的是自己烧录的linux系统的开发板（Debian11），需要自己放行端口，用公有云平台的朋友自行上网查找放行端口教程</p>
</blockquote>
<p><strong>查看防火墙规则</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo iptables --list</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw status</span><br></pre></td></tr></table></figure>

<p><strong>添加放行端口</strong></p>
<blockquote>
<p>可以使用 multiport 模块来指定多个端口或端口范围，例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-m参数调用multiport 模块</span></span><br><span class="line">sudo iptables -A INPUT -p tcp -m multiport --dports 22,80,443 -j ACCEPT sudo iptables -A INPUT -p udp -m multiport --dports 53,67:68 -j ACCEPT</span><br></pre></td></tr></table></figure>
</blockquote>
<p><strong>添加Alist面板5244端口</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo iptables -A INPUT -p tcp --dport 5244 -j ACCEPT &amp;&amp; sudo iptables -A INPUT -p udp --dport 5244 -j ACCEPT</span><br><span class="line"><span class="comment">#保存规则（重启后失效）</span></span><br><span class="line">iptables-save</span><br><span class="line"><span class="comment">#保存规则（重启后仍然生效）</span></span><br><span class="line">netfilter-persistent save</span><br><span class="line">netfilter-persistent reload</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw allow 5244/tcp &amp;&amp; sudo ufw allow 5244/udp</span><br></pre></td></tr></table></figure>



<h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><h3 id="阿里云盘"><a href="#阿里云盘" class="headerlink" title="阿里云盘"></a>阿里云盘</h3><p><strong>访问<a href="http://your_ip:5244/%EF%BC%8C%E8%BE%93%E5%85%A5%E5%AE%89%E8%A3%85%E5%AE%8Calist%E5%90%8E%E7%BB%99%E7%9A%84username%E5%92%8Cpassword">http://YOUR_IP:5244/，输入安装完alist后给的username和password</a></strong></p>
<blockquote>
<p>YOUR_IP  你的服务器IP</p>
</blockquote>
<p><img src="/2023/05/03/%E6%8C%82%E8%BD%BD%E5%A4%9A%E4%B8%AA%E4%BA%91%E7%9B%98/image-20230503212014697.png" alt="image-20230503212014697"></p>
<blockquote>
<p>为了方便，登录后建议改账号和密码</p>
</blockquote>
<p><strong>添加云盘</strong></p>
<p><img src="/2023/05/03/%E6%8C%82%E8%BD%BD%E5%A4%9A%E4%B8%AA%E4%BA%91%E7%9B%98/image-20230503224912663.png" alt="image-20230503224912663"></p>
<p><img src="/2023/05/03/%E6%8C%82%E8%BD%BD%E5%A4%9A%E4%B8%AA%E4%BA%91%E7%9B%98/image-20230503225414510.png" alt="image-20230503225414510"></p>
<p>要用app扫二维码来获取刷新令牌——&gt;<strong><a href="https://alist.nn.ci/tool/aliyundrive/request.html">刷新令牌获取</a></strong></p>
<h3 id="迅雷云盘"><a href="#迅雷云盘" class="headerlink" title="迅雷云盘"></a>迅雷云盘</h3><p><strong>挂载路径：/迅雷云盘</strong></p>
<p><strong>用户名和密码则是你迅雷的账户密码</strong></p>
<p><strong>直接点保存，旁边会出现警告，复制href=” “ 双引号里的网址（如果警告里的显示不全，按F5刷新在点保存，直到能看到click here就行，这样就能复制全网址了）</strong></p>
<p><img src="/2023/05/03/%E6%8C%82%E8%BD%BD%E5%A4%9A%E4%B8%AA%E4%BA%91%E7%9B%98/image-20230503232035282.png" alt="image-20230503232035282"></p>
<p><strong>用edge浏览器打开复制的网址，复制captcha_token里的值，粘贴到验证码里</strong></p>
<p><img src="/2023/05/03/%E6%8C%82%E8%BD%BD%E5%A4%9A%E4%B8%AA%E4%BA%91%E7%9B%98/image-20230503233650864.png" alt="image-20230503233650864"></p>
<p><strong>在管理页面的左边点主页就能看到你挂载的云盘了，在主页下面的点管理又能回到管理页面</strong></p>
<p><img src="/2023/05/03/%E6%8C%82%E8%BD%BD%E5%A4%9A%E4%B8%AA%E4%BA%91%E7%9B%98/image-20230503235226850.png" alt="image-20230503235226850"></p>
<h3 id="挂载到本地"><a href="#挂载到本地" class="headerlink" title="挂载到本地"></a>挂载到本地</h3><p><strong>下载RaiDrive</strong></p>
<p><img src="/2023/05/03/%E6%8C%82%E8%BD%BD%E5%A4%9A%E4%B8%AA%E4%BA%91%E7%9B%98/196048054-086b91ee-a575-4d3d-9a51-53686a00e85f.png" alt="196048054-086b91ee-a575-4d3d-9a51-53686a00e85f"></p>
<p><strong>挂载完后在本地磁盘就能看得到了</strong></p>
<h3 id="用PotPlayer播放器在线观看"><a href="#用PotPlayer播放器在线观看" class="headerlink" title="用PotPlayer播放器在线观看"></a>用PotPlayer播放器在线观看</h3><p><img src="/2023/05/03/%E6%8C%82%E8%BD%BD%E5%A4%9A%E4%B8%AA%E4%BA%91%E7%9B%98/image-20230504001622503.png" alt="image-20230504001622503"></p>
<p><img src="/2023/05/03/%E6%8C%82%E8%BD%BD%E5%A4%9A%E4%B8%AA%E4%BA%91%E7%9B%98/image-20230504001653256.png" alt="image-20230504001653256"></p>
<p><strong>效果</strong></p>
<p><img src="/2023/05/03/%E6%8C%82%E8%BD%BD%E5%A4%9A%E4%B8%AA%E4%BA%91%E7%9B%98/image-20230504001150591.png" alt="image-20230504001150591"></p>
]]></content>
      <categories>
        <category>orangepi</category>
      </categories>
      <tags>
        <tag>arm64</tag>
        <tag>随便玩玩</tag>
      </tags>
  </entry>
  <entry>
    <title>orangepi5开启热点</title>
    <url>/2023/04/28/orangepi5%E5%BC%80%E5%90%AF%E7%83%AD%E7%82%B9/</url>
    <content><![CDATA[<blockquote>
<p>我的orangepi5的系统是debian11server版</p>
</blockquote>
<h3 id="准备工作："><a href="#准备工作：" class="headerlink" title="准备工作："></a>准备工作：</h3><p>1、<strong>香橙派5开发板一块</strong>，本文基于香橙派5完成开启热点/WIFI操作，但是都是跑的Linux系统，树莓派/香橙派大差不差；<br> 2、<strong>USB网卡一张</strong>，Orangepi5本身没有wifi模块需要自己另外配usb网卡 这里我用的是官方推荐的RTL8821CU网卡；</p>
<p><img src="/2023/04/28/orangepi5%E5%BC%80%E5%90%AF%E7%83%AD%E7%82%B9/17486263331_1660295310.jpg" alt="17486263331_1660295310"></p>
<h3 id="测试网卡："><a href="#测试网卡：" class="headerlink" title="测试网卡："></a>测试网卡：</h3><blockquote>
<p>我这里直接用的root用户，不是root用户的请在命令前加<code>sudo</code></p>
</blockquote>
<p><strong><code>lsusb</code> 查看usb设备状态</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@orangepi5:~<span class="comment"># lsusb | grep &quot;Realtek&quot;</span></span><br><span class="line">Bus 007 Device 002: ID 0bda:c820 Realtek Semiconductor Corp. 802.11ac NIC</span><br></pre></td></tr></table></figure>

<blockquote>
<p>orangepi5内置rtl8821cu的模块</p>
</blockquote>
<p><strong>如果 lsusb 命令看到的 USB WIFI 模块处于 Driver CDROM Mode，请重新拔插 下 USB WIFI 模块。如果还不行，请手动执行下面的命令切换下模式：</strong></p>
<blockquote>
<p>-v 0bda和-p 1a2b两参数分别是网卡vender id和product id，即用lsusb查看得到的ID vender id:product id</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@orangepi5:~<span class="comment"># usb_modeswitch -KW -v 0bda -p 1a2b</span></span><br></pre></td></tr></table></figure>

<p><strong>通过 <code>lsmod</code> 命令可以看到下面内核模块已自动加载</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@orangepi5:~<span class="comment"># lsmod</span></span><br><span class="line">Module                  Size  Used by</span><br><span class="line">...						...	  ...</span><br><span class="line">...						...	  ...</span><br><span class="line">8821cu               1839104  0</span><br><span class="line">rtk_btusb              61440  0</span><br><span class="line">...						...	  ...</span><br><span class="line">...						...	  ...</span><br></pre></td></tr></table></figure>

<p><strong>通过 <code>dmesg</code> 命令可以看到 rtl8821cu 模块的加载信息</strong><br><strong>然后通过 <code>ifconfig -a</code> 命令查看网卡信息，一般网卡id都是wlan0，我这里显示的是wlx90de806d8e55</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@orangepi5:~<span class="comment"># ifconfig</span></span><br><span class="line"></span><br><span class="line">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 10.8.5.208  netmask 255.255.255.0  broadcast 10.8.5.255</span><br><span class="line">        inet6 fe80::642:ca7c:1de6:12df  prefixlen 64  scopeid 0x20&lt;<span class="built_in">link</span>&gt;</span><br><span class="line">        ether f6:07:0e:34:b7:c2  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 38832  bytes 39316854 (37.4 MiB)</span><br><span class="line">        RX errors 0  dropped 78  overruns 0  frame 0</span><br><span class="line">        TX packets 21791  bytes 12948030 (12.3 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line">        device interrupt 85  </span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">wlx90de806d8e55: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.1.1  netmask 255.255.255.0  broadcast 192.168.1.255</span><br><span class="line">        inet6 fe80::92de:80ff:fe6d:8e55  prefixlen 64  scopeid 0x20&lt;<span class="built_in">link</span>&gt;</span><br><span class="line">        ether 90:de:80:6d:8e:55  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 29000  bytes 14600056 (13.9 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 30524  bytes 38526285 (36.7 MiB)</span><br><span class="line">        TX errors 0  dropped 78 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>连接WIFI测试（这一步仅仅是为了测试USB是否可以正常工作 可以跳过）</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#直接nmtui</span></span><br><span class="line">root@orangepi5:~<span class="comment"># nmtui</span></span><br></pre></td></tr></table></figure>

<p>选择Activate a connection –&gt; 选择要连的WIFi –&gt; 输入密码 </p>
<p>看到要连的WIFi名前带个*号说明已经连上了</p>
<h3 id="开启网卡热点："><a href="#开启网卡热点：" class="headerlink" title="开启网卡热点："></a>开启网卡热点：</h3><p><strong>断开上一步的Wifi网络连接</strong></p>
<p>因为要开启热点 所以不能让USB网卡工作在连接wifi状态，否则会报错：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Your adapter can not be a station (i.e. be connected) and an AP at the same time</span><br></pre></td></tr></table></figure>

<p>关于linux连接/断开 wifi 方法:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@orangepi5:~<span class="comment"># orangepi-config</span></span><br></pre></td></tr></table></figure>

<p>选择Network –&gt; 选择Forget（忘记所有wifi网络）</p>
<blockquote>
<p>在orangepi-config的Network中可以安装buletooth（蓝牙）support，然后就可以在里面用BT discover查找蓝牙设备连接了    </p>
</blockquote>
<p>除了这种方法，也可以继续用<code>nmtui</code>进入连WIFi的设置中一个一个删除已经连过的WIFi</p>
<p><strong>使用create_ap脚本（linux一般自带）</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@orangepi5:~<span class="comment"># create_ap -m nat wlx90de806d8e55 eth0 orangepi orangepi</span></span><br></pre></td></tr></table></figure>

<p>开启热点，此时可以用手机或者电脑搜索到这个热点，连接即可。<br>热点名称：orangepi<br>热点密码：orangepi</p>
<blockquote>
<p><strong>No passphrase (open network):无密码（开放网络）：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">create_ap wlan0 eth0 MyAccessPoint</span><br></pre></td></tr></table></figure>



<p><strong>WPA + WPA2 passphrase:WPA + WPA2密码：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">create_ap wlan0 eth0 MyAccessPoint MyPassPhrase</span><br></pre></td></tr></table></figure>



<p><strong>AP without Internet sharing:无互联网共享的AP：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">create_ap -n wlan0 MyAccessPoint MyPassPhrase</span><br></pre></td></tr></table></figure>



<p><strong>Bridged Internet sharing:桥接Internet共享：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">create_ap -m bridge wlan0 eth0 MyAccessPoint MyPassPhrase</span><br></pre></td></tr></table></figure>



<p><strong>Bridged Internet sharing (pre-configured bridge interface):桥接互联网共享（预配置的桥接接口）：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">create_ap -m bridge wlan0 br0 MyAccessPoint MyPassPhrase</span><br></pre></td></tr></table></figure>



<p><strong>Internet sharing from the same WiFi interface:从同一个WiFi接口共享互联网：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">create_ap wlan0 wlan0 MyAccessPoint MyPassPhrase</span><br></pre></td></tr></table></figure>



<p><strong>Choose a different WiFi adapter driver选择其他WiFi适配器驱动程序</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">create_ap --driver rtl871xdrv wlan0 eth0 MyAccessPoint MyPassPhrase</span><br></pre></td></tr></table></figure>



<p><strong>No passphrase (open network) using pipe:使用管道时无密码（开放网络）：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;MyAccessPoint&quot;</span> | create_ap wlan0 eth0</span><br></pre></td></tr></table></figure>



<p><strong>WPA + WPA2 passphrase using pipe:使用管道的WPA + WPA2密码：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#&#x27;-e&#x27;后面的带上&#x27;/n&#x27;行会在遇到的地方作为新的一行</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;MyAccessPoint /nMyPassPhrase&quot;</span> | create_ap wlan0 eth0</span><br></pre></td></tr></table></figure>



<p><strong>Enable IEEE 802.11n启用IEEE 802。11n</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">create_ap --ieee80211n --ht_capab <span class="string">&#x27;[HT40+]&#x27;</span> wlan0 eth0 MyAccessPoint MyPassPhrase</span><br></pre></td></tr></table></figure>



<p><strong>Client Isolation:客户端隔离：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">create_ap --isolate-clients wlan0 eth0 MyAccessPoint MyPassPhrase</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="热点服务开机自启动："><a href="#热点服务开机自启动：" class="headerlink" title="热点服务开机自启动："></a><strong>热点服务开机自启动</strong>：</h3><p>Linux自带的create_ap找不到create_ap.conf和相应的service，需要用github提供的指令下载一遍create_ap（项目原地址：<a href="https://github.com/oblique/create_ap%EF%BC%89">https://github.com/oblique/create_ap）</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@orangepi5:~<span class="comment"># git clone https://github.com/oblique/create_ap.git</span></span><br><span class="line">root@orangepi5:~<span class="comment"># cd create_ap</span></span><br><span class="line">root@orangepi5:~<span class="comment"># make install</span></span><br></pre></td></tr></table></figure>

<p>安装完后就可以找到create_ap.conf了</p>
<p><strong>修改热点配置文件</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@orangepi5:~<span class="comment"># vim /etc/create_ap.conf</span></span><br><span class="line">CHANNEL=default</span><br><span class="line"><span class="comment">#热点的网关</span></span><br><span class="line">GATEWAY=192.168.1.1</span><br><span class="line">WPA_VERSION=2</span><br><span class="line">ETC_HOSTS=0</span><br><span class="line">DHCP_DNS=gateway</span><br><span class="line">NO_DNS=0</span><br><span class="line">NO_DNSMASQ=0</span><br><span class="line"><span class="comment">#隐藏网络</span></span><br><span class="line">HIDDEN=0</span><br><span class="line">MAC_FILTER=0</span><br><span class="line">MAC_FILTER_ACCEPT=/etc/hostapd/hostapd.accept</span><br><span class="line">ISOLATE_CLIENTS=0</span><br><span class="line"><span class="comment">#共享网络模式为NAT</span></span><br><span class="line">SHARE_METHOD=nat</span><br><span class="line"><span class="comment">#启用WIFi4</span></span><br><span class="line">IEEE80211N=1</span><br><span class="line"><span class="comment">#网卡好的也可以启用WIFi5</span></span><br><span class="line">IEEE80211AC=0</span><br><span class="line">HT_CAPAB=[HT40+]</span><br><span class="line">VHT_CAPAB=</span><br><span class="line">DRIVER=nl80211</span><br><span class="line">NO_VIRT=0</span><br><span class="line">COUNTRY=</span><br><span class="line">FREQ_BAND=2.4</span><br><span class="line">NEW_MACADDR=</span><br><span class="line">DAEMONIZE=0</span><br><span class="line">NO_HAVEGED=0</span><br><span class="line"><span class="comment">#添加修改以下信息</span></span><br><span class="line">WIFI_IFACE=wlx90de806d8e55</span><br><span class="line">INTERNET_IFACE=eth0</span><br><span class="line">SSID=orangepi</span><br><span class="line">PASSPHRASE=orangepi</span><br><span class="line">USE_PSK=0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>开机自启</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@orangepi5:~<span class="comment"># systemctl restart create_ap</span></span><br><span class="line">root@orangepi5:~<span class="comment"># systemctl enable create_ap</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>orangepi</category>
      </categories>
      <tags>
        <tag>arm64</tag>
        <tag>usb无线网卡</tag>
      </tags>
  </entry>
  <entry>
    <title>子域名收集工具</title>
    <url>/2023/04/24/%E5%AD%90%E5%9F%9F%E6%94%B6%E9%9B%86%E5%B7%A5%E5%85%B7%20/</url>
    <content><![CDATA[<blockquote>
<p><strong>本人搬运的是github上的一个开源项目</strong></p>
<p><strong>地址：<a href="https://github.com/shmilylty/OneForAll">https://github.com/shmilylty/OneForAll</a></strong></p>
</blockquote>
<h1 id="OneForAll"><a href="#OneForAll" class="headerlink" title="OneForAll"></a>OneForAll</h1><p>👊<strong>OneForAll是一款功能强大的子域收集工具</strong>  📝<a href="https://github.com/shmilylty/OneForAll/tree/master/docs/en-us/README.md">English Document</a></p>
<h2 id="上手指南"><a href="#上手指南" class="headerlink" title="上手指南"></a>上手指南</h2><p>📢 请务必花一点时间阅读此文档，有助于你快速熟悉OneForAll！</p>
<h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p>在渗透测试中信息收集的重要性不言而喻，子域收集是信息收集中必不可少且非常重要的一环，目前网上也开源了许多子域收集的工具，但是总是存在以下部分问题：</p>
<ul>
<li><strong>不够强大</strong>，子域收集的接口不够多，不能做到对批量子域自动收集，没有自动子域解析，验证，FUZZ以及信息拓展等功能。</li>
<li><strong>不够友好</strong>，固然命令行模块比较方便，但是当可选的参数很多，要实现的操作复杂，用命令行模式就有点不够友好，如果有交互良好，高可操作的前端那么使用体验就会好很多。</li>
<li><strong>缺少维护</strong>，很多工具几年没有更新过一次，issues和PR是啥，不存在的。</li>
<li><strong>效率问题</strong>，没有利用多进程，多线程以及异步协程技术，速度较慢。</li>
</ul>
<p>为了解决以上痛点，此项目应用而生，正如其名，我希望OneForAll是一款集百家之长，功能强大的全面快速子域收集终极神器🔨。</p>
<p>目前OneForAll还在开发中，肯定有不少问题和需要改进的地方，欢迎大佬们提交<a href="https://github.com/shmilylty/OneForAll/issues">Issues</a>和<a href="https://github.com/shmilylty/OneForAll/pulls">PR</a>，用着还行给个小星星✨吧，目前有一个专门用于OneForAll交流和反馈QQ群👨‍👨‍👦‍👦：:<a href="//shang.qq.com/wpa/qunwpa?idkey=125d3689b60445cdbb11e4ddff38036b7f6f2abbf4f7957df5dddba81aa90771"><strong>824414244</strong></a>（加群验证：信息收集）。</p>
<h2 id="功能特性"><a href="#功能特性" class="headerlink" title="功能特性"></a>功能特性</h2><ul>
<li><strong>收集能力强大</strong>，详细模块请阅读<a href="https://github.com/shmilylty/OneForAll/tree/master/docs/collection_modules.md">收集模块说明</a>。<ol>
<li>利用证书透明度收集子域（目前有6个模块：<code>censys_api</code>，<code>certspotter</code>，<code>crtsh</code>，<code>entrust</code>，<code>google</code>，<code>spyse_api</code>）</li>
<li>常规检查收集子域（目前有4个模块：域传送漏洞利用<code>axfr</code>，检查跨域策略文件<code>cdx</code>，检查HTTPS证书<code>cert</code>，检查内容安全策略<code>csp</code>，检查robots文件<code>robots</code>，检查sitemap文件<code>sitemap</code>，利用NSEC记录遍历DNS域<code>dnssec</code>，后续会添加NSEC3记录等模块）</li>
<li>利用网上爬虫档案收集子域（目前有2个模块：<code>archivecrawl</code>，<code>commoncrawl</code>，此模块还在调试，该模块还有待添加和完善）</li>
<li>利用DNS数据集收集子域（目前有24个模块：<code>bevigil_api</code>, <code>binaryedge_api</code>, <code>bufferover</code>, <code>cebaidu</code>, <code>chinaz</code>, <code>chinaz_api</code>, <code>circl_api</code>, <code>cloudflare</code>, <code>dnsdb_api</code>, <code>dnsdumpster</code>, <code>hackertarget</code>, <code>ip138</code>, <code>ipv4info_api</code>, <code>netcraft</code>, <code>passivedns_api</code>, <code>ptrarchive</code>, <code>qianxun</code>, <code>rapiddns</code>, <code>riddler</code>, <code>robtex</code>, <code>securitytrails_api</code>, <code>sitedossier</code>, <code>threatcrowd</code>, <code>wzpc</code>, <code>ximcx</code>）</li>
<li>利用DNS查询收集子域（目前有5个模块：通过枚举常见的SRV记录并做查询来收集子域<code>srv</code>，以及通过查询域名的DNS记录中的MX,NS,SOA,TXT记录来收集子域）</li>
<li>利用威胁情报平台数据收集子域（目前有6个模块：<code>alienvault</code>, <code>riskiq_api</code>，<code>threatbook_api</code>，<code>threatminer</code>，<code>virustotal</code>，<code>virustotal_api</code>该模块还有待添加和完善）</li>
<li>利用搜索引擎发现子域（目前有18个模块：<code>ask</code>, <code>baidu</code>, <code>bing</code>, <code>bing_api</code>, <code>duckduckgo</code>, <code>exalead</code>, <code>fofa_api</code>, <code>gitee</code>, <code>github</code>, <code>github_api</code>, <code>google</code>, <code>google_api</code>, <code>shodan_api</code>, <code>so</code>, <code>sogou</code>, <code>yahoo</code>, <code>yandex</code>, <code>zoomeye_api</code>），在搜索模块中除特殊搜索引擎，通用的搜索引擎都支持自动排除搜索，全量搜索，递归搜索。</li>
</ol>
</li>
<li><strong>支持子域爆破</strong>，该模块有常规的字典爆破，也有自定义的fuzz模式，支持批量爆破和递归爆破，自动判断泛解析并处理。</li>
<li><strong>支持子域验证</strong>，默认开启子域验证，自动解析子域DNS，自动请求子域获取title和banner，并综合判断子域存活情况。</li>
<li><strong>支持子域爬取</strong>，根据已有的子域，请求子域响应体以及响应体里的JS，从中再次发现新的子域。</li>
<li><strong>支持子域置换</strong>，根据已有的子域，使用子域替换技术再次发现新的子域。</li>
<li><strong>支持子域接管</strong>，默认开启子域接管风险检查，支持子域自动接管（目前只有Github，有待完善），支持批量检查。</li>
<li><strong>处理功能强大</strong>，发现的子域结果支持自动去除，自动DNS解析，HTTP请求探测，自动筛选出有效子域，拓展子域的Banner信息，最终支持的导出格式有<code>txt</code>, <code>csv</code>, <code>json</code>。</li>
<li><strong>速度极快</strong>，<a href="https://github.com/shmilylty/OneForAll/tree/master/collect.py">收集模块</a>使用多线程调用，<a href="https://github.com/shmilylty/OneForAll/tree/master/brute.py">爆破模块</a>使用<a href="https://github.com/blechschmidt/massdns">massdns</a>，DNS解析速度每秒可解析350000以上个域名，子域验证中DNS解析和HTTP请求使用异步多协程，多线程检查<a href="https://github.com/shmilylty/OneForAll/tree/master/takeover.py">子域接管</a>风险。</li>
<li><strong>体验良好</strong>，各模块都有进度条，异步保存各模块结果。</li>
</ul>
<h2 id="用到框架"><a href="#用到框架" class="headerlink" title="用到框架"></a>用到框架</h2><ul>
<li><a href="https://github.com/aio-libs/aiohttp">aiohttp</a> - 异步http客户端/服务器框架</li>
<li><a href="https://pypi.org/project/beautifulsoup4/">beautifulsoup4</a> - 可以轻松从HTML或XML文件中提取数据的Python库</li>
<li><a href="https://github.com/google/python-fire">fire</a> - Python Fire是一个纯粹根据任何Python对象自动生成命令行界面（CLI）的库</li>
<li><a href="https://github.com/Delgan/loguru">loguru</a> - 旨在带来愉快的日志记录Python库</li>
<li><a href="https://github.com/blechschmidt/massdns">massdns</a> - 高性能的DNS解析器</li>
<li><a href="https://github.com/kennethreitz/records">records</a> - Records是一个非常简单但功能强大的库，用于对大多数关系数据库进行最原始SQL查询。</li>
<li><a href="https://github.com/psf/requests">requests</a> - Requests 唯一的一个非转基因的 Python HTTP 库，人类可以安全享用。</li>
<li><a href="https://github.com/tqdm/tqdm">tqdm</a> - 适用于Python和CLI的快速，可扩展的进度条库</li>
</ul>
<p>感谢这些伟大优秀的Python库！</p>
<h3 id="安装要求"><a href="#安装要求" class="headerlink" title="安装要求"></a>安装要求</h3><p>OneForAll基于<a href="https://www.python.org/downloads/release/python-360/">Python 3.6.0</a>开发和测试，OneForAll需要高于Python 3.6.0的版本才能运行。<br>安装Python环境可以参考<a href="https://pythonguidecn.readthedocs.io/zh/latest/starting/installation.html#python-3">Python 3 安装指南</a>。运行以下命令检查Python和pip3版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -V</span><br><span class="line">pip3 -V</span><br></pre></td></tr></table></figure>
<p>如果你看到类似以下的输出便说明Python环境没有问题：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Python 3.6.0</span><br><span class="line">pip 19.2.2 from C:\Users\shmilylty\AppData\Roaming\Python\Python36\site-packages\pip (python 3.6)</span><br></pre></td></tr></table></figure>
<h3 id="安装步骤（git-版）"><a href="#安装步骤（git-版）" class="headerlink" title="安装步骤（git 版）"></a>安装步骤（git 版）</h3><ol>
<li><strong>下载</strong></li>
</ol>
<p>由于该项目<strong>处于开发中</strong>，会不断进行更新迭代，下载时请使用<code>git clone</code><strong>克隆</strong>最新代码仓库，也方便后续的更新，不推荐从Releases下载，因为Releases里版本更新缓慢，也不方便更新，<br>本项目已经在<a href="https://gitee.com/shmilylty/OneForAll.git">码云</a>(Gitee)镜像了一份，国内推荐使用码云进行克隆比较快：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://gitee.com/shmilylty/OneForAll.git</span><br></pre></td></tr></table></figure>
<p>或者：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/shmilylty/OneForAll.git</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>安装</strong></li>
</ol>
<p>你可以通过pip3安装OneForAll的依赖，以下为<strong>Windows系统</strong>下使用<strong>pip3</strong>安装依赖的示例：注意：如果你的Python3安装在系统Program Files目录下，如：<code>C:\Program Files\Python36</code>，那么请以管理员身份运行命令提示符cmd执行以下命令！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> OneForAll/</span><br><span class="line">python3 -m pip install -U pip setuptools wheel -i https://mirrors.aliyun.com/pypi/simple/</span><br><span class="line">pip3 install -r requirements.txt -i https://mirrors.aliyun.com/pypi/simple/</span><br><span class="line">python3 oneforall.py --<span class="built_in">help</span></span><br></pre></td></tr></table></figure>

<p>其他系统平台的请参考<a href="https://github.com/shmilylty/OneForAll/tree/master/docs/installation_dependency.md">依赖安装</a>，如果在安装依赖过程中发现编译某个依赖库失败时可以参考<a href="https://github.com/shmilylty/OneForAll/tree/master/docs/troubleshooting.md">常见问题与回答.md</a>文档中解决方法，如果依然不能解决欢迎加群反馈问题。</p>
<ol start="3">
<li><strong>更新</strong></li>
</ol>
<p>执行以下命令<strong>更新</strong>项目（可保存对<code>/config/setting.py</code>和<code>/config/api.py</code>的修改）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git stash        <span class="comment"># 暂存本地的修改</span></span><br><span class="line">git fetch --all  <span class="comment"># 拉取项目更新</span></span><br><span class="line">git pull         <span class="comment"># 下载覆盖</span></span><br><span class="line">git stash pop    <span class="comment"># 释放本地修改</span></span><br></pre></td></tr></table></figure>


<h3 id="安装步骤（docker-版）"><a href="#安装步骤（docker-版）" class="headerlink" title="安装步骤（docker 版）"></a>安装步骤（docker 版）</h3><p>首先下载并编辑配置文件，添加自己的<code>api</code>和个性化设置，并保留原始文件结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">config</span><br><span class="line">├── api.py</span><br><span class="line">├── default.py</span><br><span class="line">├── __init__.py</span><br><span class="line">├── log.py</span><br><span class="line">└── setting.py</span><br></pre></td></tr></table></figure>

<p>拉取镜像并执行，其中<code>~/.config</code>替换为你自己配置文件所在文件夹的路径</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull shmilylty/oneforall</span><br><span class="line">docker run -it --rm -v ~/results:/OneForAll/results -v ~/.config:/OneForAll/config shmilylty/oneforall --target example.com run</span><br></pre></td></tr></table></figure>
<p>参数直接加在指令末尾，结果会输出在本地目录<code>~/results</code>，如需保存到其他位置，可以自行修改</p>
<h3 id="使用演示"><a href="#使用演示" class="headerlink" title="使用演示"></a>使用演示</h3><p>如果你是通过pip3安装的依赖则使用以下命令运行示例：   </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 oneforall.py --target example.com run</span><br><span class="line">python3 oneforall.py --targets ./example.txt run</span><br></pre></td></tr></table></figure>

<p><img src="/2023/04/24/%E5%AD%90%E5%9F%9F%E6%94%B6%E9%9B%86%E5%B7%A5%E5%85%B7%20/usage_example.svg" alt="usage_example"></p>
<h3 id="结果说明"><a href="#结果说明" class="headerlink" title="结果说明"></a>结果说明</h3><p>我们以<code>python3 oneforall.py --target example.com run</code>命令为例，OneForAll在默认参数正常执行完毕会在results目录生成相应结果：</p>
<p><img src="/2023/04/24/%E5%AD%90%E5%9F%9F%E6%94%B6%E9%9B%86%E5%B7%A5%E5%85%B7%20/Result.png" alt="Result"></p>
<p><code>example.com.csv</code>是每个主域下的子域收集结果。</p>
<p><code>all_subdomain_result_1583034493.csv</code>是每次运行OneForAll收集到子域的汇总结果，包含<code>example.com.csv</code>，方便在批量收集场景中获取全部结果。</p>
<p><code>result.sqlite3</code>是存放每次运行OneForAll收集到子域的SQLite3结果数据库，其数据库结构如下图：</p>
<p><img src="/2023/04/24/%E5%AD%90%E5%9F%9F%E6%94%B6%E9%9B%86%E5%B7%A5%E5%85%B7%20/Database.png" alt="Database"></p>
<p>其中类似<code>example_com_origin_result</code>表存放每个模块最初子域收集结果。</p>
<p>其中类似<code>example_com_resolve_result</code>表存放对子域进行解析后的结果。</p>
<p>其中类似<code>example_com_last_result</code>表存放上一次子域收集结果（需要收集两次以上才会生成）。</p>
<p>其中类似<code>example_com_now_result</code>表存放现在子域收集结果，一般情况关注这张表就可以了。</p>
<p>更多信息请参阅<a href="./docs/field.md">字段解释说明</a>。</p>
<h3 id="使用帮助"><a href="#使用帮助" class="headerlink" title="使用帮助"></a>使用帮助</h3><p>命令行参数只提供了一些常用参数，更多详细的参数配置请见<a href="https://github.com/shmilylty/OneForAll/tree/master/config/setting.py">setting.py</a>，如果你认为有些参数是命令界面经常使用到的或缺少了什么参数等问题非常欢迎反馈。由于众所周知的原因，如果要使用一些被墙的收集接口请先到<a href="https://github.com/shmilylty/OneForAll/tree/master/config/setting.py">setting.py</a>配置代理，有些收集模块需要提供API（大多都是可以注册账号免费获取），如果需要使用请到<a href="https://github.com/shmilylty/OneForAll/tree/master/config/api.py">api.py</a>配置API信息，如果不使用请忽略有关报错提示。（详细模块请阅读<a href="https://github.com/shmilylty/OneForAll/tree/master/docs/collection_modules.md">收集模块说明</a>）</p>
<p>OneForAll命令行界面基于<a href="https://github.com/google/python-fire/">Fire</a>实现，有关Fire更高级使用方法请参阅<a href="https://github.com/google/python-fire/blob/master/docs/using-cli.md">使用Fire CLI</a>。</p>
<p><a href="https://github.com/shmilylty/OneForAll/tree/master/oneforall.py">oneforall.py</a>是主程序入口，oneforall.py可以调用<a href="https://github.com/shmilylty/OneForAll/tree/master/brute.py">brute.py</a>，<a href="https://github.com/shmilylty/OneForAll/tree/master/takerover.py">takerover.py</a>及<a href="https://github.com/shmilylty/OneForAll/tree/master/dbexport.py">dbexport.py</a>等模块，为了方便进行子域爆破独立出了brute.py，为了方便进行子域接管风险检查独立出了takerover.py，为了方便数据库导出独立出了dbexport.py，这些模块都可以单独运行，并且所接受参数要更丰富一点，如果要单独使用这些模块请参考<a href="https://github.com/shmilylty/OneForAll/tree/master/docs/usage_help.md">使用帮助</a></p>
<p>❗注意：当你在使用过程中遇到一些问题或者疑惑时，请先到<a href="https://github.com/shmilylty/OneForAll/issues">Issues</a>里使用搜索找找答案，还可以参阅<a href="https://github.com/shmilylty/OneForAll/tree/master/docs/troubleshooting.md">常见问题与回答</a>。</p>
<p><strong>oneforall.py使用帮助</strong></p>
<p>以下帮助信息可能不是最新的，你可以使用<code>python oneforall.py --help</code>获取最新的帮助信息。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python oneforall.py --<span class="built_in">help</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">NAME</span><br><span class="line">    oneforall.py - OneForAll帮助信息</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">    oneforall.py COMMAND | --target=TARGET &lt;flags&gt;</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">    OneForAll是一款功能强大的子域收集工具</span><br><span class="line"></span><br><span class="line">    Example:</span><br><span class="line">        python3 oneforall.py version</span><br><span class="line">        python3 oneforall.py --target example.com run</span><br><span class="line">        python3 oneforall.py --targets ./domains.txt run</span><br><span class="line">        python3 oneforall.py --target example.com --valid None run</span><br><span class="line">        python3 oneforall.py --target example.com --brute True run</span><br><span class="line">        python3 oneforall.py --target example.com --port small run</span><br><span class="line">        python3 oneforall.py --target example.com --<span class="built_in">fmt</span> csv run</span><br><span class="line">        python3 oneforall.py --target example.com --dns False run</span><br><span class="line">        python3 oneforall.py --target example.com --req False run</span><br><span class="line">        python3 oneforall.py --target example.com --takeover False run</span><br><span class="line">        python3 oneforall.py --target example.com --show True run</span><br><span class="line"></span><br><span class="line">    Note:</span><br><span class="line">        参数alive可选值True，False分别表示导出存活，全部子域结果</span><br><span class="line">        参数port可选值有<span class="string">&#x27;default&#x27;</span>, <span class="string">&#x27;small&#x27;</span>, <span class="string">&#x27;large&#x27;</span>, 详见config.py配置</span><br><span class="line">        参数<span class="built_in">fmt</span>可选格式有 <span class="string">&#x27;csv&#x27;</span>,<span class="string">&#x27;json&#x27;</span></span><br><span class="line">        参数path默认None使用OneForAll结果目录生成路径</span><br><span class="line"></span><br><span class="line">ARGUMENTS</span><br><span class="line">    TARGET</span><br><span class="line">        单个域名(二选一必需参数)</span><br><span class="line">    TARGETS</span><br><span class="line">        每行一个域名的文件路径(二选一必需参数)</span><br><span class="line"></span><br><span class="line">FLAGS</span><br><span class="line">    --brute=BRUTE</span><br><span class="line">        s</span><br><span class="line">    --dns=DNS</span><br><span class="line">        DNS解析子域(默认True)</span><br><span class="line">    --req=REQ</span><br><span class="line">        HTTP请求子域(默认True)</span><br><span class="line">    --port=PORT</span><br><span class="line">        请求验证子域的端口范围(默认只探测80端口)</span><br><span class="line">    --valid=VALID</span><br><span class="line">        只导出存活的子域结果(默认False)</span><br><span class="line">    --<span class="built_in">fmt</span>=FMT</span><br><span class="line">        结果保存格式(默认csv)</span><br><span class="line">    --path=PATH</span><br><span class="line">        结果保存路径(默认None)</span><br><span class="line">    --takeover=TAKEOVER</span><br><span class="line">        检查子域接管(默认False)</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>docker快速搭建各大漏洞靶场</title>
    <url>/2023/04/24/docker%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%90%84%E5%A4%A7%E6%BC%8F%E6%B4%9E%E9%9D%B6%E5%9C%BA/</url>
    <content><![CDATA[<blockquote>
<p><strong>本人搬运的是github上的一个开源项目</strong></p>
<p><strong>地址：<a href="https://github.com/c0ny1/vulstudy">https://github.com/c0ny1/vulstudy</a></strong></p>
</blockquote>
<h1 id="vulstudy"><a href="#vulstudy" class="headerlink" title="vulstudy"></a>vulstudy</h1><p>vulstudy是专门收集当下流行的漏洞学习平台，并将其制作成docker镜像，方便大家快速搭建环境，节省搭建时间，专注于的漏洞学习上。目前<code>vulstudy</code>包含以下漏洞学习平台：</p>
<table>
<thead>
<tr>
<th align="center">序号</th>
<th align="center">漏洞平台</th>
<th align="center">包含漏洞</th>
<th align="center">作者</th>
<th align="center">语言</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center"><a href="http://www.dvwa.co.uk/">DVWA</a></td>
<td align="center">综合</td>
<td align="center">未知</td>
<td align="center">php</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center"><a href="https://sourceforge.net/projects/bwapp/">bWAPP</a></td>
<td align="center">综合</td>
<td align="center">未知</td>
<td align="center">php</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center"><a href="https://github.com/Audi-1/sqli-labs">sqli-labs</a></td>
<td align="center">SQL注入</td>
<td align="center"><a href="https://github.com/Audi-1">Audi</a></td>
<td align="center">php</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center"><a href="http://sourceforge.net/projects/mutillidae">mutillidae</a></td>
<td align="center">综合</td>
<td align="center">OWASP</td>
<td align="center">php</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center"><a href="https://github.com/psiinon/bodgeit">BodgeIt</a></td>
<td align="center">综合</td>
<td align="center"><a href="https://github.com/psiinon/bodgeit">psiinon</a></td>
<td align="center">java</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center"><a href="https://github.com/adamdoupe/WackoPicko">WackoPicko</a></td>
<td align="center">综合</td>
<td align="center"><a href="https://github.com/adamdoupe">adamdoupe</a></td>
<td align="center">php</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center"><a href="https://github.com/WebGoat/WebGoat">WebGoat</a></td>
<td align="center">综合</td>
<td align="center">OWASP</td>
<td align="center">java</td>
</tr>
<tr>
<td align="center">8</td>
<td align="center"><a href="https://github.com/Hackademic/hackademic">Hackademic</a></td>
<td align="center">综合</td>
<td align="center"><a href="https://github.com/northdpole">northdpole</a></td>
<td align="center">php</td>
</tr>
<tr>
<td align="center">9</td>
<td align="center"><a href="https://github.com/aj00200/xssed">XSSed</a></td>
<td align="center">XSS</td>
<td align="center"><a href="https://github.com/aj00200">AJ00200</a></td>
<td align="center">php</td>
</tr>
<tr>
<td align="center">10</td>
<td align="center"><a href="https://github.com/stamparm/DSVW">DSVW</a></td>
<td align="center">综合</td>
<td align="center"><a href="https://github.com/stamparm">Miroslav Stampar</a></td>
<td align="center">python</td>
</tr>
<tr>
<td align="center">11</td>
<td align="center"><a href="https://github.com/cr0hn/vulnerable-node">vulnerable-node</a></td>
<td align="center">综合</td>
<td align="center"><a href="https://github.com/cr0hn">cr0hn</a></td>
<td align="center">NodeJS</td>
</tr>
<tr>
<td align="center">12</td>
<td align="center"><a href="https://github.com/SpiderLabs/MCIR">MCIR</a></td>
<td align="center">综合</td>
<td align="center"><a href="https://github.com/SpiderLabs">Spider Labs</a></td>
<td align="center">php</td>
</tr>
<tr>
<td align="center">13</td>
<td align="center"><a href="https://github.com/SpiderLabs/MCIR">XSS挑战之旅</a></td>
<td align="center">XSS</td>
<td align="center">未知</td>
<td align="center">php</td>
</tr>
</tbody></table>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 安装docker</span><br><span class="line">apt-get install docker.io</span><br><span class="line"># 安装docker-compose</span><br><span class="line">pip install docker-compose</span><br><span class="line"># 下载vulstudy项目 </span><br><span class="line">git clone https://github.com/c0ny1/vulstudy.git</span><br></pre></td></tr></table></figure>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>使用主要分两种：单独运行一个漏洞平台，同时运行多个漏洞平台。</p>
<h3 id="1-单独运行一个漏洞平台"><a href="#1-单独运行一个漏洞平台" class="headerlink" title="1.单独运行一个漏洞平台"></a>1.单独运行一个漏洞平台</h3><p>cd到要运行的漏洞平台下运行以下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd vulstudy/DVWA</span><br><span class="line">docker-compose up -d #启动容器</span><br><span class="line">docker-compose stop #停止容器</span><br></pre></td></tr></table></figure>

<h3 id="2-同时运行所有漏洞平台"><a href="#2-同时运行所有漏洞平台" class="headerlink" title="2.同时运行所有漏洞平台"></a>2.同时运行所有漏洞平台</h3><p>在项目根目录下运行以下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd vulstudy</span><br><span class="line">docker-compose up -d #启动容器</span><br><span class="line">docker-compose stop #停止容器</span><br></pre></td></tr></table></figure>
<p><img src="/2023/04/24/docker%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%90%84%E5%A4%A7%E6%BC%8F%E6%B4%9E%E9%9D%B6%E5%9C%BA/vulstudy.png" alt="vulstudy"></p>
<h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><p><strong>1.第一次启动bWAPP容器访问其主页会报错如下：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Connection failed: Unknown database &#x27;bWAPP&#x27;</span><br></pre></td></tr></table></figure>

<p><strong>解决：</strong> 第一次创建应事先访问/install.php来创建数据库！</p>
<p><strong>2.第一次搭建DVWA，在苹果系统下的safari浏览器下无法初始化数据库，并提示如下：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CSRF token is incorrect</span><br></pre></td></tr></table></figure>

<p><strong>解决：</strong> 使用苹果系统下的其他浏览器即可，比如Chrome。</p>
<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>该项目只是收集了当下比较流行的漏洞学习平台，若有侵权，请联系我！同时欢迎大家提交更多有意思的漏洞学习平台，让我们一起把它们放到docker上，方便更多人的工作和学习！</p>
]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>靶场</tag>
      </tags>
  </entry>
  <entry>
    <title>红/蓝队环境自动化部署工具</title>
    <url>/2023/04/24/%E7%BA%A2%E8%93%9D%E9%98%9F%E7%8E%AF%E5%A2%83%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<blockquote>
<p><strong>本人搬运的是github上的一个开源项目</strong></p>
<p><strong>地址：<a href="https://github.com/ffffffff0x/f8x">https://github.com/ffffffff0x/f8x</a></strong></p>
</blockquote>
<h1 align="center">f8x</h1>

<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>一款红/蓝队环境自动化部署工具,支持多种场景,渗透,开发,代理环境,服务可选项等</strong></p>
<p><strong>大多数场景下，在不同的云购买一些 vps 服务器用于部署红 / 蓝队设施，不能做到开箱即用，使用 f8x 可以快速部署所需要的各类服务。同时兼顾到本地 VM 虚拟机的需求，可以选择走 socket 代理进行安装部署，Proxychains-ng 也会自动安装，只需做好 Proxychains-ng 配置即可。</strong></p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p><strong>下载</strong></p>
<ul>
<li><p>通过 CF Workers 下载 [推荐]</p>
<ul>
<li>wget : <code>wget -O f8x https://f8x.io/</code></li>
<li>curl : <code>curl -o f8x https://f8x.io/</code></li>
</ul>
</li>
<li><p>github 直链</p>
<ul>
<li>wget : <code>wget -O f8x https://raw.githubusercontent.com/ffffffff0x/f8x/main/f8x</code></li>
<li>curl : <code>curl -o f8x https://raw.githubusercontent.com/ffffffff0x/f8x/main/f8x</code></li>
</ul>
</li>
</ul>
<blockquote>
<p>后续不会更新 releases,建议不要下载 releases 的旧版本 f8x</p>
</blockquote>
<p><strong>使用</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash f8x -h</span><br></pre></td></tr></table></figure>

<p>如果你希望方便点使用可以直接加到环境变量中</p>
<ul>
<li>wget : <code>wget -O f8x https://f8x.io/ &amp;&amp; mv --force f8x /usr/local/bin/f8x &amp;&amp; chmod +x /usr/local/bin/f8x</code><ul>
<li><code>f8x -h</code></li>
</ul>
</li>
<li>curl : <code>curl -o f8x https://f8x.io/ &amp;&amp; mv --force f8x /usr/local/bin/f8x &amp;&amp; chmod +x /usr/local/bin/f8x</code><ul>
<li><code>f8x -h</code></li>
</ul>
</li>
</ul>
<p><strong>系统依赖</strong></p>
<p>f8x 基本上不需要任何依赖,或者说它就是为了帮助你安装各种依赖而生的😁</p>
<p><strong>f8x-ctf</strong></p>
<p>该脚本用于部署 CTF 环境,支持 (Web、Misc、Crypto、Pwn、Iot) 分类</p>
<ul>
<li>wget : <code>wget -O f8x-ctf https://f8x.io/ctf</code><ul>
<li><code>bash f8x-ctf -help</code></li>
</ul>
</li>
<li>curl : <code>curl -o f8x-ctf https://f8x.io/ctf</code><ul>
<li><code>bash f8x-ctf -help</code></li>
</ul>
</li>
</ul>
<p><strong>f8x-dev</strong></p>
<p>该脚本用于部署中间件和数据库环境,支持 (apache、nginx、tomcat、Database、php) 分类</p>
<ul>
<li>wget : <code>wget -O f8x-dev https://f8x.io/dev</code><ul>
<li><code>bash f8x-dev -help</code></li>
</ul>
</li>
<li>curl : <code>curl -o f8x-dev https://f8x.io/dev</code><ul>
<li><code>bash f8x-dev -help</code></li>
</ul>
</li>
</ul>
<hr>
<h2 id="支持选项"><a href="#支持选项" class="headerlink" title="支持选项"></a>支持选项</h2><p>目前 f8x 支持以下部署选项 (Linux arm64 下大部分都支持)</p>
<p><strong>1. 批量化安装</strong></p>
<ul>
<li>使用 -b 选项安装基本环境 (gcc、make、git、vim、telnet、jq、unzip 等基本工具)</li>
<li>使用 -p 选项安装代理环境 (警告:国外云服务器上不要用,会降速)</li>
<li>使用 -d 选项安装开发环境 (python3、pip3、Go、Docker、Docker-Compose、SDKMAN)</li>
<li>使用 -k 选项安装渗透环境 (hashcat、ffuf、OneForAll、ksubdomain、impacket 等渗透工具)<ul>
<li>-ka 信息收集、扫描、爆破、抓取</li>
<li>-kb 漏洞利用</li>
<li>-kc 后渗透、C2</li>
<li>-kd 其他</li>
<li>-ke 功能重叠或长期不维护</li>
</ul>
</li>
<li>使用 -s 选项安装蓝队环境 (Fail2Ban、chkrootkit、rkhunter、河马webshell查杀工具)</li>
<li>使用 -f 选项安装其他工具 (Bash_Insulter、vlmcsd、AdguardTeam、trash-cli 等辅助工具)</li>
<li>使用 -cloud 选项安装云应用 (Terraform、Serverless Framework、wrangler)</li>
<li>使用 -all 选项全自动化部署 (默认不走代理,兼容 CentOS7/8,Debain10/9,Ubuntu20/18,Fedora33)</li>
</ul>
<p><strong>2. 开发环境</strong></p>
<ul>
<li>使用 -docker 选项安装 docker 环境</li>
<li>使用 -lua 选项安装 lua 环境</li>
<li>使用 -nn 选项安装 npm &amp; NodeJs 环境</li>
<li>使用 -go 选项安装 go 环境</li>
<li>使用 -oraclejdk(8/11) 选项安装 oraclejdk 环境</li>
<li>使用 -openjdk 选项安装 openjdk 环境</li>
<li>使用 -py3(7/8/9/10) 选项安装 python3 环境</li>
<li>使用 -py2 选项安装 python2 环境</li>
<li>使用 -pip2-f 选项强制安装 pip2 环境 (建议在 -python2 选项失败的情况下运行)</li>
<li>使用 -perl 选项安装 perl 环境</li>
<li>使用 -ruby 选项安装 ruby 环境</li>
<li>使用 -rust 选项安装 rust 环境</li>
<li>使用 -code 选项安装 code-server 环境</li>
<li>使用 -chromium 选项安装 Chromium 环境 (用于配合 -k 选项中的 rad、crawlergo)</li>
<li>使用 -phantomjs 选项安装 PhantomJS</li>
</ul>
<p><strong>3. 蓝队工具</strong></p>
<ul>
<li>使用 -binwalk 选项安装 binwalk 环境</li>
<li>使用 -binwalk-f 选项强制安装 binwalk 环境 (建议在 -binwalk 选项失败的情况下运行)</li>
<li>使用 -clamav 选项安装 ClamAV 工具</li>
<li>使用 -lt 选项部署 LogonTracer 环境 (非超高配置机器不要部署,这个应用太吃配置了)</li>
<li>使用 -suricata 选项部署 Suricata 环境</li>
<li>使用 -vol 选项安装 volatility 取证工具</li>
<li>使用 -vol3 选项安装 volatility3 取证工具</li>
</ul>
<p><strong>4. 红队工具</strong></p>
<ul>
<li>使用 -aircrack 选项部署 aircrack-ng 环境</li>
<li>使用 -bypass 选项部署 Bypass 环境</li>
<li>使用 -goby 选项部署 Goby 环境 (需要图形化环境)</li>
<li>使用 -wpscan 选项安装 wpscan 工具</li>
<li>使用 -yakit 选项部署 yakit 环境</li>
</ul>
<p><strong>5. 红队基础设施</strong></p>
<ul>
<li>使用 -awvs14 选项部署 AWVS13 环境(1.04 GB)</li>
<li>使用 -cs 选项部署 CobaltStrike4.3 环境</li>
<li>使用 -cs45 选项部署 CobaltStrike4.5 环境</li>
<li>使用 -frp 选项部署 frp 工具</li>
<li>使用 -interactsh 选项部署 interactsh 工具 (<a href="https://github.com/projectdiscovery/interactsh">https://github.com/projectdiscovery/interactsh</a>)</li>
<li>使用 -merlin 选项部署 merlin 环境 (<a href="https://github.com/Ne0nd0g/merlin">https://github.com/Ne0nd0g/merlin</a>)</li>
<li>使用 -msf 选项部署 Metasploit 环境</li>
<li>使用 -nps 选项部署 nps 工具</li>
<li>使用 -pupy 选项部署 pupy 环境 (<a href="https://github.com/n1nj4sec/pupy">https://github.com/n1nj4sec/pupy</a>)</li>
<li>使用 -rg 选项部署 RedGuard 工具 (<a href="https://github.com/wikiZ/RedGuard">https://github.com/wikiZ/RedGuard</a>)</li>
<li>使用 -sliver 选项部署 sliver 环境 (<a href="https://github.com/BishopFox/sliver">https://github.com/BishopFox/sliver</a>)</li>
<li>使用 -sliver-client 选项安装 sliver-client 工具</li>
<li>使用 -sps 选项部署 SharPyShell 工具 (<a href="https://github.com/antonioCoco/SharPyShell">https://github.com/antonioCoco/SharPyShell</a>)</li>
<li>使用 -viper 选项部署 Viper 环境(2.1 GB)</li>
</ul>
<p><strong>6. 基于 Docker 的环境部署</strong></p>
<ul>
<li>使用 -arl 选项部署 ARL 环境(872 MB)</li>
<li>使用 -mobsf 选项部署 MobSF 环境(1.54 GB)</li>
<li>使用 -nodejsscan 选项部署 nodejsscan 环境(873 MB)</li>
<li>使用 -vulhub 选项部署 vulhub 环境(210 MB)</li>
<li>使用 -vulfocus 选项部署 vulfocus 环境(1.04 GB)</li>
<li>使用 -TerraformGoat 选项部署 TerraformGoat 环境</li>
</ul>
<p><strong>7. 杂项服务</strong></p>
<ul>
<li>使用 -asciinema 选项安装 asciinema 截图工具</li>
<li>使用 -bt 选项部署宝塔服务</li>
<li>使用 -clash 选项安装 clash 工具 (<a href="https://github.com/juewuy/ShellClash">https://github.com/juewuy/ShellClash</a>)</li>
<li>使用 -nginx 选项配置 nginx 服务</li>
<li>使用 -ssh 选项配置 ssh 环境 (RedHat 系默认可用,无需重复安装)</li>
<li>使用 -ssr 选项部署 ssr 工具</li>
<li>使用 -zsh 选项部署 zsh 工具</li>
</ul>
<p><strong>8. 其他</strong></p>
<ul>
<li>使用 -clear 选项清理系统使用痕迹</li>
<li>使用 -info 选项查看系统各项信息</li>
<li>使用 -optimize 选项改善设备选项,优化性能</li>
<li>使用 -remove 选项卸载国内 vps 云监控</li>
<li>使用 -rmlock 选项运行除锁模块</li>
<li>使用 -swap 选项配置 swap 分区</li>
<li>使用 -update 选项更新 f8x 工具</li>
<li>使用 -upgrade 选项更新渗透工具</li>
</ul>
<hr>
<h2 id="实际效果"><a href="#实际效果" class="headerlink" title="实际效果"></a>实际效果</h2><p><strong>-h 查看帮助</strong></p>
<p><img src="../images/%E7%BA%A2%E8%93%9D%E9%98%9F%E7%8E%AF%E5%A2%83%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E5%B7%A5%E5%85%B7/1.png" alt="1"></p>
<p><strong>-all 全自动化部署</strong></p>
<p><img src="../images/%E7%BA%A2%E8%93%9D%E9%98%9F%E7%8E%AF%E5%A2%83%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E5%B7%A5%E5%85%B7/centos7.svg" alt="centos7"></p>
<p>以 vultr vps 为例,结果分别如下</p>
<p><strong>CentOS 7</strong></p>
<p><img src="../images/%E7%BA%A2%E8%93%9D%E9%98%9F%E7%8E%AF%E5%A2%83%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E5%B7%A5%E5%85%B7/centos7.svg" alt="centos7"></p>
<p><strong>Debian 10</strong></p>
<p><img src="../images/%E7%BA%A2%E8%93%9D%E9%98%9F%E7%8E%AF%E5%A2%83%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E5%B7%A5%E5%85%B7/debian10.svg" alt="debian10"></p>
<p><strong>Fedora 33</strong></p>
<p><img src="../images/%E7%BA%A2%E8%93%9D%E9%98%9F%E7%8E%AF%E5%A2%83%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E5%B7%A5%E5%85%B7/fedora33.svg" alt="Fedora 33"></p>
<p><strong>Ubuntu 20.10</strong></p>
<p><img src="../images/%E7%BA%A2%E8%93%9D%E9%98%9F%E7%8E%AF%E5%A2%83%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E5%B7%A5%E5%85%B7/Ubuntu20.10.svg" alt="Ubuntu 20.10"></p>
<hr>
<h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><p><strong>-p 选项会执行什么</strong></p>
<ol>
<li>替换你的 DNS(默认为 223.5.5.5), 如果判断是 debian 系还会帮你安装 resolvconf, 长期修改 DNS</li>
<li>检查基础的编译环境是否安装, 并通过默认的包管理器安装 gcc,make,unzip 这些基本软件</li>
<li>可选的从 <a href="https://github.com/rofl0r/proxychains-ng">https://github.com/rofl0r/proxychains-ng</a> 或 ffffffff0x.com 下载 Proxychains-ng 的源码, 编译安装</li>
<li>要求你修改 /etc/proxychains.conf 文件</li>
<li>修改 pip 代理为 <a href="https://mirrors.aliyun.com/pypi/simple/">https://mirrors.aliyun.com/pypi/simple/</a></li>
<li>修改 docker 代理为 <a href="https://docker.mirrors.ustc.edu.cn/">https://docker.mirrors.ustc.edu.cn</a> , 并重启 docker 服务</li>
</ol>
<p><strong>我想跑在 CI/CD 里,不想要交互行不行?</strong></p>
<p>当然没有问题, f8x 的 GitHub action 就是自动运行每个选项部署环境的。只需要在 /tmp 创建一个名为 IS_CI 的空文件即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> /tmp/IS_CI</span><br><span class="line">wget -O f8x https://f8x.io/ &amp;&amp; <span class="built_in">mv</span> --force f8x /usr/local/bin/f8x &amp;&amp; <span class="built_in">chmod</span> +x /usr/local/bin/f8x</span><br><span class="line">f8x -k</span><br></pre></td></tr></table></figure>

<p><strong>如何自定义版本</strong></p>
<p>shell脚本在运行时，可以通过 <code>. ./test.sh</code> 这样同等进程运行修改当前shell环境变量，那么f8x对同目录下的 f8x_version.sh 文件做个判断，当有这个文件时，会加载这个文件中的内容，也就是覆盖f8x的变量值，这样只需要在当前目录下对 f8x_version.sh 文件做修改或定制，即可做到安装指定版本</p>
<hr>
]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>集成开源攻防武器项目</title>
    <url>/2023/04/24/%E9%9B%86%E6%88%90%E5%BC%80%E6%BA%90%E6%94%BB%E9%98%B2%E6%AD%A6%E5%99%A8%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<blockquote>
<p><strong>本人搬运的是github上的一个开源项目</strong></p>
<p><strong>地址：<a href="https://github.com/guchangan1/All-Defense-Tool">https://github.com/guchangan1/All-Defense-Tool</a></strong></p>
<p><strong>如果你有更好的提议或者其他想法，欢迎联系。</strong></p>
<p><strong>by–L0una(guchangan1)</strong></p>
</blockquote>
<h1 id="All-Defense-Tool"><a href="#All-Defense-Tool" class="headerlink" title="All-Defense-Tool"></a>All-Defense-Tool</h1><p>​     首先恭喜你发现了宝藏。本项目集成了全网优秀的开源攻防武器项目，包含信息收集工具（自动化利用工具、资产发现工具、目录扫描工具、子域名收集工具、指纹识别工具、端口扫描工具、各种插件….etc…），漏洞利用工具（各大CMS利用工具、中间件利用工具等项目……..），内网渗透工具（隧道代理、密码提取…..）、应急响应工具、甲方运维工具、等其他安全攻防资料整理，供攻防双方使用。如果你有更好的建议，欢迎提出请求。</p>
<h2 id="免责声明"><a href="#免责声明" class="headerlink" title="免责声明"></a>免责声明</h2><p><strong>重点提醒：本项目工具来源于互联网，是否含带木马及后门请自行甄别！！Hvv来即，请大家提高警惕！！！</strong></p>
<ol>
<li><code>本项目所有内容,仅供学习和研究使用,请勿使用项目的技术手段用于非法用途,任何人造成的任何负面影响,与本人无关.</code></li>
<li><code>本文档所有内容、新闻皆不代表本人态度、立场,如果有建议或方案,欢迎提交 issues</code></li>
<li><code>不会收取任何广告费用,展示的所有工具链接与本人无任何利害关系</code></li>
</ol>
<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul>
<li><a href="#%E5%8D%8A%E5%85%A8%E8%87%AA%E5%8A%A8%E5%8C%96%E5%88%A9%E7%94%A8%E5%B7%A5%E5%85%B7">半/全自动化利用工具</a></li>
<li><a href="#%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%B7%A5%E5%85%B7">信息收集工具</a><ul>
<li><a href="#%E8%B5%84%E4%BA%A7%E5%8F%91%E7%8E%B0%E5%B7%A5%E5%85%B7">资产发现工具</a></li>
<li><a href="#%E5%AD%90%E5%9F%9F%E5%90%8D%E6%94%B6%E9%9B%86%E5%B7%A5%E5%85%B7">子域名收集工具</a></li>
<li><a href="#%E7%9B%AE%E5%BD%95%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7">目录扫描工具</a></li>
<li><a href="#%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB%E5%B7%A5%E5%85%B7">指纹识别工具</a></li>
<li><a href="#%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7">端口扫描工具</a></li>
<li><a href="#burp%E6%8F%92%E4%BB%B6">Burp插件</a></li>
<li><a href="#%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6">浏览器插件</a></li>
<li><a href="#%E9%82%AE%E7%AE%B1%E9%92%93%E9%B1%BC">邮箱&amp;钓鱼</a></li>
<li><a href="#%E7%A4%BE%E5%B7%A5%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E7%B1%BB">社工个人信息收集类</a></li>
<li><a href="#APP/%E5%85%AC%E4%BC%97%E5%8F%B7/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9B%B8%E5%85%B3%E5%B7%A5%E5%85%B7">APP/公众号/小程序相关工具</a></li>
<li><a href="#%E5%B8%B8%E7%94%A8%E5%B0%8F%E5%B7%A5%E5%85%B7">常用小工具</a></li>
</ul>
</li>
<li><a href="#%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%B7%A5%E5%85%B7">漏洞利用工具</a><ul>
<li><a href="#%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E6%A1%86%E6%9E%B6%E5%B7%A5%E5%85%B7">漏洞扫描框架/工具</a></li>
<li><a href="#%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%B7%A5%E5%85%B7">中间件漏洞利用工具</a></li>
<li><a href="#%E9%87%8D%E7%82%B9cms%E5%88%A9%E7%94%A8%E5%B7%A5%E5%85%B7">重点cms利用工具</a></li>
<li><a href="#%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2%E5%88%A9%E7%94%A8%E5%B7%A5%E5%85%B7">信息泄露利用工具</a></li>
<li><a href="#%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%A9%E7%94%A8%E5%B7%A5%E5%85%B7">数据库利用工具</a></li>
<li><a href="#%E7%88%86%E7%A0%B4%E5%88%A9%E7%94%A8%E5%B7%A5%E5%85%B7">爆破利用工具</a></li>
<li><a href="#%E5%85%A8%E7%BD%91%E5%AD%97%E5%85%B8%E6%94%B6%E9%9B%86">全网字典收集</a></li>
<li><a href="#%E5%B8%B8%E8%A7%84%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%B7%A5%E5%85%B7">常规漏洞利用工具</a></li>
<li><a href="#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E5%B7%A5%E5%85%B7">反序列化利用工具</a></li>
<li><a href="#%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E8%BE%85%E5%8A%A9%E5%B7%A5%E5%85%B7">代码审计辅助工具</a></li>
</ul>
</li>
<li><a href="#%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%B7%A5%E5%85%B7">内网渗透工具</a><ul>
<li><a href="#%E6%8F%90%E6%9D%83%E9%A1%B9%E7%9B%AE">提权项目</a></li>
<li><a href="#%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8%E5%B7%A5%E5%85%B7">横向移动工具</a></li>
<li><a href="#shell%E6%89%98%E7%AE%A1%E5%B7%A5%E5%85%B7">shell托管工具</a></li>
<li><a href="#%E5%AF%86%E7%A0%81%E6%8F%90%E5%8F%96%E5%B7%A5%E5%85%B7">密码提取工具</a></li>
<li><a href="#%E9%9A%A7%E9%81%93%E4%BB%A3%E7%90%86%E5%B7%A5%E5%85%B7">隧道代理工具</a></li>
<li><a href="#%E4%BC%98%E7%A7%80%E5%85%8D%E6%9D%80%E9%A1%B9%E7%9B%AE">优秀免杀项目</a></li>
<li><a href="#%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81%E5%B7%A5%E5%85%B7">权限维持工具</a></li>
</ul>
</li>
<li><a href="#%E8%BF%90%E7%BB%B4%E7%94%B2%E6%96%B9%E9%98%B2%E5%AE%88%E6%96%B9%E5%B7%A5%E5%85%B7">运维&amp;甲方&amp;防守方工具</a><ul>
<li><a href="#linux%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E5%B7%A5%E5%85%B7">Linux应急响应工具</a></li>
<li><a href="#windows%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E5%B7%A5%E5%85%B7">Windows应急响应工具</a></li>
<li><a href="#%E5%86%85%E5%AD%98%E9%A9%AC%E6%9F%A5%E6%9D%80%E5%B7%A5%E5%85%B7">内存马查杀工具</a></li>
<li><a href="#xxxx">xxxx</a></li>
<li><a href="#%E6%BA%AF%E6%BA%90%E5%8F%8D%E5%88%B6%E5%B7%A5%E5%85%B7">溯源反制工具</a></li>
</ul>
</li>
<li><a href="#%E5%AE%89%E5%85%A8%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86">安全资料整理</a><ul>
<li><a href="#%E7%BA%A2%E8%93%9D%E8%B5%84%E6%96%99%E9%9B%86%E9%94%A6">红蓝资料集锦</a></li>
<li><a href="#%E4%BA%91%E5%AE%89%E5%85%A8%E8%B5%84%E6%96%99">云安全资料</a></li>
<li><a href="#%E9%9D%B6%E5%9C%BA%E6%B8%85%E5%8D%95">靶场清单</a></li>
<li><a href="#%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%8F%8A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA">基础设施及环境搭建</a></li>
</ul>
</li>
</ul>
<p>温馨提醒：不要沉迷于攻防而忘了吃饭喔~</p>
<ul>
<li>程序员在家做饭方法指南。<a href="https://github.com/Anduin2017/HowToCook">https://github.com/Anduin2017/HowToCook</a></li>
</ul>
<h1 id="半-全自动化利用工具"><a href="#半-全自动化利用工具" class="headerlink" title="半/全自动化利用工具"></a>半/全自动化利用工具</h1><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>一条龙服务，只需要输入根域名即可全方位收集相关资产，并检测漏洞。也可以输入多个域名、C段IP等，具体案例见下文。</td>
<td><a href="https://github.com/0x727/ShuiZe_0x727">https://github.com/0x727/ShuiZe_0x727</a></td>
<td>ShuiZe_0x727</td>
</tr>
<tr>
<td>单兵作战武器库，你值得拥有</td>
<td><a href="https://github.com/yaklang/yakit">https://github.com/yaklang/yakit</a></td>
<td>yakit</td>
</tr>
<tr>
<td>自动化巡航扫描框架（可用于红队打点评估）</td>
<td><a href="https://github.com/b0bac/ApolloScanner">https://github.com/b0bac/ApolloScanner</a></td>
<td>ApolloScanner</td>
</tr>
<tr>
<td>可针对指定IP段、资产清单、存活网段自动化进行端口扫描以及TCP指纹识别和Banner抓取</td>
<td><a href="https://github.com/lcvvvv/kscan">https://github.com/lcvvvv/kscan</a></td>
<td>kscan</td>
</tr>
<tr>
<td>一款尚未被发掘的脆弱性扫描工具</td>
<td><a href="https://github.com/broken5/bscan">https://github.com/broken5/bscan</a></td>
<td>bscan</td>
</tr>
<tr>
<td>一个漏洞扫描器粘合剂,添加目标后30款工具自动调用</td>
<td><a href="https://github.com/78778443/QingScan">https://github.com/78778443/QingScan</a></td>
<td>QingScan</td>
</tr>
<tr>
<td>分布式资产信息收集和漏洞扫描平台</td>
<td><a href="https://github.com/1in9e/gosint">https://github.com/1in9e/gosint</a></td>
<td>gosint</td>
</tr>
<tr>
<td>一个辅助平常渗透测试项目或者攻防项目快速打点的综合工具</td>
<td><a href="https://github.com/P1-Team/AlliN">https://github.com/P1-Team/AlliN</a></td>
<td>AlliN</td>
</tr>
<tr>
<td>nemo_go自动化信息收集</td>
<td><a href="https://github.com/hanc00l/nemo_go">https://github.com/hanc00l/nemo_go</a></td>
<td>nemo_go</td>
</tr>
<tr>
<td>从子域名、端口服务、漏洞、爬虫等一体化的资产管理系统</td>
<td><a href="https://github.com/CTF-MissFeng/bayonet">https://github.com/CTF-MissFeng/bayonet</a></td>
<td>bayonet</td>
</tr>
<tr>
<td>一个高度可定制Web自动化扫描框架</td>
<td><a href="https://github.com/r3curs1v3-pr0xy/vajra">https://github.com/r3curs1v3-pr0xy/vajra</a></td>
<td>vajra</td>
</tr>
<tr>
<td>reconFTW 集成了30个工具的信息收集利器</td>
<td><a href="https://github.com/six2dez/reconftw">https://github.com/six2dez/reconftw</a></td>
<td>reconftw</td>
</tr>
<tr>
<td>自动化侦查框架</td>
<td><a href="https://github.com/yogeshojha/rengine">https://github.com/yogeshojha/rengine</a></td>
<td>rengine</td>
</tr>
<tr>
<td>GUI界面的自动化工具</td>
<td><a href="https://github.com/lz520520/railgun">https://github.com/lz520520/railgun</a></td>
<td>Railgun</td>
</tr>
<tr>
<td>在线cms识别|信息泄露|工控|系统|物联网安全|cms漏洞扫描|nmap端口扫描|子域名获取|待续..</td>
<td><a href="https://github.com/iceyhexman/onlinetools">https://github.com/iceyhexman/onlinetools</a></td>
<td>在线工具集</td>
</tr>
<tr>
<td>Acunetix Web漏洞扫描程序 GUI版本]</td>
<td><a href="https://github.com/x364e3ab6/AWVS-13-SCAN-PLUS">https://github.com/x364e3ab6/AWVS-13-SCAN-PLUS</a></td>
<td>AWVS-GUI</td>
</tr>
<tr>
<td>DarkAngel 是一款全自动白帽漏洞扫描器，从hackerone、bugcrowd资产监听到漏洞报告生成、企业微信通知。</td>
<td><a href="https://github.com/Bywalks/DarkAngel">https://github.com/Bywalks/DarkAngel</a></td>
<td>DarkAngel</td>
</tr>
</tbody></table>
<h1 id="信息收集工具"><a href="#信息收集工具" class="headerlink" title="信息收集工具"></a>信息收集工具</h1><h2 id="资产发现工具"><a href="#资产发现工具" class="headerlink" title="资产发现工具"></a>资产发现工具</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>reconFTW 集成了30个工具的信息收集利器</td>
<td><a href="https://github.com/six2dez/reconftw">https://github.com/six2dez/reconftw</a></td>
<td>reconftw</td>
</tr>
<tr>
<td>资产无限巡航扫描系统</td>
<td><a href="https://github.com/awake1t/linglong">https://github.com/awake1t/linglong</a></td>
<td>linglong</td>
</tr>
<tr>
<td>SRC子域名资产监控</td>
<td><a href="https://github.com/LangziFun/LangSrcCurise">https://github.com/LangziFun/LangSrcCurise</a></td>
<td>LangSrcCurise</td>
</tr>
<tr>
<td>快速侦察与目标关联的互联网资产，构建基础资产信息库。</td>
<td><a href="https://github.com/TophantTechnology/ARL">https://github.com/TophantTechnology/ARL</a></td>
<td>ARL(灯塔)</td>
</tr>
<tr>
<td>集成GoogleHacking语法来进行信息收集</td>
<td><a href="https://github.com/TebbaaX/GRecon">https://github.com/TebbaaX/GRecon</a></td>
<td>Grecon</td>
</tr>
<tr>
<td>从第三方平台获取目标网页内容</td>
<td><a href="https://github.com/tomnomnom/waybackurls">https://github.com/tomnomnom/waybackurls</a></td>
<td>waybackurls</td>
</tr>
<tr>
<td>从多个网站提取目标相关信息</td>
<td><a href="https://github.com/lc/gau">https://github.com/lc/gau</a></td>
<td>gau</td>
</tr>
<tr>
<td>集合了多个网络测绘平台，可以快速在多个网络测绘平台搜索信息并且合并展示及导出。</td>
<td><a href="https://github.com/ExpLangcn/InfoSearchAll">https://github.com/ExpLangcn/InfoSearchAll</a></td>
<td>InfoSearchAll</td>
</tr>
<tr>
<td>调用fofa\ZoomEye\360quake的官方api—GUI界面</td>
<td><a href="https://github.com/xzajyjs/ThunderSearch">https://github.com/xzajyjs/ThunderSearch</a></td>
<td>ThunderSearch</td>
</tr>
<tr>
<td>集成多个网络资产测绘平台的搜索工具</td>
<td><a href="https://github.com/Kento-Sec/AsamF">https://github.com/Kento-Sec/AsamF</a></td>
<td>AsamF</td>
</tr>
<tr>
<td>一个简单实用的FOFA客户端 By flashine</td>
<td><a href="https://github.com/wgpsec/fofa_viewer">https://github.com/wgpsec/fofa_viewer</a></td>
<td>fofa_viewer</td>
</tr>
<tr>
<td>0_zone_zpi脚本</td>
<td><a href="https://github.com/lemonlove7/0_zone">https://github.com/lemonlove7/0_zone</a></td>
<td>0_zone</td>
</tr>
<tr>
<td>icp备案查询、企业资产快速收集工具</td>
<td><a href="https://github.com/SiJiDo/IEyes">https://github.com/SiJiDo/IEyes</a></td>
<td>IEyes</td>
</tr>
<tr>
<td>一款基于各大企业信息API的工具</td>
<td><a href="https://github.com/wgpsec/ENScan_GO">https://github.com/wgpsec/ENScan_GO</a></td>
<td>ENScan_GO</td>
</tr>
<tr>
<td>基于斗象灯塔ARL修改后的版本。相比原版，增加了OneForAll、中央数据库，修改了altDns</td>
<td><a href="https://github.com/ki9mu/ARL-plus-docker">https://github.com/ki9mu/ARL-plus-docker</a></td>
<td>ARL-plus-docker</td>
</tr>
<tr>
<td>灯塔（最新版）指纹添加脚本！</td>
<td><a href="https://github.com/loecho-sec/ARL-Finger-ADD">https://github.com/loecho-sec/ARL-Finger-ADD</a></td>
<td>ARL-Finger-ADD</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="子域名收集工具"><a href="#子域名收集工具" class="headerlink" title="子域名收集工具"></a>子域名收集工具</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>在线子域名收集</td>
<td><a href="https://rapiddns.io/subdomain">https://rapiddns.io/subdomain</a></td>
<td>在线收集</td>
</tr>
<tr>
<td>ksubdomain 无状态子域名爆破工具</td>
<td><a href="https://github.com/knownsec/ksubdomain">https://github.com/knownsec/ksubdomain</a></td>
<td>ksubdomain</td>
</tr>
<tr>
<td>一款功能强大的子域收集工具</td>
<td><a href="https://github.com/shmilylty/OneForAll">https://github.com/shmilylty/OneForAll</a></td>
<td>oneforall</td>
</tr>
<tr>
<td>通过使用被动在线资源来发现网站的有效子域</td>
<td><a href="https://github.com/projectdiscovery/subfinder">https://github.com/projectdiscovery/subfinder</a></td>
<td>subfinder</td>
</tr>
<tr>
<td>src子域名监控</td>
<td><a href="https://github.com/LangziFun/LangSrcCurise">https://github.com/LangziFun/LangSrcCurise</a></td>
<td>LangSrcCurise</td>
</tr>
<tr>
<td>从 github 上发现子域名</td>
<td><a href="https://github.com/gwen001/github-subdomains">https://github.com/gwen001/github-subdomains</a></td>
<td>github-subdomains</td>
</tr>
<tr>
<td>Layer子域名挖掘机</td>
<td><a href="https://github.com/euphrat1ca/LayerDomainFinder">https://github.com/euphrat1ca/LayerDomainFinder</a></td>
<td>Layer</td>
</tr>
<tr>
<td>好用且强大的子域名扫描工具</td>
<td><a href="https://github.com/yunxu1/dnsub">https://github.com/yunxu1/dnsub</a></td>
<td>dnsub</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="目录扫描工具"><a href="#目录扫描工具" class="headerlink" title="目录扫描工具"></a>目录扫描工具</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>Web path scanner  目录扫描工具</td>
<td><a href="https://github.com/maurosoria/dirsearch">https://github.com/maurosoria/dirsearch</a></td>
<td>dirsearch</td>
</tr>
<tr>
<td>用Rust编写的快速，简单，递归的内容发现工具</td>
<td><a href="https://github.com/epi052/feroxbuster">https://github.com/epi052/feroxbuster</a></td>
<td>feroxbuster</td>
</tr>
<tr>
<td>用Go编写的模糊测试工具</td>
<td><a href="https://github.com/ffuf/ffuf">https://github.com/ffuf/ffuf</a></td>
<td>ffuf</td>
</tr>
<tr>
<td>一个高级web目录、文件扫描工具</td>
<td><a href="https://github.com/H4ckForJob/dirmap">https://github.com/H4ckForJob/dirmap</a></td>
<td>dirmap</td>
</tr>
<tr>
<td>网站的敏感目录发掘工具</td>
<td><a href="https://github.com/deibit/cansina">https://github.com/deibit/cansina</a></td>
<td>cansina</td>
</tr>
<tr>
<td>御剑后台扫描工具珍藏版</td>
<td><a href="https://www.fujieace.com/hacker/tools/yujian.html">https://www.fujieace.com/hacker/tools/yujian.html</a></td>
<td>御剑</td>
</tr>
<tr>
<td>使用GoLang开发的目录/子域扫描器</td>
<td><a href="https://github.com/ReddyyZ/urlbrute">https://github.com/ReddyyZ/urlbrute</a></td>
<td>urlbrute</td>
</tr>
<tr>
<td>御剑目录扫描专业版</td>
<td><a href="https://github.com/foryujian/yjdirscan">https://github.com/foryujian/yjdirscan</a></td>
<td>yjdirscan</td>
</tr>
<tr>
<td>web目录快速扫描工具，够用</td>
<td><a href="https://github.com/hunyaio/yuhScan">https://github.com/hunyaio/yuhScan</a></td>
<td>yuhScan</td>
</tr>
<tr>
<td>类似JSFinder的golang实现，更快更全更舒服</td>
<td><a href="https://github.com/pingc0y/URLFinder">https://github.com/pingc0y/URLFinder</a></td>
<td>URLFinder</td>
</tr>
<tr>
<td>爬虫 可以发现搜索引擎发现不了的目录</td>
<td><a href="https://github.com/jaeles-project/gospider">https://github.com/jaeles-project/gospider</a></td>
<td>gospider</td>
</tr>
<tr>
<td>katana 是 projectdiscovery 项目中的一个网页链接抓取工具，可以自动解析js文件。新一代爬行框架。</td>
<td><a href="https://github.com/projectdiscovery/katana">https://github.com/projectdiscovery/katana</a></td>
<td>katana</td>
</tr>
<tr>
<td>dontgo403 是一个绕过 40X 错误的工具。</td>
<td><a href="https://github.com/devploit/dontgo403">https://github.com/devploit/dontgo403</a></td>
<td>dontgo403</td>
</tr>
</tbody></table>
<h2 id="指纹识别工具"><a href="#指纹识别工具" class="headerlink" title="指纹识别工具"></a>指纹识别工具</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>红队重点攻击系统指纹探测工具</td>
<td><a href="https://github.com/EdgeSecurityTeam/EHole">https://github.com/EdgeSecurityTeam/EHole</a></td>
<td>EHole(棱洞)2.0</td>
</tr>
<tr>
<td>Golang实现Wappalyzer 指纹识别</td>
<td><a href="https://github.com/projectdiscovery/wappalyzergo">https://github.com/projectdiscovery/wappalyzergo</a></td>
<td>wappalyzergo</td>
</tr>
<tr>
<td>功能齐全的Web指纹识别和分享平台，内置了一万多条互联网开源的指纹信息。</td>
<td><a href="https://github.com/b1ackc4t/14Finger">https://github.com/b1ackc4t/14Finger</a></td>
<td>14Finger</td>
</tr>
<tr>
<td>一个web应用程序指纹识别工具</td>
<td><a href="https://github.com/urbanadventurer/WhatWeb">https://github.com/urbanadventurer/WhatWeb</a></td>
<td>Whatweb</td>
</tr>
<tr>
<td>一款红队在大量的资产中存活探测与重点攻击系统指纹探测工具</td>
<td><a href="https://github.com/EASY233/Finger">https://github.com/EASY233/Finger</a></td>
<td>Finger</td>
</tr>
<tr>
<td>Glass是一款针对资产列表的快速指纹识别工具</td>
<td><a href="https://github.com/s7ckTeam/Glass">https://github.com/s7ckTeam/Glass</a></td>
<td>Glass</td>
</tr>
<tr>
<td>TideFinger——指纹识别小工具，汲取整合了多个web指纹库</td>
<td><a href="https://github.com/TideSec/TideFinger">https://github.com/TideSec/TideFinger</a></td>
<td>TideFinger</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="端口扫描工具"><a href="#端口扫描工具" class="headerlink" title="端口扫描工具"></a>端口扫描工具</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>naabu 用 go 编写的快速端口扫描器</td>
<td><a href="https://github.com/projectdiscovery/naabu">https://github.com/projectdiscovery/naabu</a></td>
<td>naabu</td>
</tr>
<tr>
<td>TXPortMap 实用型的端口扫描、服务识别工具</td>
<td><a href="https://github.com/4dogs-cn/TXPortMap">https://github.com/4dogs-cn/TXPortMap</a></td>
<td>TXPortMap</td>
</tr>
<tr>
<td>使用Golang开发的高并发网络扫描、服务探测工具</td>
<td><a href="https://github.com/Adminisme/ServerScan">https://github.com/Adminisme/ServerScan</a></td>
<td>serverScan</td>
</tr>
<tr>
<td>masnmapscan 一款端口扫描器。整合了masscan和nmap两款扫描器</td>
<td><a href="https://github.com/hellogoldsnakeman/masnmapscan-V1.0">https://github.com/hellogoldsnakeman/masnmapscan-V1.0</a></td>
<td>整合扫描器</td>
</tr>
<tr>
<td>gonmap是一个go语言的nmap端口扫描库</td>
<td><a href="https://github.com/lcvvvv/gonmap">https://github.com/lcvvvv/gonmap</a></td>
<td>gonmap</td>
</tr>
<tr>
<td>光速扫描</td>
<td><a href="http://pan.baidu.com/s/1pLjaQKF">http://pan.baidu.com/s/1pLjaQKF</a></td>
<td>小米范</td>
</tr>
<tr>
<td>在线端口扫描1</td>
<td><a href="http://coolaf.com/tool/port">http://coolaf.com/tool/port</a></td>
<td>在线工具</td>
</tr>
<tr>
<td>在线端口扫描2</td>
<td><a href="http://tool.cc/port/">http://tool.cc/port/</a></td>
<td>在线工具2</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="Burp插件"><a href="#Burp插件" class="headerlink" title="Burp插件"></a>Burp插件</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>有关burpsuite的插件(非商店),文章以及使用技巧的收集</td>
<td><a href="https://github.com/Mr-xn/BurpSuite-collections">https://github.com/Mr-xn/BurpSuite-collections</a></td>
<td>BurpSuite-collections</td>
</tr>
<tr>
<td>一款基于BurpSuite的被动式shiro检测插件</td>
<td><a href="https://github.com/pmiaowu/BurpShiroPassiveScan">https://github.com/pmiaowu/BurpShiroPassiveScan</a></td>
<td>BurpShiroPassiveScan</td>
</tr>
<tr>
<td>一款基于BurpSuite的被动式FastJson检测插件</td>
<td><a href="https://github.com/pmiaowu/BurpFastJsonScan">https://github.com/pmiaowu/BurpFastJsonScan</a></td>
<td>BurpFastJsonScan</td>
</tr>
<tr>
<td>添加一些右键菜单让burp用起来更顺畅</td>
<td><a href="https://github.com/bit4woo/knife">https://github.com/bit4woo/knife</a></td>
<td>knife</td>
</tr>
<tr>
<td>fastjson漏洞burp插件，检测fastjson小于1.2.68基于dnslog</td>
<td><a href="https://github.com/zilong3033/fastjsonScan">https://github.com/zilong3033/fastjsonScan</a></td>
<td>fastjsonScan</td>
</tr>
<tr>
<td>fastjson利用，支持tomcat、spring回显，哥斯拉内存马；回显利用链为dhcp、ibatis、c3p0</td>
<td><a href="https://github.com/skisw/fastjson-exp">https://github.com/skisw/fastjson-exp</a></td>
<td>fastjson-exp</td>
</tr>
<tr>
<td>HaE 请求高亮标记与信息提取的辅助型 BurpSuite 插件</td>
<td><a href="https://github.com/gh0stkey/HaE">https://github.com/gh0stkey/HaE</a></td>
<td>HaE</td>
</tr>
<tr>
<td>domain_hunter_pro 一个资产管理类的Burp插件</td>
<td><a href="https://github.com/bit4woo/domain_hunter_pro">https://github.com/bit4woo/domain_hunter_pro</a></td>
<td>domain_hunter_pro</td>
</tr>
<tr>
<td>新一代子域名主/被动收集工具</td>
<td><a href="https://github.com/Acmesec/Sylas">https://github.com/Acmesec/Sylas</a></td>
<td>Sylas</td>
</tr>
<tr>
<td>GadgetProbe Burp插件 用来爆破远程类查找Java反序列化</td>
<td><a href="https://github.com/BishopFox/GadgetProbe">https://github.com/BishopFox/GadgetProbe</a></td>
<td>GadgetProbe</td>
</tr>
<tr>
<td>HopLa 自动补全 Payload 的 BurpSuite插件</td>
<td><a href="https://github.com/synacktiv/HopLa">https://github.com/synacktiv/HopLa</a></td>
<td>HopLa</td>
</tr>
<tr>
<td>验证码识别</td>
<td><a href="https://github.com/f0ng/captcha-killer-modified">https://github.com/f0ng/captcha-killer-modified</a></td>
<td>captcha-killer-modified</td>
</tr>
<tr>
<td>一款支持多种加密算法、或直接执行浏览器JS代码的BurpSuite插件。</td>
<td><a href="https://github.com/whwlsfb/BurpCrypto">https://github.com/whwlsfb/BurpCrypto</a></td>
<td>BurpCrypto</td>
</tr>
<tr>
<td>根据自定义来达到对数据包的处理（适用于加解密、爆破等），类似mitmproxy，不同点在于经过了burp中转</td>
<td><a href="https://github.com/f0ng/autoDecoder">https://github.com/f0ng/autoDecoder</a></td>
<td>autoDecoder</td>
</tr>
<tr>
<td>伪造ip地址</td>
<td><a href="https://github.com/TheKingOfDuck/burpFakeIP">https://github.com/TheKingOfDuck/burpFakeIP</a></td>
<td>burpFakeIP</td>
</tr>
<tr>
<td>自动发送请求</td>
<td><a href="https://github.com/nccgroup/AutoRepeater">https://github.com/nccgroup/AutoRepeater</a></td>
<td>AutoRepeater</td>
</tr>
<tr>
<td>自动探测请求走私漏洞</td>
<td><a href="https://github.com/portswigger/http-request-smuggler">https://github.com/portswigger/http-request-smuggler</a></td>
<td>http-request-smuggler</td>
</tr>
</tbody></table>
<h2 id="浏览器插件"><a href="#浏览器插件" class="headerlink" title="浏览器插件"></a>浏览器插件</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>Hack-Tools  适用于红队的浏览器扩展插件</td>
<td><a href="https://github.com/LasCC/Hack-Tools">https://github.com/LasCC/Hack-Tools</a></td>
<td>Hack-Tools</td>
</tr>
<tr>
<td>SwitchyOmega 浏览器的代理插件</td>
<td><a href="https://github.com/FelisCatus/SwitchyOmega">https://github.com/FelisCatus/SwitchyOmega</a></td>
<td>SwitchyOmega</td>
</tr>
<tr>
<td>Chrome插件.使用DevTools查找DOM XSS</td>
<td><a href="https://github.com/filedescriptor/untrusted-types">https://github.com/filedescriptor/untrusted-types</a></td>
<td>untrusted-types</td>
</tr>
<tr>
<td>FOFA Pro view 是一款FOFA Pro 资产展示浏览器插件</td>
<td><a href="https://github.com/fofapro/fofa_view">https://github.com/fofapro/fofa_view</a></td>
<td>fofa_view</td>
</tr>
<tr>
<td>mitaka 用于 OSINT 搜索的Chrome和Firefox扩展</td>
<td><a href="https://github.com/ninoseki/mitaka">https://github.com/ninoseki/mitaka</a></td>
<td>mitaka</td>
</tr>
<tr>
<td>Git History 查看git存储库文件的历史记录</td>
<td><a href="https://githistory.xyz/">https://githistory.xyz/</a></td>
<td>Git History</td>
</tr>
<tr>
<td>一款可以检测WEB蜜罐并阻断请求的Chrome插件</td>
<td><a href="https://github.com/cnrstar/anti-honeypot">https://github.com/cnrstar/anti-honeypot</a></td>
<td>anti-honeypot</td>
</tr>
<tr>
<td>一款基于 Chromium的XSS检测工具</td>
<td><a href="https://github.com/v8blink/Chromium-based-XSS-Taint-Tracking">https://github.com/v8blink/Chromium-based-XSS-Taint-Tracking</a></td>
<td>Chromium-based-XSS-Taint-Tracking</td>
</tr>
<tr>
<td>一款完全被动监听的谷歌插件，用于高危指纹识别、蜜罐特征告警和拦截、机器特征对抗。</td>
<td><a href="https://github.com/graynjo/Heimdallr">https://github.com/graynjo/Heimdallr</a></td>
<td>Heimdallr</td>
</tr>
</tbody></table>
<h2 id="邮箱-amp-钓鱼"><a href="#邮箱-amp-钓鱼" class="headerlink" title="邮箱&amp;钓鱼"></a>邮箱&amp;钓鱼</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>邮箱自动化收集爬取</td>
<td><a href="https://github.com/Taonn/EmailAll">https://github.com/Taonn/EmailAll</a></td>
<td>EmailAll</td>
</tr>
<tr>
<td>通过搜索引擎爬取电子邮件</td>
<td><a href="https://github.com/Josue87/EmailFinder">https://github.com/Josue87/EmailFinder</a></td>
<td>EmailFinder</td>
</tr>
<tr>
<td>批量检查邮箱账密有效的  Python 脚本</td>
<td><a href="https://github.com/rm1984/IMAPLoginTester">https://github.com/rm1984/IMAPLoginTester</a></td>
<td>IMAPLoginTester</td>
</tr>
<tr>
<td>Coremail邮件系统组织通讯录导出脚本</td>
<td><a href="https://github.com/dpu/coremail-address-book">https://github.com/dpu/coremail-address-book</a></td>
<td>coremail-address-book</td>
</tr>
<tr>
<td>拥有在线模板设计、发送诱骗广告等功能的钓鱼系统</td>
<td><a href="https://github.com/gophish/gophish">https://github.com/gophish/gophish</a></td>
<td>gophish</td>
</tr>
<tr>
<td>Swaks SMTP界的瑞士军刀</td>
<td><a href="https://github.com/jetmore/swaks">https://github.com/jetmore/swaks</a></td>
<td>swaks</td>
</tr>
<tr>
<td>一个在线的任意发件人发送Email邮件网站</td>
<td><a href="http://tool.chacuo.net/mailanonymous">http://tool.chacuo.net/mailanonymous</a></td>
<td>mailanonymous</td>
</tr>
<tr>
<td>EwoMail是基于Linux的企业邮箱服务器</td>
<td><a href="https://github.com/gyxuehu/EwoMail">https://github.com/gyxuehu/EwoMail</a></td>
<td>EwoMail</td>
</tr>
<tr>
<td>批量发送钓鱼邮箱</td>
<td><a href="https://github.com/Yang0615777/sendMail">https://github.com/Yang0615777/sendMail</a></td>
<td>sendMail</td>
</tr>
<tr>
<td>免杀宏生成器</td>
<td><a href="https://github.com/Inf0secRabbit/BadAssMacros">https://github.com/Inf0secRabbit/BadAssMacros</a></td>
<td>BadAssMacros</td>
</tr>
</tbody></table>
<h2 id="社工个人信息收集类"><a href="#社工个人信息收集类" class="headerlink" title="社工个人信息收集类"></a>社工个人信息收集类</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>从大量站点中收集用户个人信息</td>
<td><a href="https://github.com/soxoj/maigret">https://github.com/soxoj/maigret</a></td>
<td>maigret</td>
</tr>
<tr>
<td>根据邮箱自动搜索泄漏的密码信息</td>
<td><a href="https://github.com/D4Vinci/Cr3dOv3r">https://github.com/D4Vinci/Cr3dOv3r</a></td>
<td>Cr3dOv3r</td>
</tr>
<tr>
<td>密码泄露搜集</td>
<td><a href="https://archive.org/search.php?query=">https://archive.org/search.php?query=</a></td>
<td>archive</td>
</tr>
<tr>
<td>从部分站点中收集个人信息</td>
<td><a href="https://github.com/n0tr00t/Sreg">https://github.com/n0tr00t/Sreg</a></td>
<td>Sreg</td>
</tr>
<tr>
<td>输入人名或邮箱地址, 自动从互联网爬取关于此人的信息</td>
<td><a href="https://github.com/famavott/osint-scraper">https://github.com/famavott/osint-scraper</a></td>
<td>osint-scraper</td>
</tr>
<tr>
<td>通过脉脉用户猜测企业邮箱</td>
<td><a href="https://github.com/Ridter/Mailget">https://github.com/Ridter/Mailget</a></td>
<td>Mailget</td>
</tr>
<tr>
<td>社工字典密码生成</td>
<td><a href="https://github.com/Mebus/cupp">https://github.com/Mebus/cupp</a></td>
<td>cupp</td>
</tr>
<tr>
<td>社会工程学密码生成器，是一个利用个人信息生成密码的工具</td>
<td><a href="https://github.com/zgjx6/SocialEngineeringDictionaryGenerator">https://github.com/zgjx6/SocialEngineeringDictionaryGenerator</a></td>
<td>DictionaryGenerator</td>
</tr>
<tr>
<td>在线密码生成器</td>
<td><a href="https://zzzteph.github.io/weakpass/">https://zzzteph.github.io/weakpass/</a></td>
<td>weakpass</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="APP-公众号-小程序相关工具"><a href="#APP-公众号-小程序相关工具" class="headerlink" title="APP/公众号/小程序相关工具"></a>APP/公众号/小程序相关工具</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>一个反编译微信小程序的工具，仓库也收集各种微信小程序/小游戏.wxapkg文件</td>
<td><a href="https://github.com/ezshine/wxapkg-convertor">https://github.com/ezshine/wxapkg-convertor</a></td>
<td>wxapkg-convertor</td>
</tr>
<tr>
<td>微信小程序反编译</td>
<td><a href="https://github.com/qwerty472123/wxappUnpacker">https://github.com/qwerty472123/wxappUnpacker</a></td>
<td>wxappUnpacker（自行寻找备份仓库）</td>
</tr>
<tr>
<td>微信小程序反编译</td>
<td><a href="https://github.com/r3x5ur/wxapkg-unpacker">https://github.com/r3x5ur/wxapkg-unpacker</a></td>
<td>wxapkg-unpacker（二开）</td>
</tr>
<tr>
<td>微信小程序信息在线收集，wxapkg源码包内提取信息</td>
<td><a href="https://github.com/moyuwa/wechat_appinfo_wxapkg">https://github.com/moyuwa/wechat_appinfo_wxapkg</a></td>
<td>wechat_appinfo_wxapkg</td>
</tr>
<tr>
<td>移动端(Android、iOS、WEB、H5、静态网站)信息收集扫描工具</td>
<td><a href="https://github.com/kelvinBen/AppInfoScanner">https://github.com/kelvinBen/AppInfoScanner</a></td>
<td>AppInfoScanner</td>
</tr>
<tr>
<td>一款适用于以APP病毒分析、APP漏洞挖掘、APP开发、HW行动/红队/渗透测试团队为场景的移动端(Android、iOS)辅助分析工具</td>
<td><a href="https://github.com/sulab999/AppMessenger">https://github.com/sulab999/AppMessenger</a></td>
<td>AppMessenger</td>
</tr>
<tr>
<td>apk爬虫工具可提取包内url等信息</td>
<td><a href="https://github.com/dwisiswant0/apkleaks">https://github.com/dwisiswant0/apkleaks</a></td>
<td>apkleaks</td>
</tr>
</tbody></table>
<h2 id="常用小工具"><a href="#常用小工具" class="headerlink" title="常用小工具"></a>常用小工具</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>好用的去重对比工具</td>
<td><a href="https://github.com/tomnomnom/anew">https://github.com/tomnomnom/anew</a></td>
<td>anew</td>
</tr>
<tr>
<td>视觉侦查工具，用于信息收集屏幕截图</td>
<td><a href="https://github.com/sensepost/gowitness">https://github.com/sensepost/gowitness</a></td>
<td>gowitness</td>
</tr>
<tr>
<td>一款jar包分析小工具</td>
<td><a href="https://github.com/4ra1n/jar-analyzer">https://github.com/4ra1n/jar-analyzer</a></td>
<td>jar-analyzer</td>
</tr>
</tbody></table>
<h1 id="漏洞利用工具"><a href="#漏洞利用工具" class="headerlink" title="漏洞利用工具"></a>漏洞利用工具</h1><h2 id="漏洞扫描框架-工具"><a href="#漏洞扫描框架-工具" class="headerlink" title="漏洞扫描框架/工具"></a>漏洞扫描框架/工具</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>高危漏洞精准检测与深度利用框架</td>
<td><a href="https://github.com/woodpecker-framework/woodpecker-framwork-release">https://github.com/woodpecker-framework/woodpecker-framwork-release</a></td>
<td>woodpecker-framwork</td>
</tr>
<tr>
<td>一款扩展性高的渗透测试框架渗透测试框架</td>
<td><a href="https://github.com/achuna33/MYExploit">https://github.com/achuna33/MYExploit</a></td>
<td>MYExploit</td>
</tr>
<tr>
<td>Web漏洞攻击框架</td>
<td><a href="https://github.com/Anonymous-ghost/AttackWebFrameworkTools">https://github.com/Anonymous-ghost/AttackWebFrameworkTools</a></td>
<td>AttackWebFrameworkTools</td>
</tr>
<tr>
<td>基于简单 YAML 的 DSL 的快速且可定制的漏洞扫描器。</td>
<td><a href="https://github.com/projectdiscovery/nuclei">https://github.com/projectdiscovery/nuclei</a></td>
<td>nuclei</td>
</tr>
<tr>
<td>afrog 是一款性能卓越、快速稳定、PoC 可定制化的漏洞扫描工具</td>
<td><a href="https://github.com/zan8in/afrog">https://github.com/zan8in/afrog</a></td>
<td>afrog</td>
</tr>
<tr>
<td>一款功能强大的安全评估工具</td>
<td><a href="https://github.com/chaitin/xray">https://github.com/chaitin/xray</a></td>
<td>Xray</td>
</tr>
<tr>
<td>网络安全测试工具</td>
<td><a href="https://github.com/gobysec/Goby">https://github.com/gobysec/Goby</a></td>
<td>Goby</td>
</tr>
<tr>
<td>开源的远程漏洞测试框架</td>
<td><a href="https://github.com/knownsec/pocsuite3">https://github.com/knownsec/pocsuite3</a></td>
<td>pocsuite3</td>
</tr>
<tr>
<td>全新的开源在线 poc 测试框架</td>
<td><a href="https://github.com/jweny/pocassist">https://github.com/jweny/pocassist</a></td>
<td>pocassist</td>
</tr>
<tr>
<td>是一款 web 漏洞扫描和验证工具</td>
<td><a href="https://github.com/zhzyker/vulmap">https://github.com/zhzyker/vulmap</a></td>
<td>Vulmap</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="中间件-应用漏洞利用工具"><a href="#中间件-应用漏洞利用工具" class="headerlink" title="中间件/应用漏洞利用工具"></a>中间件/应用漏洞利用工具</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>OA综合利用工具，集合将近20款OA漏洞批量扫描</td>
<td><a href="https://github.com/LittleBear4/OA-EXPTOOL">https://github.com/LittleBear4/OA-EXPTOOL</a></td>
<td>OA-EXPTOOL</td>
</tr>
<tr>
<td>综合高危漏洞利用工具</td>
<td><a href="https://github.com/Liqunkit/LiqunKit">https://github.com/Liqunkit/LiqunKit</a>_</td>
<td>LiqunKit</td>
</tr>
<tr>
<td>使用JAVAFX图形化界面检测对HVV中常见的重点CMS系统和OA系统的已公开的漏洞进行验证。</td>
<td><a href="https://github.com/ExpLangcn/HVVExploitApply">https://github.com/ExpLangcn/HVVExploitApply</a></td>
<td>HVVExploitApply</td>
</tr>
<tr>
<td>Spring系列漏洞利用工具</td>
<td><a href="https://github.com/SummerSec/SpringExploit">https://github.com/SummerSec/SpringExploit</a></td>
<td>SpringExploit</td>
</tr>
<tr>
<td>shiro 反序列 命令执行辅助检测工具</td>
<td><a href="https://github.com/wyzxxz/shiro_rce_tool">https://github.com/wyzxxz/shiro_rce_tool</a></td>
<td>shiro_rce_tool</td>
</tr>
<tr>
<td>shiro反序列化漏洞综合利用,包含（回显执行命令/注入内存马）修复原版中NoCC的问题</td>
<td><a href="https://github.com/SummerSec/ShiroAttack2">https://github.com/SummerSec/ShiroAttack2</a></td>
<td>ShiroAttack2</td>
</tr>
<tr>
<td>shiro反序列化漏洞综合利用,包含（回显执行命令/注入内存马）</td>
<td><a href="https://github.com/j1anFen/shiro_attack">https://github.com/j1anFen/shiro_attack</a></td>
<td>shiro_attack</td>
</tr>
<tr>
<td>Fastjson扫描器，可识别版本、依赖库、autoType状态等。</td>
<td><a href="https://github.com/a1phaboy/FastjsonScan">https://github.com/a1phaboy/FastjsonScan</a></td>
<td>FastjsonScan</td>
</tr>
<tr>
<td>FastjonExploit | Fastjson漏洞快速利用框架</td>
<td><a href="https://github.com/c0ny1/FastjsonExploit">https://github.com/c0ny1/FastjsonExploit</a></td>
<td>FastjsonExploit</td>
</tr>
<tr>
<td>fastjson_rce_tool fastjson命令执行自动化利用工具</td>
<td><a href="https://github.com/wyzxxz/fastjson_rce_tool">https://github.com/wyzxxz/fastjson_rce_tool</a></td>
<td>fastjson_rce_tool</td>
</tr>
<tr>
<td>fastjson一键命令执行</td>
<td><a href="https://github.com/mrknow001/fastjson_rec_exploit">https://github.com/mrknow001/fastjson_rec_exploit</a></td>
<td>fastjson_rec_exploit</td>
</tr>
<tr>
<td>Jboss（和 Java 反序列化漏洞）验证和利用工具</td>
<td><a href="https://github.com/joaomatosf/jexboss">https://github.com/joaomatosf/jexboss</a></td>
<td>exBoss</td>
</tr>
<tr>
<td>Weblogic漏洞利用图形化工具 支持注入内存马、一键上传webshell、命令执行</td>
<td><a href="https://github.com/sp4zcmd/WeblogicExploit-GUI">https://github.com/sp4zcmd/WeblogicExploit-GUI</a></td>
<td>WeblogicExploit-GUI</td>
</tr>
<tr>
<td>Weblogic一键漏洞检测工具，V1.5，更新时间：20200730</td>
<td><a href="https://github.com/rabbitmask/WeblogicScan">https://github.com/rabbitmask/WeblogicScan</a></td>
<td>WeblogicScan</td>
</tr>
<tr>
<td>weblogic 漏洞扫描工具。包含2020</td>
<td><a href="https://github.com/0xn0ne/weblogicScanner">https://github.com/0xn0ne/weblogicScanner</a></td>
<td>weblogicScanner</td>
</tr>
<tr>
<td>weblogic利用工具weblogic-framework</td>
<td><a href="https://github.com/0nise/weblogic-framework">https://github.com/0nise/weblogic-framework</a></td>
<td>weblogic-framework</td>
</tr>
<tr>
<td>woodpecker框架weblogic信息探测插件</td>
<td><a href="https://github.com/woodpecker-appstore/weblogic-infodetector">https://github.com/woodpecker-appstore/weblogic-infodetector</a></td>
<td>weblogic-infodetector</td>
</tr>
<tr>
<td>Dubbo反序列化一键快速攻击测试工具</td>
<td><a href="https://github.com/threedr3am/dubbo-exp">https://github.com/threedr3am/dubbo-exp</a></td>
<td>dubbo-exp</td>
</tr>
<tr>
<td>jenkins-attack-framework 针对 Jenkins 的攻击框架</td>
<td><a href="https://github.com/Accenture">https://github.com/Accenture</a></td>
<td>jenkins-attack-framework</td>
</tr>
<tr>
<td>Jiraffe 是为利用 Jira 实例而编写的半自动安全工具。</td>
<td><a href="https://github.com/0x48piraj/Jiraffe">https://github.com/0x48piraj/Jiraffe</a></td>
<td>Jiraffe</td>
</tr>
<tr>
<td>STS2G Struts2漏洞扫描利用工具 - Golang版</td>
<td><a href="https://github.com/xwuyi/STS2G">https://github.com/xwuyi/STS2G</a></td>
<td>STS2G</td>
</tr>
<tr>
<td>Struts2-Scan Struts2全漏洞扫描利用工具</td>
<td><a href="https://github.com/HatBoy/Struts2-Scan">https://github.com/HatBoy/Struts2-Scan</a></td>
<td>Struts2-Scan</td>
</tr>
<tr>
<td>log4j漏洞利用工具</td>
<td><a href="https://github.com/kozmer/log4j-shell-poc">https://github.com/kozmer/log4j-shell-poc</a></td>
<td>log4j-shell-poc</td>
</tr>
<tr>
<td>Confluence-OGNL一键注入内存shell</td>
<td><a href="https://github.com/BeichenDream/CVE-2022-26134-Godzilla-MEMSHELL">https://github.com/BeichenDream/CVE-2022-26134-Godzilla-MEMSHELL</a></td>
<td>Confluence</td>
</tr>
<tr>
<td>YApi接口管理平台远程命令执行</td>
<td><a href="https://github.com/Tas9er/YApiRCE">https://github.com/Tas9er/YApiRCE</a></td>
<td>YApiRCE</td>
</tr>
<tr>
<td>一款针对Vcenter的综合利用工具，包含目前最主流的CVE-2021-21972、CVE-2021-21985以及CVE-2021-22005以及log4j，提供一键上传webshell，命令执行或者上传公钥使用SSH免密连接</td>
<td><a href="https://github.com/Schira4396/VcenterKiller">https://github.com/Schira4396/VcenterKiller</a></td>
<td>VcenterKiller</td>
</tr>
</tbody></table>
<h2 id="重点cms利用工具"><a href="#重点cms利用工具" class="headerlink" title="重点cms利用工具"></a>重点cms利用工具</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>综合高危漏洞利用工具</td>
<td><a href="https://github.com/Liqunkit/LiqunKit">https://github.com/Liqunkit/LiqunKit</a>_</td>
<td>LiqunKit</td>
</tr>
<tr>
<td>致远OA综合利用工具</td>
<td><a href="https://github.com/Summer177/seeyon_exp">https://github.com/Summer177/seeyon_exp</a></td>
<td>seeyon_exp</td>
</tr>
<tr>
<td>致远OA综合利用工具GUI-V1.0</td>
<td><a href="https://github.com/God-Ok/SeeyonExploit-GUI">https://github.com/God-Ok/SeeyonExploit-GUI</a></td>
<td>SeeyonExploit-GUI</td>
</tr>
<tr>
<td>通达OA综合利用工具</td>
<td><a href="https://github.com/xinyu2428/TDOA_RCE">https://github.com/xinyu2428/TDOA_RCE</a></td>
<td>TDOA_RCE</td>
</tr>
<tr>
<td>蓝凌OA漏洞利用工具/前台无条件RCE/文件写入</td>
<td><a href="https://github.com/yuanhaiGreg/LandrayExploit">https://github.com/yuanhaiGreg/LandrayExploit</a></td>
<td>LandrayExploit</td>
</tr>
<tr>
<td>泛微OA漏洞综合利用脚本</td>
<td><a href="https://github.com/z1un/weaver_exp">https://github.com/z1un/weaver_exp</a></td>
<td>weaver_exp</td>
</tr>
<tr>
<td>锐捷网络EG易网关RCE批量安全检测</td>
<td><a href="https://github.com/Tas9er/EgGateWayGetShell">https://github.com/Tas9er/EgGateWayGetShell</a></td>
<td>EgGateWayGetShell</td>
</tr>
<tr>
<td>CMSmap 针对流行CMS进行安全扫描的工具</td>
<td><a href="https://github.com/Dionach/CMSmap">https://github.com/Dionach/CMSmap</a></td>
<td>CMSmap</td>
</tr>
<tr>
<td>使用Go开发的WordPress漏洞扫描工具</td>
<td><a href="https://github.com/blackbinn/wprecon">https://github.com/blackbinn/wprecon</a></td>
<td>wprecon</td>
</tr>
<tr>
<td>一个 Ruby 框架，旨在帮助对 WordPress 系统进行渗透测试</td>
<td><a href="https://github.com/rastating/wordpress-exploit-framework">https://github.com/rastating/wordpress-exploit-framework</a></td>
<td>wordpress-exploit-framework</td>
</tr>
<tr>
<td>WPScan WordPress 安全扫描器</td>
<td><a href="https://github.com/wpscanteam/wpscan">https://github.com/wpscanteam/wpscan</a></td>
<td>wpscan</td>
</tr>
<tr>
<td>WPForce Wordpress 攻击套件</td>
<td><a href="https://github.com/n00py/WPForce">https://github.com/n00py/WPForce</a></td>
<td>WPForce</td>
</tr>
<tr>
<td>漏洞POC基本适用ThinkPHP全版本漏洞</td>
<td><a href="https://github.com/zangcc/Aazhen-v3.1">https://github.com/zangcc/Aazhen-v3.1</a></td>
<td>Aazhen-v3.1</td>
</tr>
<tr>
<td>Thinkphp(GUI)漏洞利用工具，支持各版本TP漏洞检测，命令执行，getshell。</td>
<td><a href="https://github.com/Lotus6/ThinkphpGUI">https://github.com/Lotus6/ThinkphpGUI</a></td>
<td>ThinkphpGUI</td>
</tr>
<tr>
<td>ThinkPHP 漏洞 综合利用工具, 图形化界面, 命令执行, 一键getshell, 批量检测, 日志遍历, session包含, 宝塔绕过</td>
<td><a href="https://github.com/bewhale/thinkphp_gui_tools">https://github.com/bewhale/thinkphp_gui_tools</a></td>
<td>thinkphp_gui_tools</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="信息泄露利用工具"><a href="#信息泄露利用工具" class="headerlink" title="信息泄露利用工具"></a>信息泄露利用工具</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>六大云存储，泄露利用检测工具</td>
<td><a href="https://github.com/UzJu/Cloud-Bucket-Leak-Detection-Tools">https://github.com/UzJu/Cloud-Bucket-Leak-Detection-Tools</a></td>
<td>Cloud-Bucket-Leak-Detection-Tools</td>
</tr>
<tr>
<td>AK资源管理工具，阿里云/腾讯云 AccessKey AccessKeySecret</td>
<td><a href="https://github.com/wyzxxz/aksk_tool">https://github.com/wyzxxz/aksk_tool</a></td>
<td>aksk_tool</td>
</tr>
<tr>
<td>swagger-exp Swagger  REST API 信息泄露利用工具</td>
<td><a href="https://github.com/lijiejie/swagger-exp">https://github.com/lijiejie/swagger-exp</a></td>
<td>swagger-exp</td>
</tr>
<tr>
<td>swagger-hack 自动化爬取并测试所有swagger-ui.html接口</td>
<td><a href="https://github.com/jayus0821/swagger-hack">https://github.com/jayus0821/swagger-hack</a></td>
<td>swagger-hack</td>
</tr>
<tr>
<td>heapdump敏感信息查询工具</td>
<td><a href="https://github.com/wyzxxz/heapdump_tool">https://github.com/wyzxxz/heapdump_tool</a></td>
<td>heapdump_tool</td>
</tr>
<tr>
<td>Packer Fuzzer  针对Webpack等前端打包工具所构造的网站进行检测的扫描工具</td>
<td><a href="https://github.com/rtcatc/Packer-Fuzzer">https://github.com/rtcatc/Packer-Fuzzer</a></td>
<td>Packer-Fuzzer</td>
</tr>
<tr>
<td>.git源代码泄露利用工具</td>
<td><a href="https://github.com/BugScanTeam/GitHack">https://github.com/BugScanTeam/GitHack</a></td>
<td>GitHack</td>
</tr>
<tr>
<td>.cvs源代码泄露利用工具</td>
<td><a href="https://github.com/kost/dvcs-ripper.git">https://github.com/kost/dvcs-ripper.git</a></td>
<td>dvcs-ripper</td>
</tr>
<tr>
<td>.DS_store文件泄露利用工具</td>
<td><a href="https://github.com/lijiejie/ds_store_exp">https://github.com/lijiejie/ds_store_exp</a></td>
<td>ds_store_exp</td>
</tr>
<tr>
<td>SvnExploit支持SVN源代码泄露全版本Dump源码</td>
<td><a href="https://github.com/admintony/svnExploit">https://github.com/admintony/svnExploit</a></td>
<td>svnExploit</td>
</tr>
<tr>
<td>git-dumper 从网站转储git存储库的工具</td>
<td><a href="https://github.com/arthaud/git-dumper">https://github.com/arthaud/git-dumper</a></td>
<td>git-dumper</td>
</tr>
<tr>
<td>GitDorker  通过使用大型的dorks库来从GitHub抓取敏感信息</td>
<td><a href="https://github.com/obheda12/GitDorker">https://github.com/obheda12/GitDorker</a></td>
<td>GitDorker</td>
</tr>
<tr>
<td>从JavaScript文件中提取敏感信息</td>
<td><a href="https://github.com/m4ll0k/SecretFinder">https://github.com/m4ll0k/SecretFinder</a></td>
<td>SecretFinder</td>
</tr>
<tr>
<td>功能比较多的一个JavaScript侦查自动化脚本</td>
<td><a href="https://github.com/KathanP19/JSFScan.sh">https://github.com/KathanP19/JSFScan.sh</a></td>
<td>JSFScan</td>
</tr>
<tr>
<td>子域名接管漏洞检测工具，支持30+云服务托管检测</td>
<td><a href="https://github.com/Ice3man543/SubOver">https://github.com/Ice3man543/SubOver</a></td>
<td>SubOver</td>
</tr>
</tbody></table>
<h2 id="数据库利用工具"><a href="#数据库利用工具" class="headerlink" title="数据库利用工具"></a>数据库利用工具</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>MDUT 2.0 数据库利用工具</td>
<td><a href="https://github.com/SafeGroceryStore/MDUT">https://github.com/SafeGroceryStore/MDUT</a></td>
<td>MDUT</td>
</tr>
<tr>
<td>综合高危漏洞利用工具(包含各大数据库)</td>
<td><a href="https://github.com/Liqunkit/LiqunKit">https://github.com/Liqunkit/LiqunKit</a>_</td>
<td>LiqunKit</td>
</tr>
<tr>
<td>sqlserver利用工具</td>
<td><a href="https://github.com/uknowsec/SharpSQLTools">https://github.com/uknowsec/SharpSQLTools</a></td>
<td>SharpSQLTools</td>
</tr>
<tr>
<td>通过套接字重用通过受损的 Microsoft SQL Server  在受限环境中执行横向移动</td>
<td><a href="https://github.com/blackarrowsec/mssqlproxy">https://github.com/blackarrowsec/mssqlproxy</a></td>
<td>mssqlproxy</td>
</tr>
<tr>
<td>ODAT：Oracle 数据库攻击工具</td>
<td><a href="https://github.com/quentinhardy/odat">https://github.com/quentinhardy/odat</a></td>
<td>ODAT</td>
</tr>
<tr>
<td>Redis未授权访问漏洞利用工具</td>
<td><a href="https://github.com/n0b0dyCN/redis-rogue-server">https://github.com/n0b0dyCN/redis-rogue-server</a></td>
<td>redis-rogue-server</td>
</tr>
<tr>
<td>Redis未授权访问漏洞利用工具2</td>
<td><a href="https://github.com/Ridter/redis-rce">https://github.com/Ridter/redis-rce</a></td>
<td>redis-rce</td>
</tr>
<tr>
<td>Redis 漏洞利用工具</td>
<td><a href="https://github.com/yuyan-sec/RedisEXP">https://github.com/yuyan-sec/RedisEXP</a></td>
<td>RedisEXP</td>
</tr>
<tr>
<td>redis主从复制rce的go版本</td>
<td><a href="https://github.com/zyylhn/redis_rce">https://github.com/zyylhn/redis_rce</a></td>
<td>redis_rce</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="爆破利用工具"><a href="#爆破利用工具" class="headerlink" title="爆破利用工具"></a>爆破利用工具</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>还是推荐fscan吧，还是还用，更新也快</td>
<td><a href="https://github.com/shadow1ng/fscan">https://github.com/shadow1ng/fscan</a></td>
<td>fscan</td>
</tr>
<tr>
<td>爆破神器，懂得都懂</td>
<td><a href="https://github.com/vanhauser-thc/thc-hydra">https://github.com/vanhauser-thc/thc-hydra</a></td>
<td>hydra</td>
</tr>
<tr>
<td>超级弱口令检查工具是一款Windows平台的弱口令审计工具</td>
<td><a href="https://github.com/shack2/SNETCracker">https://github.com/shack2/SNETCracker</a></td>
<td>超级弱口令</td>
</tr>
<tr>
<td>集合了fscan和kscan等优秀工具功能的扫描爆破工具。</td>
<td><a href="https://github.com/i11us0ry/goon">https://github.com/i11us0ry/goon</a></td>
<td>goon</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="全网字典收集"><a href="#全网字典收集" class="headerlink" title="全网字典收集"></a>全网字典收集</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>渗透测试、SRC漏洞挖掘、爆破、Fuzzing等字典收集项目</td>
<td><a href="https://github.com/insightglacier/Dictionary-Of-Pentesting">https://github.com/insightglacier/Dictionary-Of-Pentesting</a></td>
<td>Dictionary-Of-Pentesting</td>
</tr>
<tr>
<td>Fuzz 字典,一个就够了</td>
<td><a href="https://github.com/TheKingOfDuck/fuzzDicts">https://github.com/TheKingOfDuck/fuzzDicts</a></td>
<td>Web Pentesting</td>
</tr>
<tr>
<td>Web 模糊测试字典与一些Payloads</td>
<td><a href="https://github.com/gh0stkey/Web-Fuzzing-Box">https://github.com/gh0stkey/Web-Fuzzing-Box</a></td>
<td>Web Fuzzing Box</td>
</tr>
<tr>
<td>上传漏洞fuzz字典生成脚本</td>
<td><a href="https://github.com/c0ny1/upload-fuzz-dic-builder">https://github.com/c0ny1/upload-fuzz-dic-builder</a></td>
<td>upload-fuzz-dic-builder</td>
</tr>
<tr>
<td>安全评估期间使用的多种类型列表的集合</td>
<td><a href="https://github.com/danielmiessler/SecLists">https://github.com/danielmiessler/SecLists</a></td>
<td>SecLists</td>
</tr>
<tr>
<td>渗透测试仪和Bug赏金猎人的 Payload 库</td>
<td><a href="https://github.com/sh377c0d3/Payloads">https://github.com/sh377c0d3/Payloads</a></td>
<td>Payloads</td>
</tr>
<tr>
<td>基于实战沉淀下的各种弱口令字典</td>
<td><a href="https://github.com/fuzz-security/SuperWordlist">https://github.com/fuzz-security/SuperWordlist</a></td>
<td>SuperWordlist</td>
</tr>
<tr>
<td>各类漏洞的 TOP25 参数字典</td>
<td><a href="https://github.com/lutfumertceylan/top25-parameter">https://github.com/lutfumertceylan/top25-parameter</a></td>
<td>top25-parameter</td>
</tr>
<tr>
<td>提取收集以往泄露的密码中符合条件的强弱密码</td>
<td><a href="https://github.com/r35tart/RW_Password">https://github.com/r35tart/RW_Password</a></td>
<td>RW_Password</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="常规漏洞利用工具"><a href="#常规漏洞利用工具" class="headerlink" title="常规漏洞利用工具"></a>常规漏洞利用工具</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>DalFox 是一款功能强大的开源 XSS 扫描工具和参数分析器、实用工具</td>
<td><a href="https://github.com/hahwul/dalfox">https://github.com/hahwul/dalfox</a></td>
<td>dalfox</td>
</tr>
<tr>
<td>基于DOM的快速XSS漏洞扫描程序</td>
<td><a href="https://github.com/dwisiswant0/findom-xss">https://github.com/dwisiswant0/findom-xss</a></td>
<td>findom-xss</td>
</tr>
<tr>
<td>很常用的XSS平台</td>
<td><a href="https://github.com/beefproject/beef">https://github.com/beefproject/beef</a></td>
<td>beef</td>
</tr>
<tr>
<td>Fast CRLF injection scanning tool</td>
<td><a href="https://github.com/Nefcore/CRLFsuite">https://github.com/Nefcore/CRLFsuite</a></td>
<td>CRLFsuite</td>
</tr>
<tr>
<td>快速 CORS 错误配置漏洞扫描程序</td>
<td><a href="https://github.com/chenjj/CORScanner">https://github.com/chenjj/CORScanner</a></td>
<td>CORScanner</td>
</tr>
<tr>
<td>xxe利用工具</td>
<td><a href="https://github.com/BuffaloWill/oxml_xxe">https://github.com/BuffaloWill/oxml_xxe</a></td>
<td>oxml_xxe</td>
</tr>
<tr>
<td>xxe利用工具2</td>
<td><a href="https://github.com/whitel1st/docem">https://github.com/whitel1st/docem</a></td>
<td>docem</td>
</tr>
<tr>
<td>UEditor编辑器批量GetShell / Code By:Tas9er</td>
<td><a href="https://github.com/Tas9er/UEditorGetShell">https://github.com/Tas9er/UEditorGetShell</a></td>
<td>UEditorGetShell</td>
</tr>
<tr>
<td>子域名接管工具</td>
<td><a href="https://github.com/michenriksen/aquatone">https://github.com/michenriksen/aquatone</a></td>
<td>aquatone</td>
</tr>
<tr>
<td>用于查找常见的Nginx错误配置和漏洞。</td>
<td><a href="https://github.com/stark0de/nginxpwner">https://github.com/stark0de/nginxpwner</a></td>
<td>nginxpwner</td>
</tr>
<tr>
<td>安卓应用层抓包通杀脚本</td>
<td><a href="https://github.com/r0ysue/r0capture">https://github.com/r0ysue/r0capture</a></td>
<td>r0capture</td>
</tr>
<tr>
<td>具有交互式界面的自动 SSTI 检测工具</td>
<td><a href="https://github.com/vladko312/SSTImap">https://github.com/vladko312/SSTImap</a></td>
<td>SSTImap</td>
</tr>
<tr>
<td>A simple SSRF-testing sheriff written in Go</td>
<td><a href="https://github.com/teknogeek/ssrf-sheriff">https://github.com/teknogeek/ssrf-sheriff</a></td>
<td>ssrf-sheriff</td>
</tr>
<tr>
<td>文件包含利用工具</td>
<td><a href="https://github.com/mzfr/liffy">https://github.com/mzfr/liffy</a></td>
<td>liffy</td>
</tr>
</tbody></table>
<h2 id="反序列化利用工具"><a href="#反序列化利用工具" class="headerlink" title="反序列化利用工具"></a>反序列化利用工具</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>jndi注入工具v1.4</td>
<td><a href="https://github.com/WhiteHSBG/JNDIExploit">https://github.com/WhiteHSBG/JNDIExploit</a></td>
<td>JNDIExploit</td>
</tr>
<tr>
<td>JNDI服务利用工具 RMI/LDAP，支持部分场景回显、内存shell，高版本JDK场景下利用等</td>
<td><a href="https://github.com/wyzxxz/jndi_tool">https://github.com/wyzxxz/jndi_tool</a></td>
<td>jndi_tool</td>
</tr>
<tr>
<td>反序列化利用工具</td>
<td><a href="https://github.com/frohoff/ysoserial">https://github.com/frohoff/ysoserial</a></td>
<td>ysoserial</td>
</tr>
<tr>
<td>项目为 ysoserial [su18] 专版，取名为 ysuserial ，在原项目 <a href="https://github.com/frohoff/ysoserial">ysoserial</a> 基础上魔改而来</td>
<td><a href="https://github.com/su18/ysoserial/">https://github.com/su18/ysoserial/</a></td>
<td>ysuserial</td>
</tr>
<tr>
<td>ysoserial修改版，着重修改<code>ysoserial.payloads.util.Gadgets.createTemplatesImpl</code>使其可以通过引入自定义class的形式来执行命令、内存马、反序列化回显</td>
<td><a href="https://github.com/Y4er/ysoserial">https://github.com/Y4er/ysoserial</a></td>
<td>ysoserial修改版</td>
</tr>
</tbody></table>
<h2 id="代码审计辅助工具"><a href="#代码审计辅助工具" class="headerlink" title="代码审计辅助工具"></a>代码审计辅助工具</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>开源的被动式交互式安全测试(IAST)产品</td>
<td><a href="https://github.com/HXSecurity/DongTai">https://github.com/HXSecurity/DongTai</a></td>
<td>DongTai</td>
</tr>
<tr>
<td>一款基于CodeQL实现的自动化代码审计工具，目前仅支持java语言，后期会增加对其他语言的支持。</td>
<td><a href="https://github.com/webraybtl/CodeQLpy">https://github.com/webraybtl/CodeQLpy</a></td>
<td>CodeQLpy</td>
</tr>
<tr>
<td>免费开源的语义代码分析引擎和查询工具</td>
<td><a href="https://github.com/github/codeql-cli-binaries">https://github.com/github/codeql-cli-binaries</a></td>
<td>CodeQL</td>
</tr>
<tr>
<td>Java Web应用安全漏洞自动化发现-idea插件</td>
<td><a href="https://github.com/find-sec-bugs/find-sec-bugs/wiki/IntelliJ-Tutorial">https://github.com/find-sec-bugs/find-sec-bugs/wiki/IntelliJ-Tutorial</a></td>
<td>FindSecBugs</td>
</tr>
<tr>
<td>IDEA依赖检查插件</td>
<td><a href="https://github.com/jeremylong/DependencyCheck">https://github.com/jeremylong/DependencyCheck</a></td>
<td>DependencyCheck</td>
</tr>
<tr>
<td>TABBY 是一个基于<a href="https://github.com/soot-oss/soot">Soot</a>的 Java 代码分析工具。</td>
<td><a href="https://github.com/wh1t3p1g/tabby">https://github.com/wh1t3p1g/tabby</a></td>
<td>tabby</td>
</tr>
<tr>
<td>查找PHP代码漏洞工具</td>
<td><a href="https://github.com/ecriminal/phpvuln">https://github.com/ecriminal/phpvuln</a></td>
<td>phpvuln</td>
</tr>
<tr>
<td>一款不错的静态源代码分析工具，主要用来挖掘PHP程序的漏洞。</td>
<td><a href="http://rips-scanner.sourceforge.net/">http://rips-scanner.sourceforge.net</a></td>
<td>RIPS</td>
</tr>
<tr>
<td>源代码静态分析工具，支持Java、PHP、C#、Python、Go等27种编程语言，而且能够集成在IDE、Jenkins、Git等服务。</td>
<td><a href="https://www.sonarqube.org/">https://www.sonarqube.org</a></td>
<td>SonarQube</td>
</tr>
<tr>
<td>一种适用于 C++、C#、VB、PHP、Java、PL/SQL 和 COBOL 的自动化代码安全审查工具。</td>
<td><a href="https://sourceforge.net/projects/visualcodegrepp/">https://sourceforge.net/projects/visualcodegrepp/</a></td>
<td>VCG(VisualCodeGrepper)</td>
</tr>
<tr>
<td>一个专门用于查找Python代码中常见安全问题的工具。</td>
<td><a href="https://github.com/PyCQA/bandit">https://github.com/PyCQA/bandit</a></td>
<td>bandit</td>
</tr>
<tr>
<td>一个静态代码脆弱性检测系统，支持java源码的审计</td>
<td><a href="https://github.com/zsdlove/Hades">https://github.com/zsdlove/Hades</a></td>
<td>Hades</td>
</tr>
</tbody></table>
<h1 id="内网渗透工具"><a href="#内网渗透工具" class="headerlink" title="内网渗透工具"></a>内网渗透工具</h1><h2 id="webshell-amp-amp-内存马-amp-amp-shell"><a href="#webshell-amp-amp-内存马-amp-amp-shell" class="headerlink" title="webshell&amp;&amp;内存马&amp;&amp;shell"></a>webshell&amp;&amp;内存马&amp;&amp;shell</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>反弹shell就用这个，懂得都懂</td>
<td><a href="https://github.com/WangYihang/Platypus">https://github.com/WangYihang/Platypus</a></td>
<td>Platypus</td>
</tr>
<tr>
<td>哥斯拉</td>
<td><a href="https://github.com/BeichenDream/Godzilla">https://github.com/BeichenDream/Godzilla</a></td>
<td>Godzilla</td>
</tr>
<tr>
<td>“冰蝎”动态二进制加密网站管理客户端</td>
<td><a href="https://github.com/rebeyond/Behinder">https://github.com/rebeyond/Behinder</a></td>
<td>Behinder</td>
</tr>
<tr>
<td>中国蚁剑是一款开源的跨平台网站管理工具</td>
<td><a href="https://github.com/AntSwordProject/antSword">https://github.com/AntSwordProject/antSword</a></td>
<td>antSword</td>
</tr>
<tr>
<td>一句话WEB端管理工具</td>
<td><a href="https://github.com/boy-hack/WebshellManager">https://github.com/boy-hack/WebshellManager</a></td>
<td>WebshellManager</td>
</tr>
<tr>
<td>跨平台版中国菜刀</td>
<td><a href="https://github.com/Chora10/Cknife">https://github.com/Chora10/Cknife</a></td>
<td>Cknife</td>
</tr>
<tr>
<td>Java内存马注入工具</td>
<td><a href="https://github.com/WisteriaTiger/JundeadShell">https://github.com/WisteriaTiger/JundeadShell</a></td>
<td>JundeadShell</td>
</tr>
<tr>
<td>拿来即用的Tomcat内存马</td>
<td><a href="https://github.com/ce-automne/TomcatMemShell">https://github.com/ce-automne/TomcatMemShell</a></td>
<td>TomcatMemShell</td>
</tr>
<tr>
<td>Memory WebShell Generator</td>
<td><a href="https://github.com/hosch3n/msmap">https://github.com/hosch3n/msmap</a></td>
<td>msmap</td>
</tr>
<tr>
<td>用于生成各类免杀webshell</td>
<td><a href="https://github.com/cseroad/Webshell_Generate">https://github.com/cseroad/Webshell_Generate</a></td>
<td>Webshell_Generate</td>
</tr>
<tr>
<td>该工具易于使用，它生成自己的 PowerShell 有效负载并支持加密 (ssl)。</td>
<td><a href="https://github.com/t3l3machus/hoaxshell">https://github.com/t3l3machus/hoaxshell</a></td>
<td>hoaxshell</td>
</tr>
<tr>
<td>cs4.4修改去特征狗狗版(美化ui,去除特征,自带bypass核晶截图等..)</td>
<td><a href="https://github.com/TryGOTry/DogCs4.4/tree/dogcs_v2.1">https://github.com/TryGOTry/DogCs4.4/tree/dogcs_v2.1</a></td>
<td>dogcs</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="提权项目"><a href="#提权项目" class="headerlink" title="提权项目"></a>提权项目</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>Linux自动提权</td>
<td><a href="https://github.com/liamg/traitor">https://github.com/liamg/traitor</a></td>
<td>traitor</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="内网收集工具"><a href="#内网收集工具" class="headerlink" title="内网收集工具"></a>内网收集工具</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>Fscan 一款内网综合扫描工具，方便一键自动化、全方位漏扫扫描。</td>
<td><a href="https://github.com/shadow1ng/fscan">https://github.com/shadow1ng/fscan</a></td>
<td>fscan</td>
</tr>
<tr>
<td>一款快速探测内网主机信息工具（深信服深蓝实验室天威战队强力驱动）</td>
<td><a href="https://github.com/shmilylty/SharpHostInfo">https://github.com/shmilylty/SharpHostInfo</a></td>
<td>SharpHostInfo</td>
</tr>
<tr>
<td>一款快速探测内网可达网段工具（深信服深蓝实验室天威战队强力驱动）</td>
<td><a href="https://github.com/shmilylty/netspy">https://github.com/shmilylty/netspy</a></td>
<td>netspy</td>
</tr>
<tr>
<td><strong>ATAttack</strong>是一款后渗透半自动化侦察工具，它从进攻性和防御性安全角度执行许多面向安全性的主机调查“安全检查”。</td>
<td><a href="https://github.com/c1y2m3/ATAttack">https://github.com/c1y2m3/ATAttack</a></td>
<td>ATAttack</td>
</tr>
</tbody></table>
<h2 id="域渗透工具"><a href="#域渗透工具" class="headerlink" title="域渗透工具"></a>域渗透工具</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>检测域环境内，域机器的本地管理组成员是否存在弱口令和通用口令，对域用户的权限分配以及域内委派查询</td>
<td><a href="https://github.com/0x727/ShuiYing_0x727">https://github.com/0x727/ShuiYing_0x727</a></td>
<td>SchTask_0x727</td>
</tr>
<tr>
<td>一款域渗透扫描工具，方便一键自动化、全方位的信息收集及扫描域提权漏洞。支持常见的域信息收集、Zerologon、Nopac、Spooler、MS17010扫描等功能。</td>
<td><a href="https://github.com/lele8/mscan">https://github.com/lele8/mscan</a></td>
<td>mscan</td>
</tr>
<tr>
<td>一个强大的内网域渗透提权分析工具，构建于 Linkurious 之上</td>
<td><a href="https://github.com/BloodHoundAD/BloodHound">https://github.com/BloodHoundAD/BloodHound</a></td>
<td>BloodHound</td>
</tr>
</tbody></table>
<h2 id="横向移动工具"><a href="#横向移动工具" class="headerlink" title="横向移动工具"></a>横向移动工具</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>Fscan 一款内网综合扫描工具，方便一键自动化、全方位漏扫扫描。</td>
<td><a href="https://github.com/shadow1ng/fscan">https://github.com/shadow1ng/fscan</a></td>
<td>fscan</td>
</tr>
<tr>
<td>Ladon一款用于大型网络渗透的多线程插件化综合扫描神器</td>
<td><a href="https://github.com/k8gege/Ladon">https://github.com/k8gege/Ladon</a></td>
<td>Ladon</td>
</tr>
<tr>
<td>可针对指定IP段、资产清单、存活网段自动化进行端口扫描以及TCP指纹识别和Banner抓取</td>
<td><a href="https://github.com/lcvvvv/kscan">https://github.com/lcvvvv/kscan</a></td>
<td>kscan</td>
</tr>
<tr>
<td>sharpwmi基于rpc的横向移动工具，具有上传和执行命令功能</td>
<td><a href="https://github.com/QAX-A-Team/sharpwmi">https://github.com/QAX-A-Team/sharpwmi</a></td>
<td>sharpwmi</td>
</tr>
<tr>
<td>常见横向移动与域控权限维持方法</td>
<td><a href="https://xz.aliyun.com/t/9382">https://xz.aliyun.com/t/9382</a></td>
<td>方法论</td>
</tr>
<tr>
<td>一款比较好的CS后渗透模块插件</td>
<td><a href="https://github.com/pandasec888/taowu-cobalt-strike">https://github.com/pandasec888/taowu-cobalt-strike</a></td>
<td>taowu-cobalt-strike</td>
</tr>
<tr>
<td>一款CS后渗透模块插件，让大家使用一款插件就够了</td>
<td><a href="https://github.com/d3ckx1/OLa">https://github.com/d3ckx1/OLa</a></td>
<td>OLa</td>
</tr>
<tr>
<td>绕过虚拟机登录验证屏幕的工具</td>
<td><a href="https://github.com/hzphreak/VMInjector">https://github.com/hzphreak/VMInjector</a></td>
<td>VMInjector</td>
</tr>
<tr>
<td>WMIHACKER是一款免杀横向渗透远程命令执行工具。</td>
<td><a href="https://github.com/rootclay/WMIHACKER">https://github.com/rootclay/WMIHACKER</a></td>
<td>WMIHACKER</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="密码提取工具"><a href="#密码提取工具" class="headerlink" title="密码提取工具"></a>密码提取工具</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>Mimikatz  Windows 密码抓取神器</td>
<td><a href="https://github.com/gentilkiwi/mimikatz">https://github.com/gentilkiwi/mimikatz</a></td>
<td>mimikatz</td>
</tr>
<tr>
<td>各种密码提取</td>
<td><a href="https://github.com/kerbyj/goLazagne">https://github.com/kerbyj/goLazagne</a></td>
<td>goLazagne</td>
</tr>
<tr>
<td>用于读取常用程序密码，如Navicat、TeamViewer、FileZilla、WinSCP等</td>
<td><a href="https://github.com/RowTeam/SharpDecryptPwd">https://github.com/RowTeam/SharpDecryptPwd</a></td>
<td>SharpDecryptPwd</td>
</tr>
<tr>
<td>Xshell，Xftp密码解密工具</td>
<td><a href="https://github.com/JDArmy/SharpXDecrypt">https://github.com/JDArmy/SharpXDecrypt</a></td>
<td>SharpXDecrypt</td>
</tr>
<tr>
<td>解密浏览器数据（密码|历史记录|Cookie|书签 | 信用卡 | 下载记录）的导出工具，支持全平台主流浏览器。</td>
<td><a href="https://github.com/moonD4rk/HackBrowserData/">https://github.com/moonD4rk/HackBrowserData/</a></td>
<td>HackBrowserData</td>
</tr>
<tr>
<td>一款针对向日葵的识别码和验证码提取工具</td>
<td><a href="https://github.com/wafinfo/Sunflower_get_Password">https://github.com/wafinfo/Sunflower_get_Password</a></td>
<td>Sunflower_get_Password</td>
</tr>
<tr>
<td>一键辅助抓取360安全浏览器密码的CobaltStrike脚本以及解密小工具</td>
<td><a href="https://github.com/hayasec/360SafeBrowsergetpass">https://github.com/hayasec/360SafeBrowsergetpass</a></td>
<td>360SafeBrowsergetpass</td>
</tr>
<tr>
<td>BrowserGhost  抓取浏览器密码的工具</td>
<td><a href="https://github.com/QAX-A-Team/BrowserGhost">https://github.com/QAX-A-Team/BrowserGhost</a></td>
<td>BrowserGhost</td>
</tr>
<tr>
<td>win-brute-logon  无需权限破解任何 Microsoft Windows 用户密码</td>
<td><a href="https://github.com/DarkCoderSc/win-brute-logon">https://github.com/DarkCoderSc/win-brute-logon</a></td>
<td>win-brute-logon</td>
</tr>
<tr>
<td>TeamViewer：Bypass杀软 获取 Teamview 密码的工具</td>
<td><a href="https://github.com/wafinfo/TeamViewer">https://github.com/wafinfo/TeamViewer</a></td>
<td>TeamViewer</td>
</tr>
<tr>
<td>Xdecrypt Xshell  Xftp 密码解密</td>
<td><a href="https://github.com/dzxs/Xdecrypt">https://github.com/dzxs/Xdecrypt</a></td>
<td>Xdecrypt</td>
</tr>
<tr>
<td>微信客户端取证，可获取用户个人信息(昵称/账号/手机/邮箱/数据库密钥(用来解密聊天记录))；支持获取多用户信息</td>
<td><a href="https://github.com/AdminTest0/SharpWxDump">https://github.com/AdminTest0/SharpWxDump</a></td>
<td>SharpWxDump</td>
</tr>
<tr>
<td>FakeLogonScreen 是一个伪造 Windows 登录屏幕以获取用户密码的实用程序。输入的密码将根据 Active Directory 或本地计算机进行验证，以确保其正确，然后显示到控制台或保存到磁盘。</td>
<td><a href="https://github.com/bitsadmin/fakelogonscreen">https://github.com/bitsadmin/fakelogonscreen</a></td>
<td>fakelogonscreen</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="隧道代理工具"><a href="#隧道代理工具" class="headerlink" title="隧道代理工具"></a>隧道代理工具</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>全平台代理工具，支持多种socks协议</td>
<td><a href="https://www.proxifier.com/">https://www.proxifier.com/</a></td>
<td>proxifier</td>
</tr>
<tr>
<td>专注于内网穿透的高性能的反向代理应用</td>
<td><a href="https://github.com/fatedier/frp">https://github.com/fatedier/frp</a></td>
<td>frp</td>
</tr>
<tr>
<td>轻量级、高性能、功能强大的内网穿透代理服务器</td>
<td><a href="https://github.com/ehang-io/nps">https://github.com/ehang-io/nps</a></td>
<td>nps</td>
</tr>
<tr>
<td>改进的reGeorg版本</td>
<td><a href="https://github.com/L-codes/Neo-reGeorg">https://github.com/L-codes/Neo-reGeorg</a></td>
<td>Neo-reGeorg</td>
</tr>
<tr>
<td>是一款利用dns协议传输tcp数据的工具</td>
<td><a href="https://github.com/alex-sector/dns2tcp">https://github.com/alex-sector/dns2tcp</a></td>
<td>dns2tcp</td>
</tr>
<tr>
<td>是一个DNS隧道工具</td>
<td><a href="https://github.com/iagox86/dnscat2">https://github.com/iagox86/dnscat2</a></td>
<td>dnscat2</td>
</tr>
<tr>
<td>内网渗透代理、端口转发工具</td>
<td><a href="http://rootkiter.com/Termite/">http://rootkiter.com/Termite/</a></td>
<td>Termite</td>
</tr>
<tr>
<td>一个简单的 reverse ICMP shell</td>
<td><a href="https://github.com/inquisb/icmpsh">https://github.com/inquisb/icmpsh</a></td>
<td>icmpsh</td>
</tr>
<tr>
<td>正/反向代理，内网穿透，端口转发</td>
<td><a href="https://github.com/inconshreveable/ngrok">https://github.com/inconshreveable/ngrok</a></td>
<td>ngrok</td>
</tr>
<tr>
<td>pingtunnel 是把 tcp/udp/sock5 流量伪装成 icmp  流量进行转发的工具</td>
<td><a href="https://github.com/esrrhs/pingtunnel">https://github.com/esrrhs/pingtunnel</a></td>
<td>pingtunnel</td>
</tr>
<tr>
<td>pystinger - 一款使用webshell进行流量转发的出网工具</td>
<td><a href="https://github.com/FunnyWolf/pystinger">https://github.com/FunnyWolf/pystinger</a></td>
<td>pystinger</td>
</tr>
<tr>
<td>goproxy 一款轻量级、功能强大、高性能的多种代理工具</td>
<td><a href="https://github.com/snail007/goproxy">https://github.com/snail007/goproxy</a></td>
<td>goproxy</td>
</tr>
<tr>
<td>一款可以在不出网的环境下进行反向代理及cs上线的工具</td>
<td><a href="https://github.com/Daybr4ak/C2ReverseProxy">https://github.com/Daybr4ak/C2ReverseProxy</a></td>
<td>C2ReverseProxy</td>
</tr>
<tr>
<td>跨平台重构了Cobaltstrike Beacon，目前实现的功能具备免杀性，可过Defender、360核晶、卡巴斯基（除内存操作外，如注入原生cs的dll）、火绒</td>
<td><a href="https://github.com/H4de5-7/geacon_pro">https://github.com/H4de5-7/geacon_pro</a></td>
<td>geacon_pro</td>
</tr>
<tr>
<td>类似于cs</td>
<td><a href="https://github.com/t3l3machus/Villain">https://github.com/t3l3machus/Villain</a></td>
<td>Villain</td>
</tr>
</tbody></table>
<h2 id="优秀免杀项目"><a href="#优秀免杀项目" class="headerlink" title="优秀免杀项目"></a>优秀免杀项目</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>TideSec团队整理的远控免杀系列文章及配套工具，汇总测试了互联网上的几十种免杀工具。</td>
<td><a href="https://github.com/TideSec/BypassAntiVirus">https://github.com/TideSec/BypassAntiVirus</a></td>
<td>BypassAntiVirus</td>
</tr>
<tr>
<td>跟杀软和免杀有关的资料，当前包括200+工具和1300+文章  –Thanks:小雨</td>
<td><a href="https://github.com/alphaSeclab/anti-av">https://github.com/alphaSeclab/anti-av</a></td>
<td>anti-av</td>
</tr>
<tr>
<td>用于快速生成免杀的 EXE 可执行文件，目前拥有三种免杀方法。</td>
<td><a href="https://github.com/lengjibo/FourEye">https://github.com/lengjibo/FourEye</a></td>
<td>FourEye</td>
</tr>
<tr>
<td>掩日 - 免杀执行器生成工具 用于快速生成免杀的 EXE 可执行文件</td>
<td><a href="https://github.com/1y0n/AV_Evasion_Tool">https://github.com/1y0n/AV_Evasion_Tool</a></td>
<td>AV_Evasion_Tool</td>
</tr>
<tr>
<td>自动化生成 EDR 软件 Bypass Payload 的工具,一键化签名免杀</td>
<td><a href="https://github.com/optiv/ScareCrow">https://github.com/optiv/ScareCrow</a></td>
<td>ScareCrow</td>
</tr>
<tr>
<td>梅花K战队写的Nim一键免杀源码 使用nim语言进行shellcode加载</td>
<td><a href="https://github.com/M-Kings/BypassAv-web">https://github.com/M-Kings/BypassAv-web</a></td>
<td>BypassAv-web</td>
</tr>
<tr>
<td>CS免杀,包括python版\C版本\GO版本\powershell版本</td>
<td><a href="https://github.com/Gality369/CS-Loader">https://github.com/Gality369/CS-Loader</a></td>
<td>CS-Loader</td>
</tr>
<tr>
<td>绕3环的shellcode免杀框架</td>
<td><a href="https://github.com/mai1zhi2/ShellCodeFramework">https://github.com/mai1zhi2/ShellCodeFramework</a></td>
<td>ShellCodeFramework</td>
</tr>
<tr>
<td>生成完美Powershell Payload的自动化工具</td>
<td><a href="https://github.com/GetRektBoy724/MeterPwrShell">https://github.com/GetRektBoy724/MeterPwrShell</a></td>
<td>MeterPwrShell</td>
</tr>
<tr>
<td>js免杀shellcode，绕过杀毒添加自启动</td>
<td><a href="https://github.com/Hzllaga/JsLoader">https://github.com/Hzllaga/JsLoader</a></td>
<td>JsLoader</td>
</tr>
<tr>
<td>PowerShell 模糊脚本 使用字符串替换和变量串联 Bypass  常见的检测签名</td>
<td><a href="https://github.com/tokyoneon/Chimera">https://github.com/tokyoneon/Chimera</a></td>
<td>Chimera</td>
</tr>
<tr>
<td>一款利用加载器以及Python反序列化绕过AV的在线免杀工具</td>
<td><a href="https://github.com/yhy0/AVByPass">https://github.com/yhy0/AVByPass</a></td>
<td>AVByPass</td>
</tr>
<tr>
<td>绕过专业工具检测的Webshell研究文章和免杀的Webshell源码</td>
<td><a href="https://github.com/LandGrey/webshell-detect-bypass">https://github.com/LandGrey/webshell-detect-bypass</a></td>
<td>webshell-detect-bypass</td>
</tr>
<tr>
<td>一种创建欺骗代码的证书签名工具以及对二进制文件和DLL文件进行签名的工具</td>
<td><a href="https://github.com/Tylous/Limelighter">https://github.com/Tylous/Limelighter</a></td>
<td>Limelighter</td>
</tr>
<tr>
<td>Cobalt Strike插件，用于快速生成免杀的可执行文件</td>
<td><a href="https://github.com/hack2fun/BypassAV">https://github.com/hack2fun/BypassAV</a></td>
<td>BypassAV</td>
</tr>
<tr>
<td>无落地文件的 Windows 证书导入导出工具</td>
<td><a href="https://github.com/TheWover/CertStealer">https://github.com/TheWover/CertStealer</a></td>
<td>CertStealer</td>
</tr>
<tr>
<td>通过阻止入口点执行来绕过EDR主动防御的DLL</td>
<td><a href="https://github.com/CCob/SharpBlock">https://github.com/CCob/SharpBlock</a></td>
<td>SharpBlock</td>
</tr>
<tr>
<td>在线免杀平台</td>
<td><a href="http://bypass.tidesec.com/web/">http://bypass.tidesec.com/web/</a></td>
<td>在线免杀平台</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="权限维持工具"><a href="#权限维持工具" class="headerlink" title="权限维持工具"></a>权限维持工具</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>创建隐藏计划任务，权限维持，Bypass AV</td>
<td><a href="https://github.com/0x727/SchTask_0x727">https://github.com/0x727/SchTask_0x727</a></td>
<td>SchTask_0x727</td>
</tr>
<tr>
<td>进行克隆用户、添加用户等账户防护安全检测的轻巧工具</td>
<td><a href="https://github.com/0x727/CloneX_0x727">https://github.com/0x727/CloneX_0x727</a></td>
<td>CloneX_0x727</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h1 id="运维-amp-甲方-amp-防守方工具"><a href="#运维-amp-甲方-amp-防守方工具" class="headerlink" title="运维&amp;甲方&amp;防守方工具"></a>运维&amp;甲方&amp;防守方工具</h1><h2 id="Linux应急响应工具"><a href="#Linux应急响应工具" class="headerlink" title="Linux应急响应工具"></a>Linux应急响应工具</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>主机侧Checklist的自动全面化检测脚本</td>
<td><a href="https://github.com/grayddq/GScan">https://github.com/grayddq/GScan</a></td>
<td>Gscan</td>
</tr>
<tr>
<td>应急响应实战笔记，一个安全工程师的自我修养</td>
<td><a href="https://github.com/Bypass007/Emergency-Response-Notes">https://github.com/Bypass007/Emergency-Response-Notes</a></td>
<td>Bypass007</td>
</tr>
<tr>
<td>linux信息收集/应急响应/常见后门/挖矿检测/webshell检测脚本</td>
<td><a href="https://github.com/al0ne/LinuxCheck">https://github.com/al0ne/LinuxCheck</a></td>
<td>LinuxCheck</td>
</tr>
<tr>
<td>uroboros-一个GNU/Linux监视和概要分析工具，专注于单个进程</td>
<td><a href="https://github.com/evilsocket/uroboros">https://github.com/evilsocket/uroboros</a></td>
<td>uroboros</td>
</tr>
<tr>
<td>whohk linux下一款强大的应急响应工具</td>
<td><a href="https://github.com/heikanet/whohk">https://github.com/heikanet/whohk</a></td>
<td>whohk</td>
</tr>
<tr>
<td>Malwoverview 是用于威胁搜寻的第一响应工具</td>
<td><a href="https://github.com/alexandreborges/malwoverview">https://github.com/alexandreborges/malwoverview</a></td>
<td>malwoverview</td>
</tr>
<tr>
<td>Rootkit Hunter Rootkit猎手</td>
<td><a href="http://rkhunter.sourceforge.net/">http://rkhunter.sourceforge.net/</a></td>
<td>Rootkitr</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="Windows应急响应工具"><a href="#Windows应急响应工具" class="headerlink" title="Windows应急响应工具"></a>Windows应急响应工具</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>一个类似于PChunter的多功能分析工具（PChunter已无法适用于最新版windwos）</td>
<td><a href="https://github.com/ClownQq/YDArk/">https://github.com/ClownQq/YDArk/</a></td>
<td>YDArk</td>
</tr>
<tr>
<td>包含一系列免费的系统分析工具，如Process Explorer、启动项分析工具 AutoRuns等。</td>
<td><a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/">https://docs.microsoft.com/zh-cn/sysinternals/downloads/</a></td>
<td>SysinternalsSuite</td>
</tr>
<tr>
<td>一个免费，功能强大的多功能工具，可帮助您监视系统资源，调试软件和检测恶意软件。</td>
<td><a href="https://processhacker.sourceforge.io/">https://processhacker.sourceforge.io/</a></td>
<td>Process Hacker</td>
</tr>
<tr>
<td>微软公司出品的日志分析工具，它功能强大，使用简单。</td>
<td><a href="https://www.microsoft.com/en-us/download/details.aspx?id=24659">https://www.microsoft.com/en-us/download/details.aspx?id=24659</a></td>
<td>Log Parser</td>
</tr>
<tr>
<td>火麒麟-网络安全应急响应工具(系统痕迹采集)</td>
<td><a href="https://github.com/MountCloud/FireKylin">https://github.com/MountCloud/FireKylin</a></td>
<td>FireKylin</td>
</tr>
<tr>
<td>APT-Hunter Windows日志事件应急工具</td>
<td><a href="https://github.com/ahmedkhlief/APT-Hunter">https://github.com/ahmedkhlief/APT-Hunter</a></td>
<td>APT-Hunter</td>
</tr>
<tr>
<td>webshell查杀工具</td>
<td><a href="http://www.shelldetector.com/">http://www.shelldetector.com/</a></td>
<td>Web Shell Detector</td>
</tr>
<tr>
<td>河马webshell查杀</td>
<td><a href="https://www.shellpub.com/">https://www.shellpub.com/</a></td>
<td>河马webshell</td>
</tr>
<tr>
<td>日志分析库,nuclei 的另一种用法</td>
<td><a href="https://github.com/ffffffff0x/LOG-HUB">https://github.com/ffffffff0x/LOG-HUB</a></td>
<td>LOG-HUB</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="内存马查杀工具"><a href="#内存马查杀工具" class="headerlink" title="内存马查杀工具"></a>内存马查杀工具</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>Alibaba Java诊断利器Arthas</td>
<td><a href="https://github.com/alibaba/arthas">https://github.com/alibaba/arthas</a></td>
<td>arthas</td>
</tr>
<tr>
<td>检测绝大部分所谓的内存免杀马</td>
<td><a href="https://github.com/huoji120/DuckMemoryScan">https://github.com/huoji120/DuckMemoryScan</a></td>
<td>DuckMemoryScan</td>
</tr>
<tr>
<td>通过jsp脚本扫描java web Filter/Servlet型内存马</td>
<td><a href="https://github.com/c0ny1/java-memshell-scanner">https://github.com/c0ny1/java-memshell-scanner</a></td>
<td>java-memshell-scanner</td>
</tr>
<tr>
<td>A java memory web shell extracting tool</td>
<td><a href="https://github.com/LandGrey/copagent">https://github.com/LandGrey/copagent</a></td>
<td>copagent</td>
</tr>
<tr>
<td>杀内存马的小工具</td>
<td><a href="https://github.com/r00t4dm/aLIEz">https://github.com/r00t4dm/aLIEz</a></td>
<td>aLIEz</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="xxxx"><a href="#xxxx" class="headerlink" title="xxxx"></a>xxxx</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>一款基于 IP 信誉度信息实现的实时检测 Web 恶意流量的工具</td>
<td><a href="https://github.com/CRED-CLUB/ARTIF">https://github.com/CRED-CLUB/ARTIF</a></td>
<td>ARTIF</td>
</tr>
<tr>
<td>勒索病毒解密工具汇总</td>
<td><a href="https://github.com/jiansiting/Decryption-Tools/">https://github.com/jiansiting/Decryption-Tools/</a></td>
<td>Decryption-Tools</td>
</tr>
<tr>
<td>Shiro-Cookie解密小工具</td>
<td><a href="https://github.com/r00tuser111/SerializationDumper-Shiro">https://github.com/r00tuser111/SerializationDumper-Shiro</a></td>
<td>SerializationDumper-Shiro</td>
</tr>
</tbody></table>
<h2 id="溯源反制工具"><a href="#溯源反制工具" class="headerlink" title="溯源反制工具"></a>溯源反制工具</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>伪造Myslq服务端,并利用Mysql逻辑漏洞来获取客户端的任意文件反击攻击者</td>
<td><a href="https://github.com/BeichenDream/MysqlT">https://github.com/BeichenDream/MysqlT</a></td>
<td>MysqlT</td>
</tr>
<tr>
<td>检测目标Mysql数据库是不是蜜罐</td>
<td><a href="https://github.com/BeichenDream/WhetherMysqlSham">https://github.com/BeichenDream/WhetherMysqlSham</a></td>
<td>WhetherMysqlSham</td>
</tr>
<tr>
<td>安全、快捷、高交互、企业级的蜜罐管理系统，护网；支持多种协议蜜罐、蜜签、诱饵等功能。</td>
<td><a href="https://github.com/seccome/Ehoney">https://github.com/seccome/Ehoney</a></td>
<td>Ehoney</td>
</tr>
</tbody></table>
<h1 id="安全资料整理"><a href="#安全资料整理" class="headerlink" title="安全资料整理"></a>安全资料整理</h1><h2 id="红蓝资料集锦"><a href="#红蓝资料集锦" class="headerlink" title="红蓝资料集锦"></a>红蓝资料集锦</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>红蓝对抗以及护网相关工具和资料，内存shellcode（cs+msf）和内存马查杀工具</td>
<td><a href="https://github.com/Mr-xn/RedTeam_BlueTeam_HW">https://github.com/Mr-xn/RedTeam_BlueTeam_HW</a></td>
<td>RedTeam_BlueTeam_HW</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="云安全资料"><a href="#云安全资料" class="headerlink" title="云安全资料"></a>云安全资料</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>也许这是国内第一个云安全知识文库</td>
<td><a href="https://wiki.teamssix.com/About/">https://wiki.teamssix.com/About/</a></td>
<td>T Wiki</td>
</tr>
<tr>
<td>从零开始的Kubernetes攻防</td>
<td><a href="https://github.com/neargle/my-re0-k8s-security">https://github.com/neargle/my-re0-k8s-security</a></td>
<td>my-re0-k8s-security</td>
</tr>
<tr>
<td>六大云存储，泄露利用检测工具</td>
<td><a href="https://github.com/UzJu/Cloud-Bucket-Leak-Detection-Tools">https://github.com/UzJu/Cloud-Bucket-Leak-Detection-Tools</a></td>
<td>Cloud-Bucket-Leak-Detection-Tools</td>
</tr>
<tr>
<td>云环境利用框架 Cloud Exploitation Framework 方便红队人员在获得 AK 的后续工作</td>
<td><a href="https://github.com/teamssix/cf">https://github.com/teamssix/cf</a></td>
<td>cf</td>
</tr>
</tbody></table>
<h2 id="靶场清单"><a href="#靶场清单" class="headerlink" title="靶场清单"></a>靶场清单</h2><p>通用漏洞类：</p>
<table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>在线靶场</td>
<td><a href="https://hackmyvm.eu/anon/">https://hackmyvm.eu/anon/</a></td>
<td>hackmyvm</td>
</tr>
<tr>
<td>Vulfocus 是一个漏洞集成平台，将漏洞环境 docker 镜像，放入即可使用，开箱即用。</td>
<td><a href="https://github.com/fofapro/vulfocus">https://github.com/fofapro/vulfocus</a></td>
<td>vulfocus</td>
</tr>
<tr>
<td>基于 Docker-Compose 的预建易受攻击环境</td>
<td><a href="https://github.com/vulhub/vulhub">https://github.com/vulhub/vulhub</a></td>
<td>vulhub</td>
</tr>
<tr>
<td>Spring Boot 相关漏洞学习资料，利用方法和技巧合</td>
<td><a href="https://github.com/LandGrey/SpringBootVulExploit">https://github.com/LandGrey/SpringBootVulExploit</a></td>
<td>SpringBootVulExploit</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>基础漏洞类：</p>
<table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>基础漏洞靶场</td>
<td><a href="https://dvwa.co.uk/">https://dvwa.co.uk/</a></td>
<td>dvwa</td>
</tr>
<tr>
<td>常见的web漏洞</td>
<td><a href="https://www.pentesterlab.com/exercises/web_for_pentester/course">https://www.pentesterlab.com/exercises/web_for_pentester/course</a></td>
<td>pentesterlab</td>
</tr>
<tr>
<td>Java漏洞平台</td>
<td><a href="https://github.com/j3ers3/Hello-Java-Sec">https://github.com/j3ers3/Hello-Java-Sec</a></td>
<td>Hello-Java-Sec</td>
</tr>
<tr>
<td>JAVA 漏洞靶场</td>
<td><a href="https://github.com/tangxiaofeng7/SecExample">https://github.com/tangxiaofeng7/SecExample</a></td>
<td>SecExample</td>
</tr>
<tr>
<td>一个想帮你总结所有类型的上传漏洞的靶场</td>
<td><a href="https://github.com/c0ny1/upload-labs">https://github.com/c0ny1/upload-labs</a></td>
<td>upload-labs</td>
</tr>
<tr>
<td>SQLI 实验室测试基于错误、基于布尔值、基于时间。</td>
<td><a href="https://github.com/Audi-1/sqli-labs">https://github.com/Audi-1/sqli-labs</a></td>
<td>sqli-labs</td>
</tr>
<tr>
<td>一个包含php,java,python,C#等各种语言版本的XXE漏洞Demo</td>
<td><a href="https://github.com/c0ny1/xxe-lab">https://github.com/c0ny1/xxe-lab</a></td>
<td>xxe-lab</td>
</tr>
</tbody></table>
<h2 id="基础设施及环境搭建"><a href="#基础设施及环境搭建" class="headerlink" title="基础设施及环境搭建"></a>基础设施及环境搭建</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>红/蓝队环境自动化部署工具</td>
<td><a href="https://github.com/ffffffff0x/f8x">https://github.com/ffffffff0x/f8x</a></td>
<td>f8x</td>
</tr>
<tr>
<td>Frps 一键安装脚本&amp;管理脚本</td>
<td><a href="https://github.com/MvsCode/frps-onekey">https://github.com/MvsCode/frps-onekey</a></td>
<td>frps-onekey</td>
</tr>
<tr>
<td>修改frp支持域前置与配置文件自删除</td>
<td><a href="https://github.com/uknowsec/frpModify">https://github.com/uknowsec/frpModify</a></td>
<td>frpModify</td>
</tr>
<tr>
<td>一款功能强大的代理检查和IP地址轮转工具</td>
<td><a href="https://github.com/kitabisa/mubeng">https://github.com/kitabisa/mubeng</a></td>
<td>mubeng</td>
</tr>
<tr>
<td>利用fofa搜索socks5开放代理进行代理池轮切的工具</td>
<td><a href="https://github.com/akkuman/rotateproxy">https://github.com/akkuman/rotateproxy</a></td>
<td>rotateproxy</td>
</tr>
<tr>
<td>利用IP地址池进行自动切换Http代理，防止IP封禁。</td>
<td><a href="https://github.com/Mustard404/Auto_proxy">https://github.com/Mustard404/Auto_proxy</a></td>
<td>Auto_proxy</td>
</tr>
<tr>
<td>命令行全局代理–跨平台通用</td>
<td><a href="https://github.com/rofl0r/proxychains-ng">https://github.com/rofl0r/proxychains-ng</a></td>
<td>proxychains-ng</td>
</tr>
<tr>
<td>Python爬虫代理IP池(proxy pool)</td>
<td><a href="https://github.com/jhao104/proxy_pool">https://github.com/jhao104/proxy_pool</a></td>
<td>proxy_pool</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>正在整理中………………</p>
<hr>
]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>manjaro入门（arch Linux）</title>
    <url>/2023/04/23/manjaro%E5%85%A5%E9%97%A8%EF%BC%88archlinux%EF%BC%89/</url>
    <content><![CDATA[<h3 id="1-安装系统"><a href="#1-安装系统" class="headerlink" title="1. 安装系统"></a>1. 安装系统</h3><ul>
<li><p>下载镜像并制作系统启动U盘，推荐使用<a href="https://www.ventoy.net/cn/download.html"> Ventoy</a>（能够兼容多个系统镜像，能制作多个系统的启动盘）</p>
<ul>
<li>用法非常简单，下载Ventoy后打开Ventoy2Disk.exe，选择U盘格式化.</li>
<li><a href="https://manjaro.org/download/">下载镜像</a>，然后直接把iso拖进去.</li>
</ul>
</li>
<li><p>显卡驱动参考<a href="https://wiki.manjaro.org/index.php?title=Configure_NVIDIA_(non-free)_settings_and_load_them_on_Startup">Manjaro WiKi</a>的解决方案.</p>
</li>
</ul>
<h3 id="2-pacman-yay-安装删除命令"><a href="#2-pacman-yay-安装删除命令" class="headerlink" title="2.pacman(yay)安装删除命令"></a>2.pacman(yay)安装删除命令</h3><blockquote>
<p>有什么问题或者需要查找安装包可以自行搜索<a href="https://aur.archlinux.org/">archlinux官网</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su <span class="comment"># 如果已经在root环境下则不用提权</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 常用安装删除指令一览</span></span><br><span class="line">pacman -S XXXXX</span><br><span class="line"><span class="comment"># 安装XXXXX</span></span><br><span class="line"></span><br><span class="line">pacman -R XXXXX</span><br><span class="line"><span class="comment"># 删除XXXXX（Remove）（保留依赖的包）</span></span><br><span class="line"></span><br><span class="line">pacman -Rs XXXXX</span><br><span class="line"><span class="comment"># 删除XXXXX以及其依赖的包（诛灭九族）</span></span><br><span class="line"></span><br><span class="line">pacman -U XXXXX</span><br><span class="line"><span class="comment"># 安装自己下载的XXXXX包（taz.gz）</span></span><br><span class="line"></span><br><span class="line">pacman -Sc</span><br><span class="line"><span class="comment"># 清理未安装的包文件</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="3-配置"><a href="#3-配置" class="headerlink" title="3.配置"></a>3.配置</h3><p>给manjaro换上国内源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 手动选择源</span></span><br><span class="line">sudo pacman-mirrors -i -c China -m rank</span><br></pre></td></tr></table></figure>



<p>添加cn arch源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/pacman.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#末尾输入以下内容(需要其它的arch源自行百度)</span></span><br><span class="line">[archlinuxcn]</span><br><span class="line">SigLevel = Optional TrustedOnly</span><br><span class="line">Server = http://mirrors.163.com/archlinux-cn/<span class="variable">$arch</span></span><br><span class="line">Server = https://mirrors.ustc.edu.cn/archlinuxcn/<span class="variable">$arch</span></span><br><span class="line">Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/<span class="variable">$arch</span></span><br></pre></td></tr></table></figure>



<p>清理pacman更新缓存</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -Scc</span><br></pre></td></tr></table></figure>



<p>更新系统</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -Syyu</span><br></pre></td></tr></table></figure>



<p>系统更新完成后安装<code>archlinuxcn-keyring</code>包导入<code>GPG key</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S archlinuxcn-keyring</span><br></pre></td></tr></table></figure>



<h3 id="4-安装工具"><a href="#4-安装工具" class="headerlink" title="4.安装工具"></a>4.安装工具</h3><p>安装<code>base-devel</code>，一个非常重要的基础库。</p>
<blockquote>
<p>这个基础包必须安装，否则我们在使用yay安装AUR软件的时候经常会遇到安装不上的问题。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S base-devel</span><br></pre></td></tr></table></figure>



<p>安装包管理器</p>
<blockquote>
<p>Manjaro背靠Arch软件仓库，仓库又全又新，基本上遇不到依赖问题需要手动去搜该怎么安装</p>
<p>yay是一个用Go语言写的一个AUR助手，有些时候官方仓库没有你想要的软件，就需要通过yay来安装</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S yay</span><br></pre></td></tr></table></figure>



<p>vim编辑工具</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S vim         <span class="comment"># vim编辑器永远的神</span></span><br></pre></td></tr></table></figure>



<h3 id="5-双系统时间同步（单系统跳过）"><a href="#5-双系统时间同步（单系统跳过）" class="headerlink" title="5.双系统时间同步（单系统跳过）"></a>5.双系统时间同步（单系统跳过）</h3><blockquote>
<p>硬件时间and系统时间<br>这2个时间不是同步的！如果有一天发现系统的时间不对了，可以分别看看这2个时间。硬件时间写在BIOS里，系统时间就是电脑显示的时间了。<br>这个显示的是硬件时间。</p>
</blockquote>
<h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>使用ntpdate同步网络时间后可以将时间写入到BIOS：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#同步网络时间：</span></span><br><span class="line">sudo ntpdate time.windows.com</span><br><span class="line"></span><br><span class="line"><span class="comment">#写入BIOS：</span></span><br><span class="line">sudo  hwclock -w</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看时间</span></span><br><span class="line">sudo  hwclock -r</span><br></pre></td></tr></table></figure>



<h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>产生原因：<br> Windows 将本地硬件时间作为设定时区（如 UTC+8）的区时，而 Linux 默认将其作为 UTC 时间。</p>
<p>解决方式：<br> 让 Manjaro 不要将其作为 UTC 时间：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo timedatectl set-local-rtc 1</span><br></pre></td></tr></table></figure>



<h4 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h4><p>按照 <a href="https://wiki.archlinux.org/index.php/System_time_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">Arch WiKi</a> 的建议，这里修改Windows系统的注册表：</p>
<p>以管理员方式打开PowerShell，输入</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#如果你的WIndows是32位的，把上述代码中的REG_QWORD改成REG_DWORD</span></span><br><span class="line">reg add <span class="string">&quot;HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\TimeZoneInformation&quot;</span> /v RealTimeIsUniversal /d <span class="number">1</span> /t REG_QWORD /f	</span><br></pre></td></tr></table></figure>

<blockquote>
<p>同时禁用Windows的自动同步时间功能</p>
</blockquote>
<h3 id="6-安装输入法"><a href="#6-安装输入法" class="headerlink" title="6.安装输入法"></a>6.安装输入法</h3><p><a href="https://wiki.archlinux.org/index.php/Fcitx5_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">Fcitx5 官方文档</a><br>中文及日文输入法均体验良好。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S fcitx5-im <span class="comment">#基础包组</span></span><br><span class="line">sudo pacman -S fcitx5-chinese-addons <span class="comment">#官方中文输入引擎</span></span><br><span class="line">sudo pacman -S fcitx5-anthy <span class="comment">#日文输入引擎</span></span><br><span class="line">yay -S fcitx5-pinyin-moegirl <span class="comment">#萌娘百科词库 由于中国大陆政府对github封锁，你可能在此卡住。如卡住，可根据后文设置好代理后再安装</span></span><br><span class="line">sudo pacman -S fcitx5-pinyin-zhwiki <span class="comment">#中文维基百科词库</span></span><br><span class="line">sudo pacman -S fcitx5-material-color <span class="comment">#主题</span></span><br></pre></td></tr></table></figure>



<p>设置环境变量 编辑文件 <code>sudo vim /etc/environment</code> 加入以下内容。konsole 以及 dolphin 都需要这些环境变量，倒是 chrome 和 firefox 都不需要就可以输入中文</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GTK_IM_MODULE=fcitx</span><br><span class="line">QT_IM_MODULE=fcitx</span><br><span class="line">XMODIFIERS=@im=fcitx</span><br><span class="line">SDL_IM_MODULE=fcitx</span><br></pre></td></tr></table></figure>



<h3 id="7-字体"><a href="#7-字体" class="headerlink" title="7.字体"></a>7.字体</h3><blockquote>
<p><a href="https://wiki.archlinuxcn.org/wiki/%E5%AD%97%E4%BD%93">windows/Mac字体参考</a></p>
<p>字体下载地址(推荐安装<a href="https://www.jetbrains.com/lp/mono/">JetBrainsMono</a>。中心需要显示icon之类的需要<a href="https://github.com/ryanoasis/nerd-fonts/releases">nerd补丁</a>的字体)</p>
<p>不用命令行可以进文件管理器里面解压，然后全选字体右键安装</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p ~/.local/share/fonts</span><br><span class="line"><span class="built_in">cp</span> -vr JetBrainsMono/ ~/.local/share/fonts</span><br><span class="line">fc-cache -vf</span><br></pre></td></tr></table></figure>



<h3 id="8-配置ohmyzsh"><a href="#8-配置ohmyzsh" class="headerlink" title="8.配置ohmyzsh"></a>8.配置ohmyzsh</h3><blockquote>
<p>项目拉下来进行安装</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/ohmyzsh/ohmyzsh.git</span><br><span class="line">sh ohmyzsh/tools/install.sh</span><br></pre></td></tr></table></figure>

<blockquote>
<p>安装zsh-syntax-highlighting：提供命令高亮</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure>

<blockquote>
<p>安装autosuggestions：记住你之前使用过的命令</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure>

<blockquote>
<p>安装autojump: 目录快捷跳转</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yay -S autojump</span><br></pre></td></tr></table></figure>

<blockquote>
<p>启用所有插件</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nano ~/.zshrc</span><br></pre></td></tr></table></figure>

<blockquote>
<p>修改<code>plugins=(git)</code>:</p>
<p>这个sudo是ohmyzsh自带的插件，功能是在你输入的命令的开头添加sudo ，方法是双击Esc</p>
<p>extract也是自带插件，不用再去记不同文件的解压命令，方法是extract +你要解压的文件名</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">plugins=(git autojump zsh-syntax-highlighting zsh-autosuggestions extract sudo)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>究极自定义的zsh主题，<a href="https://github.com/romkatv/powerlevel10k#oh-my-zsh">参见</a></p>
<p>我这里使用的是p10k主题</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth=1 https://gitee.com/romkatv/powerlevel10k.git <span class="variable">$&#123;ZSH_CUSTOM:-<span class="variable">$HOME</span>/.oh-my-zsh/custom&#125;</span>/themes/powerlevel10k</span><br></pre></td></tr></table></figure>

<blockquote>
<p>修改使用的主题</p>
<p>将ZSH_THEME的值更改为<code>powerlevel10k/powerlevel10k</code></p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nano ~/.zshrc</span><br></pre></td></tr></table></figure>

<blockquote>
<p>仅仅安装 powerlevel10k 是不够的，你还需要一个能够满足它的字体，包括各种特殊字符和图标（如上图）等，网络中使用最多的是 Hack Nerd Font 。<br> 字体官网链接：<a href="https://nerdfonts.com/">https://nerdfonts.com/</a></p>
</blockquote>
<p><img src="/2023/04/23/manjaro%E5%85%A5%E9%97%A8%EF%BC%88archlinux%EF%BC%89/1549943-20211016132138588-1630077845.png" alt="截图"></p>
<blockquote>
<p>完成后重启终端或者执行</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>



<h3 id="9-美化GRUB（自定义开机动画）"><a href="#9-美化GRUB（自定义开机动画）" class="headerlink" title="9.美化GRUB（自定义开机动画）"></a>9.美化GRUB（自定义开机动画）</h3><ul>
<li><p>去<a href="https://www.gnome-look.org/browse/cat/109/order/latest/"> Gnome-look</a> 找自己喜欢的grub主题，下载</p>
</li>
<li><p>解压后进入目录，有一个子目录和两个sh文件，只需要把子目录copy到</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> -r 子目录名 /usr/share/grub/themes/</span><br></pre></td></tr></table></figure></li>
<li><p>编辑</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/default/grub</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加下面这行参数</span></span><br><span class="line">GRUB_THEME=<span class="string">&quot;/usr/share/grub/themes/子目录名/theme.txt&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p>重新生成一次grub.cfg</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="10-安装dock，类似mac的任务栏"><a href="#10-安装dock，类似mac的任务栏" class="headerlink" title="10.安装dock，类似mac的任务栏"></a>10.安装dock，类似mac的任务栏</h3><p>安装latte-dock</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yay -S latte-dock</span><br></pre></td></tr></table></figure>

<blockquote>
<p>启动latte-dock，下方就会出现一个dock栏，具体配置看自己爱好</p>
<p>移除那个时钟的方法：右键 配置lattedock 然后右键 那个时钟 移除</p>
</blockquote>
<h3 id="11-常用软件"><a href="#11-常用软件" class="headerlink" title="11.常用软件"></a>11.常用软件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#微信</span></span><br><span class="line">yay -S deepin-wine-wechat</span><br><span class="line"></span><br><span class="line"><span class="comment">#QQ</span></span><br><span class="line">yay -S deepin-wine-qq</span><br><span class="line"></span><br><span class="line"><span class="comment">#chrome浏览器</span></span><br><span class="line">yay -S google-chrome</span><br><span class="line"></span><br><span class="line"><span class="comment">#网易云音乐</span></span><br><span class="line">yay -S netease-cloud-music </span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="12-下面是wine的安装和一些问题的解决办法"><a href="#12-下面是wine的安装和一些问题的解决办法" class="headerlink" title="12.下面是wine的安装和一些问题的解决办法"></a>12.下面是<code>wine</code>的安装和一些问题的解决办法</h3><h4 id="1-wine安装-有需要则安装"><a href="#1-wine安装-有需要则安装" class="headerlink" title="1)wine安装(有需要则安装)"></a>1)wine安装(有需要则安装)</h4><blockquote>
<p>安装wine</p>
<p>其中wine_gecko和wine-mono分别用于运行依赖于Internet Explorer和.NET的程序</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yay -S wine wine_gecko wine-mono</span><br></pre></td></tr></table></figure>

<blockquote>
<p>创建32位、64位容器</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">WINEARCH=win32 WINEPREFIX=~/.win32 winecfg</span><br><span class="line">WINEARCH=win64 WINEPREFIX=~/.win64 winecfg</span><br></pre></td></tr></table></figure>

<blockquote>
<p>字体设置</p>
<p>保存以下内容到zh.reg文件</p>
</blockquote>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">REGEDIT4</span><br><span class="line">[HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\FontSubstitutes]</span><br><span class="line">&quot;Arial&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Arial CE,238&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Arial CYR,204&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Arial Greek,161&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Arial TUR,162&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Courier New&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Courier New CE,238&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Courier New CYR,204&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Courier New Greek,161&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Courier New TUR,162&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;FixedSys&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Helv&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Helvetica&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;MS Sans Serif&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;MS Shell Dlg&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;MS Shell Dlg 2&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;System&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Tahoma&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Times&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Times New Roman CE,238&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Times New Roman CYR,204&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Times New Roman Greek,161&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Times New Roman TUR,162&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Tms Rmn&quot;=&quot;simsun&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>添加到注册表</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">regedit zh.reg</span><br></pre></td></tr></table></figure>

<blockquote>
<p>从自己的Windows下 Windows/Fonts 下找到simsun.ttc复制到 /home/user/.wine/drive_c/windows/fonts 里</p>
</blockquote>
<h4 id="2-wine软件桌面快捷方式创建"><a href="#2-wine软件桌面快捷方式创建" class="headerlink" title="2)wine软件桌面快捷方式创建"></a>2)wine软件桌面快捷方式创建</h4><blockquote>
<p>Wine安装应用时一般会添加这个菜单，如果没有的话可以在~/.local/share/applications/wine/下新建目录和.desktop文件，按[Desktop Entry]的格式自行设置</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Name=WeChat</span><br><span class="line">Exec=<span class="built_in">env</span> WINEPREFIX=<span class="string">&quot;/home/zbg/.wine&quot;</span> wine C:\\\\windows\\\\<span class="built_in">command</span>\\\\start.exe /Unix /home/zbg/.wine/dosdevices/c:/ProgramData/Microsoft/Windows/Start\\ Menu/Programs/WeChat/WeChat.lnk</span><br><span class="line">Type=Application</span><br><span class="line">StartupNotify=<span class="literal">true</span></span><br><span class="line">Path=/home/zbg/.wine/dosdevices/c:/Program Files (x86)/Tencent/WeChat</span><br><span class="line">Icon=06F2_WeChat.0</span><br><span class="line">StartupWMClass=wechat.exe</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果提示Cannot find the fakeroot binary相关错误则需要重新安装base-devel</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pacman -S base-devel</span><br></pre></td></tr></table></figure>



<h4 id="3-wine安装exe"><a href="#3-wine安装exe" class="headerlink" title="3)wine安装exe"></a>3)wine安装exe</h4><blockquote>
<p>安装并运行<code>winetricks</code></p>
<p>wine的辅助工具，比如添加dll等</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yay -S winetricks</span><br><span class="line"></span><br><span class="line">winetricks</span><br></pre></td></tr></table></figure>

<blockquote>
<p>执行后会打开弹出，选中默认wine容器</p>
</blockquote>
<p><img src="/2023/04/23/manjaro%E5%85%A5%E9%97%A8%EF%BC%88archlinux%EF%BC%89/1549943-20211016132327702-2095914890.png" alt="截图"></p>
<blockquote>
<p>选择需要的选项，这里选择dll安装</p>
</blockquote>
<p><img src="/2023/04/23/manjaro%E5%85%A5%E9%97%A8%EF%BC%88archlinux%EF%BC%89/1549943-20211016132409407-1420021937.png" alt="截图"></p>
<h4 id="4-用户文件夹名称为英文"><a href="#4-用户文件夹名称为英文" class="headerlink" title="4)用户文件夹名称为英文"></a>4)用户文件夹名称为英文</h4><blockquote>
<p>先去手动修改文件夹名称，然后在 设置 -&gt; 应用程序 -&gt; 地点 这修改</p>
</blockquote>
<p><img src="/2023/04/23/manjaro%E5%85%A5%E9%97%A8%EF%BC%88archlinux%EF%BC%89/1549943-20211016132439302-941187267.png" alt="截图"></p>
<h4 id="5-qq、微信打不开"><a href="#5-qq、微信打不开" class="headerlink" title="5)qq、微信打不开"></a>5)qq、微信打不开</h4><blockquote>
<p>Manjaro-kde桌面安装TIM/QQ的时候经常出现无法启动，其主要原因是deein-wine-tim打包了Gnome桌面部分内容，因此在KDE桌面环境下需要安装相应的Gnome桌面设置环境</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pacman -S gnome-settings-daemon</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>arch linux</category>
      </categories>
      <tags>
        <tag>manjaro</tag>
      </tags>
  </entry>
  <entry>
    <title>Android利用容器部署linux</title>
    <url>/2023/04/13/Android%E5%88%A9%E7%94%A8%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2linux/</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Termux和Linux Deploy等应用app可以在proot、chroot容器上部署linux。</p>
<p><strong>这里介绍一下proot和chroot：</strong></p>
<ul>
<li><p>PRoot 是一个 chroot, mount –bind, 和 binfmt_misc 的用户空间实现。这意味着，用户不需要任何特殊权限和设置就可以使用任意目录作为新的根文件系统或者通过QEMU运行为其它CPU架构构建的程序。</p>
<blockquote>
<p>PRoot 通过伪造系统调用的参数和返回值，可以使程序看起来像运行在root用户下，但它并不提供任何方法来真正的提权。确实需要root权限去修改内核或硬件状态的程序将无法工作。</p>
</blockquote>
</li>
<li><p>chroot，即 change root directory (更改 root 目录)，为了进一步提高系统的安全性，Linux引入了chroot机制，chroot是一个系统调用,可以更改一个进程所能看到的根目录。类似创建一个沙盒，进程运行在沙盒之内，进程运行正常与否，并不会影响这个台器的其他进程。</p>
</li>
</ul>
<p><strong>比较 PRoot 与 chroot</strong></p>
<p>chroot和PRoot的一个主要区别是chroot是原生的。PRoot通过使用 ptrace() 劫持系统调用参数和返回值来伪造文件系统布局和用户/组ID。chroot不造成额外的开销，在任何设备上都不会出现问题，但是它需要root权限。</p>
<p>如果你有root过的设备并且希望在Termux中更好的使用Linux发行版，那么请使用chroot。这种情况可以尝试使用 <strong>Linux Deploy</strong> 这个应用以自动安装Linux发行版。</p>
<p><strong>接下开始介绍Termux和Linux Deploy怎么部署Linux</strong></p>
<h2 id="Termux"><a href="#Termux" class="headerlink" title="Termux"></a>Termux</h2><blockquote>
<p>使用tetmux不需要root</p>
<p>第一次用这个软件建议先pkg update后再把源换成国内的，具体步骤可自行百度</p>
</blockquote>
<p><strong>Termux 在安装好 proot 的情况下，是可以运行 Linux 系统的，利用这个原理，github有大佬写出了 Termux 一键安装 Linux 脚本</strong></p>
<p><strong>项目地址</strong>: <a href="https://github.com/sqlsec/termux-install-linux">https://github.com/sqlsec/termux-install-linux</a></p>
<p><strong>具体安装脚本流程：</strong><a href="https://www.sqlsec.com/2020/04/termuxlinux.html#Fedora">https://www.sqlsec.com/2020/04/termuxlinux.html#Fedora</a></p>
<h2 id="Linux-Deploy"><a href="#Linux-Deploy" class="headerlink" title="Linux Deploy"></a>Linux Deploy</h2><p>Linux  Deploy是一款可以在Android设备上部署Linux环境的应用，其原理大概是在Android的Linux层跑一个chroot或者proot容器，然后再在容器中运行我们准备好的另外一个Linux系统。值得注意的是，这与我们熟知的虚拟机技术不同，新的Linux系统将和Android系统平行运行(非专业解释不要深究)。</p>
<p>在使用Linux Deploy之前，<strong>我们需要获取手机的Root权限（必须）</strong>，获取Root权限后，由于原机自带的Linux命令集不完整，我们需要安装Busybox来扩充Linux命令集（不安装也可以）。</p>
<h3 id="1）准备工作"><a href="#1）准备工作" class="headerlink" title="1）准备工作"></a>1）准备工作</h3><p>.一台安卓设备（旧手机）</p>
<p>设备硬件要求：建议RAM在1G及以上，手机ROM空闲容量4G左右</p>
<p>设备软件要求：建议安卓版本4.0以上，系统必须是拥有ROOT系统权限的</p>
<p>（我用的是小米mix2s 安卓10）</p>
<h3 id="2）安装需要的软件"><a href="#2）安装需要的软件" class="headerlink" title="2）安装需要的软件"></a>2）安装需要的软件</h3><ul>
<li><p><a href="https://github.com/meefik/linuxdeploy/releases">Linux Deploy</a></p>
</li>
<li><p><a href="https://github.com/meefik/busybox/releases">BusyBox</a></p>
<blockquote>
<p>BusyBox 是一个开源项目，它提供了大约 400 个常见 UNIX/Linux 命令的精简实现。</p>
<p>BusyBox 是 GNU Coreutils 的绝佳替代品，特别是在操作系统的小尺寸很重要的情况下。</p>
<p>可以选择不安装，但建议安装</p>
</blockquote>
</li>
<li><p><a href="https://juicessh.com/">JuiceSSH</a></p>
<blockquote>
<p>一个免费的SSH连接软件</p>
</blockquote>
</li>
<li><p>有需要的图形化桌面的可以再安装个<a href="https://www.realvnc.com/en/connect/download/viewer/">VNC viewer</a></p>
</li>
</ul>
<p>juicessh和VNC我放的是官网的链接，下载需要魔法，没魔法的可以去找资源，实在找不到的可以在下面评论给我留言</p>
<h3 id="3）busybox的设置"><a href="#3）busybox的设置" class="headerlink" title="3）busybox的设置"></a>3）busybox的设置</h3><p><strong>安装路径不改，因为这个路径我们在linux deploy软件的设置中有一个环境变量的选项，就是填入这个，然后更新环境变量，安装组件和替换组件勾选</strong></p>
<p><img src="/2023/04/13/Android%E5%88%A9%E7%94%A8%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2linux/2564615615.jpg" alt="2564615615"></p>
<p><strong>回到主页点击安装，安装完成以后查看安装信息，显示下面的就是安装完成，现在手机基本都是aarch64，也就是arm64的</strong></p>
<p><img src="/2023/04/13/Android%E5%88%A9%E7%94%A8%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2linux/9846131.jpg" alt="9846131"></p>
<h4 id="如果安装busybox失败，另一种安装方式"><a href="#如果安装busybox失败，另一种安装方式" class="headerlink" title="如果安装busybox失败，另一种安装方式"></a>如果安装busybox失败，另一种安装方式</h4><blockquote>
<p>上面直接用apk来安装busybox一般来说没有出现fail都是成功了，但我就是出现fail，安装失败了，然后我就用另一种安装方式了</p>
</blockquote>
<p><strong>1.下载BusyBox的<a href="https://busybox.net/downloads/binaries/">binary</a></strong></p>
<blockquote>
<p>我旧手机mix2s的骁龙845支持armv7l，所有我下载了arm71</p>
<p>下载了之后找到它，改名为 <strong>busybox</strong></p>
</blockquote>
<p><strong>2.把busybox移动到手机的/system/xbin</strong></p>
<p>我用宿主机操作，已经下载了adb shell</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># adb shell</span></span><br><span class="line">ploris:/$ su</span><br><span class="line"><span class="comment">#把根目录挂载成可读可写模式</span></span><br><span class="line">ploris:/<span class="comment"># mount -o rw,remount,rw /system</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果以上命令出现错误提示“Operation not permitted”，则需要先执行以下命令，禁用SELinux：</span></span><br><span class="line">ploris:/<span class="comment"># setenforce 0</span></span><br><span class="line"></span><br><span class="line">ploris:/<span class="comment"># mkdir /system/xbin</span></span><br><span class="line">ploris:/<span class="comment"># cp /sdcard/busybox /system/xbin</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#把根目录重新挂载成只读模式</span></span><br><span class="line">ploris:/<span class="comment"># mount -o remount,ro /</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#（要注意，尾部的那个点也是命令内容,表示安装在当前目录）</span></span><br><span class="line">ploris:/system/xbin<span class="comment"># busybox --install . </span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="4）linux-deploy的设置"><a href="#4）linux-deploy的设置" class="headerlink" title="4）linux deploy的设置"></a>4）linux deploy的设置</h3><p><strong>在左上角三个横杠打开设置</strong></p>
<p><strong>打勾三个的都点亮，正式运行的时候屏幕黑掉之后，后天运行会非常卡，建议点亮</strong></p>
<p><img src="/2023/04/13/Android%E5%88%A9%E7%94%A8%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2linux/165161681.jpg" alt="165161681"></p>
<p><strong>开机自动启动根据自己的需求设置，其它的默认就好</strong></p>
<p><img src="/2023/04/13/Android%E5%88%A9%E7%94%A8%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2linux/1587646427613234.jpg" alt="1587646427613234"></p>
<p><strong>PATH变量填入安装BusyBox的路径，这个很重要</strong></p>
<p><img src="/2023/04/13/Android%E5%88%A9%E7%94%A8%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2linux/1587646427613235.jpg" alt="在这里插入图片描述"></p>
<p><strong>telnet这个可以开一下，ssh连不上可以用telnet连接</strong></p>
<p><img src="/2023/04/13/Android%E5%88%A9%E7%94%A8%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2linux/24568164146614.jpg" alt="在这里插入图片描述"></p>
<p> <strong>然后在右下角停止旁边的三个横杠打开配置</strong></p>
<blockquote>
<p>安装类型默认的是镜像文件，我选择的是目录，安装完成以后能和手机共享磁盘空间</p>
<p>选择镜像安装的要注意镜像大小要分配2G以上，或者直接10240M</p>
</blockquote>
<p><strong>配置源地址方式有两种，一种是在线安装，另一种是tar包安装</strong></p>
<h4 id="a-在线安装"><a href="#a-在线安装" class="headerlink" title="a.在线安装"></a>a.在线安装</h4><p><img src="/2023/04/13/Android%E5%88%A9%E7%94%A8%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2linux/985621469.jpg" alt="img"></p>
<h4 id="b-tar包安装"><a href="#b-tar包安装" class="headerlink" title="b.tar包安装"></a>b.tar包安装</h4><blockquote>
<p>tar打包linux具体可看我另一篇<a href="https://aienh.github.io/post/%E5%88%B6%E4%BD%9Cdebian%E7%9A%84rootfs">制作rootfs</a>的博客，这里安装类型也建议改为目录</p>
</blockquote>
<p><img src="/2023/04/13/Android%E5%88%A9%E7%94%A8%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2linux/5862411146.jpg" alt="img"></p>
<h4 id="c-其它配置"><a href="#c-其它配置" class="headerlink" title="c.其它配置"></a>c.其它配置</h4><p><strong>本地化选择中文包就可以了</strong></p>
<p><img src="/2023/04/13/Android%E5%88%A9%E7%94%A8%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2linux/98464166.jpg" alt="在这里插入图片描述"></p>
<p><strong>sdcard挂载到根系统</strong><img src="/2023/04/13/Android%E5%88%A9%E7%94%A8%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2linux/173048_ghVz_2846946.png" alt="img"></p>
<p><strong>启用SSH打勾，建议更改SSH的端口，例如7777，8888，22端口可能会在手机上被别的服务占用，SSH可能会连接不上</strong></p>
<p><strong>图形界面有需求可选择打勾安装</strong></p>
<p><img src="/2023/04/13/Android%E5%88%A9%E7%94%A8%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2linux/7b06f45652578707.jpg" alt="img"></p>
<p>这样就配置完成了</p>
<h3 id="5）安装"><a href="#5）安装" class="headerlink" title="5）安装"></a>5）安装</h3><p><img src="/2023/04/13/Android%E5%88%A9%E7%94%A8%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2linux/245614151.png" alt="245614151"></p>
<p><strong>configuring extra/ssh 没有fail</strong></p>
<p><strong>&lt;&lt;&lt;deploy</strong> </p>
<p><strong>说明安装完成</strong></p>
<p><img src="/2023/04/13/Android%E5%88%A9%E7%94%A8%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2linux/824641148.png" alt="824641148"></p>
<blockquote>
<p><strong>安装完成后一定要先点停止后再点启动！！！</strong></p>
<p><strong>不然直接点启动又会重新安装一遍。</strong></p>
</blockquote>
<h2 id="用JuiceSSH连接"><a href="#用JuiceSSH连接" class="headerlink" title="用JuiceSSH连接"></a>用JuiceSSH连接</h2><blockquote>
<p>用SSH连接时注意你配置时有没有更改端口</p>
</blockquote>
<p> <img src="/2023/04/13/Android%E5%88%A9%E7%94%A8%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2linux/562411.png" alt="562411"></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>chroot</tag>
        <tag>arm64</tag>
        <tag>linux Deploy</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>制作debian的rootfs</title>
    <url>/2023/04/12/%E5%88%B6%E4%BD%9Cdebian%E7%9A%84rootfs/</url>
    <content><![CDATA[<h2 id="使用debootstrap构建制作aarch64-arm64-Debian-rootfs文件系统"><a href="#使用debootstrap构建制作aarch64-arm64-Debian-rootfs文件系统" class="headerlink" title="使用debootstrap构建制作aarch64/arm64 Debian rootfs文件系统"></a>使用debootstrap构建制作aarch64/arm64 Debian rootfs文件系统</h2><h3 id="1-宿主机软件安装"><a href="#1-宿主机软件安装" class="headerlink" title="1.宿主机软件安装"></a>1.宿主机软件安装</h3><p><strong>PC端宿主机使用的系统为Ubuntu22.04 amd64，在制作debian10系统之前，需要安装制作系统所需要的一些工具软件。</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># apt-get install apt-transport-https qemu qemu-user-static qemu-system-arm binfmt-support debootstrap</span></span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li><p>qemu-system-arm 用于模拟arm架构的设备，在此平台上进行debian系统的运行演示。</p>
</li>
<li><p>debootstrap 构建debian基本文件子系统的工具。</p>
</li>
<li><p>qemu-user-static 在PC端非arm架构的ubuntu系统上，需要借助于qemu-arm-static工具来模拟arm环境安才可以安装arm架构下所需要的软件。</p>
</li>
</ul>
</blockquote>
<h3 id="2-使用debootstrap工具下载debian文件系统"><a href="#2-使用debootstrap工具下载debian文件系统" class="headerlink" title="2.使用debootstrap工具下载debian文件系统"></a>2.使用debootstrap工具下载debian文件系统</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># debootstrap --arch=arm64 --variant=minbase --include=whiptail,ca-certificates,tzdata --foreign buster rootfs http://mirrors.ustc.edu.cn/debian/</span></span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li><p>–arch : 指定系统架构</p>
</li>
<li><p>–foreign ：指定要下载的系统代号（debian-10 为 buster）</p>
</li>
<li><p>rootfs : 指定存放下载内容的目录</p>
</li>
<li><p><a href="http://mirrors.ustc.edu.cn/debian">http://mirrors.ustc.edu.cn/debian</a> ：下载路径（此处使用的是国内中科大源）</p>
</li>
<li><p>–variant 说明</p>
<ul>
<li><p>minbase: 只包含必要的包和apt；</p>
</li>
<li><p>buildd: 包含编译工具包</p>
</li>
<li><p>fakechroot: 包含不用root权限的包</p>
</li>
<li><p>scratchbox: 包含scratchbox(交叉编译工具链)相关包</p>
</li>
</ul>
</li>
</ul>
</blockquote>
<h3 id="3-复制qemu-arm-static到debian文件系统-usr-bin-目录"><a href="#3-复制qemu-arm-static到debian文件系统-usr-bin-目录" class="headerlink" title="3.复制qemu-arm-static到debian文件系统/usr/bin/目录"></a>3.复制qemu-arm-static到debian文件系统/usr/bin/目录</h3><blockquote>
<p>因为使用的宿主机是ubuntu18.04 amd64，所以需要使用qemu-arm-static来模拟arm环境，下载安装所需要的软件。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># cp /usr/bin/qemu-arm-static rootfs/usr/bin/</span></span><br></pre></td></tr></table></figure>



<h3 id="4-执行第二阶段的下载"><a href="#4-执行第二阶段的下载" class="headerlink" title="4.执行第二阶段的下载"></a>4.执行第二阶段的下载</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># DEBIAN_FRONTEND=noninteractive DEBCONF_NONINTERACTIVE_SEEN=true LC_ALL=C LANG=zh_CN.UTF-8 chroot rootfs/ debootstrap/debootstrap --second-stage</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>设置环境变量，然后切换至文件系统存放目录，使用目录下的debootstrap/debootstrap命令，执行第二阶段的下载。等待几分钟后，命令执行完成，终端输出“I: Base system installed successfully.”即为系统下载完成。</p>
</blockquote>
<h3 id="5-换源"><a href="#5-换源" class="headerlink" title="5.换源"></a>5.换源</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># sed -i &#x27;s#http://deb.debian.org#http://mirrors.ustc.edu.cn#g&#x27; rootfs/etc/apt/sources.list</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 原始源</span></span><br><span class="line"></span><br><span class="line">root@ubuntu:~<span class="comment"># sed -i &#x27;s#http://ports.ubuntu.com#http://mirrors.ustc.edu.cn#g&#x27; rootfs/etc/apt/sources.list</span></span><br></pre></td></tr></table></figure>



<h3 id="6-配置网络信息"><a href="#6-配置网络信息" class="headerlink" title="6.配置网络信息"></a>6.配置网络信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># echo &#x27;nameserver 192.168.2.1&#x27; &gt; rootfs/etc/resolv.conf</span></span><br><span class="line"></span><br><span class="line">root@ubuntu:~<span class="comment"># mkdir rootfs/etc/netplan</span></span><br><span class="line"></span><br><span class="line">root@ubuntu:~<span class="comment"># cat &gt; rootfs/etc/netplan/50-cloud-init.yaml &lt;&lt;EOF</span></span><br><span class="line"></span><br><span class="line">network:</span><br><span class="line"></span><br><span class="line">    ethernets:</span><br><span class="line"></span><br><span class="line">        eth0:</span><br><span class="line"></span><br><span class="line">          dhcp4: no</span><br><span class="line"></span><br><span class="line">            addresses: [192.168.168.6/24]</span><br><span class="line"></span><br><span class="line">            gateway4: 192.168.168.1</span><br><span class="line"></span><br><span class="line">            nameservers:</span><br><span class="line"></span><br><span class="line">                addresses: [192.168.168.1]</span><br><span class="line"></span><br><span class="line">    version: 2</span><br><span class="line"></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p><strong>可选设置网络DHCP</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat &gt; /etc/netplan/50-cloud-init.yaml &lt;&lt;EOF</span><br><span class="line">network:</span><br><span class="line">    ethernets:</span><br><span class="line">        eth0:</span><br><span class="line">                dhcp4: yes</span><br><span class="line">    version: 2</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>



<h3 id="7-配置系统信息"><a href="#7-配置系统信息" class="headerlink" title="7.配置系统信息"></a>7.配置系统信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># echo &#x27;Debian10&#x27; &gt; rootfs/etc/hostname</span></span><br><span class="line">root@ubuntu:~<span class="comment"># echo &quot;127.0.0.1 localhost&quot; &gt; rootfs/etc/hosts</span></span><br><span class="line">root@ubuntu:~<span class="comment"># echo &quot;127.0.0.1 Debian10&quot; &gt;&gt; rootfs/etc/hosts</span></span><br></pre></td></tr></table></figure>



<h3 id="8-挂载本地设备文件到rootfs"><a href="#8-挂载本地设备文件到rootfs" class="headerlink" title="8.挂载本地设备文件到rootfs"></a>8.挂载本地设备文件到rootfs</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># mount -t proc /proc  rootfs/proc</span></span><br><span class="line">root@ubuntu:~<span class="comment"># mount -t sysfs /sys  rootfs/sys</span></span><br><span class="line">root@ubuntu:~<span class="comment"># mount -o bind /dev  rootfs/dev</span></span><br><span class="line">root@ubuntu:~<span class="comment"># mount -o bind /dev/pts  rootfs/dev/pts</span></span><br></pre></td></tr></table></figure>



<h3 id="9-系统磁盘挂载配置"><a href="#9-系统磁盘挂载配置" class="headerlink" title="9.系统磁盘挂载配置"></a>9.系统磁盘挂载配置</h3><blockquote>
<p>系统开机时会主动读取/etc/fstab这个文件中的内容，根据文件里面的配置挂载磁盘</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># vim rootfs/etc/fstab</span></span><br><span class="line"><span class="comment">#添加以下内容</span></span><br><span class="line"><span class="comment"># UNCONFIGURED FSTAB FOR BASE SYSTEM</span></span><br><span class="line">proc  /proc proc defaults 0 0</span><br><span class="line">sysfs /sys sysfs defaults 0 0</span><br></pre></td></tr></table></figure>





<h3 id="10-进入chroot-rootfs-内配置"><a href="#10-进入chroot-rootfs-内配置" class="headerlink" title="10.进入chroot rootfs 内配置"></a>10.进入chroot rootfs 内配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># chroot rootfs</span></span><br><span class="line"></span><br><span class="line">root@ubuntu:/<span class="comment"># cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span></span><br><span class="line"></span><br><span class="line">root@ubuntu:/<span class="comment"># apt update &amp;&amp; apt upgrade -y</span></span><br><span class="line"></span><br><span class="line">root@ubuntu:/<span class="comment"># apt install rsyslog udev dbus kmod openssh-server openssh-client netplan.io man vim wget net-tools sysstat tmux less wireless-regdb wireless-tools ethtool crda dosfstools parted sudo git iputils-ping systemd ifupdown iputils-ping htop wpasupplicant -y</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>需要工具链的可以执行以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@ubuntu:/<span class="comment"># apt install gcc g++ -y #(或者选择buildd的包)</span></span><br><span class="line">root@ubuntu:/<span class="comment"># echo &#x27;PermitRootLogin yes&#x27; &gt;&gt; /etc/ssh/sshd_config</span></span><br></pre></td></tr></table></figure>



<p>设置swap分区</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@ubuntu:/<span class="comment"># dd if=/dev/zero of=/swapfile bs=1M count=16384 status=progress #创建16G的交换空间 大小根据需要自定</span></span><br><span class="line"></span><br><span class="line">root@ubuntu:/<span class="comment"># chmod 600 /swapfile #设置正确的权限</span></span><br><span class="line"></span><br><span class="line">root@ubuntu:/<span class="comment"># mkswap /swapfile #格式化swap文件</span></span><br><span class="line"></span><br><span class="line">root@ubuntu:/<span class="comment"># swapon /swapfile #启用swap文件</span></span><br><span class="line"></span><br><span class="line">root@ubuntu:/<span class="comment"># echo &#x27;/swapfile none swap defaults 0 0&#x27; &gt;&gt; /etc/fstab #向/etc/fstab 中追加该内容</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如需要关闭swap和swap文件，则可以输入以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo swapoff /swapfile</span><br><span class="line">sudo <span class="built_in">rm</span> /swapfile</span><br><span class="line">sudo sed -i <span class="string">&#x27;/\/swapfile none swap defaults 0 0/d&#x27;</span> /etc/fstab</span><br></pre></td></tr></table></figure>



<h3 id="11-最后的准备"><a href="#11-最后的准备" class="headerlink" title="11.最后的准备"></a>11.最后的准备</h3><p>如果需要添加用户，使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建用户debian</span></span><br><span class="line">root@ubuntu:/<span class="comment"># useradd -m debian -g sudo -s /bin/bash -d /home/debian</span></span><br></pre></td></tr></table></figure>



<p>设置密码，取消挂载，退出chroot</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@ubuntu:/<span class="comment"># passwd root</span></span><br><span class="line">root@ubuntu:/<span class="comment"># umount /dev/pts/ /dev/ /proc/ /sys</span></span><br><span class="line">root@ubuntu:/<span class="comment"># exit</span></span><br><span class="line"><span class="comment">#退出后会变回进容器之前的用户</span></span><br><span class="line">root@ubuntu:~<span class="comment">#</span></span><br></pre></td></tr></table></figure>



<h3 id="12-打包rootfs"><a href="#12-打包rootfs" class="headerlink" title="12.打包rootfs"></a>12.打包rootfs</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># cd rootfs</span></span><br><span class="line">root@ubuntu:~<span class="comment"># tar -czvf debian_buster_arm64.tgz ./*</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>chroot</tag>
        <tag>arm64</tag>
        <tag>linux Deploy</tag>
      </tags>
  </entry>
  <entry>
    <title>安装和切换多版本java (windows篇)</title>
    <url>/2023/04/10/%E5%AE%89%E8%A3%85%E5%92%8C%E5%88%87%E6%8D%A2%E5%A4%9A%E7%89%88%E6%9C%ACjava%20(windows%E7%AF%87)/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>一、JDK是什么？</strong></p>
<p>1、JDK : Java Development ToolKit(Java开发工具包)。JDK是整个JAVA的核心，包括了Java运行环境（Java Runtime Envirnment），一堆Java工具（javac/java/jdb等）和Java基础的类库（即Java API 包括rt.jar）。</p>
<p>最主流的JDK是Oracle公司发布的JDK，除了Oracle之外，还有很多公司和组织都开发了属于自己的JDK，例如国外IBM公司开发了属于自己的JDK，国内淘宝也开发了属于自己的JDK，各个组织开发自己的JDK都是为了在某些方面得到一些提高，以适应自己的需求，比如IBM的JDK据说运行效率就比Oralce的JDK高的多。但不管怎么说，我们还是需要先把基础的Oracle JDK掌握好。</p>
<p>2、JDK是java开发工具包，在其安装目录下面有五个文件夹、一些描述文件、一个src压缩文件。bin、lib、 jre这四个文件夹起作用。可以看出来JDK包含JRE，而JRE包含JVM。</p>
<p>·bin:最主要的是编译器(javac.exe)</p>
<p>·lib：类库（开发中需要使用到的一些jdk提供的一些类）</p>
<p>·jre:java运行环境（注意：这里的bin、lib文件夹和jre里的bin、lib是不同的）</p>
<p>· <strong>总的来说JDK是用于java程序的开发,而jre则是只能运行class而没有编译的功能</strong>。</p>
<p>3、JDK是提供给Java开发人员使用的，其中包含了java的开发工具，也包括了JRE。所以安装了JDK，就不用在单独安装JRE了。</p>
<p><strong>二、jdk和jre的区别？</strong></p>
<p>JRE顾名思义是java运行时环境，包含了java虚拟机，java基础类库。是使用java语言编写的程序运行所需要的软件环境，是提供给想运行java程序的用户使用的。</p>
<p>一句话： jre就是Java程序运行的环境。</p>
<h1 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h1><h2 id="jvms工具"><a href="#jvms工具" class="headerlink" title="jvms工具"></a>jvms工具</h2><p>需要用到一个工具jvms</p>
<p><a href="https://github.com/ystyle/jvms/">jvms项目地址</a></p>
<p>打开项目，点击右边<a href="https://github.com/ystyle/jvms/releases">Releases</a>，下载工具，我下载的是<a href="https://github.com/ystyle/jvms/releases/download/v2.1.3/jvms_v2.1.3_amd64.zip">jvms_v2.1.3_amd64.zip</a></p>
<h2 id="解压工具"><a href="#解压工具" class="headerlink" title="解压工具"></a>解压工具</h2><p>解压到你想放置的盘里</p>
<blockquote>
<p>例如我放到D盘下，重命名为jvms，路径为D:\jvms</p>
</blockquote>
<p>在jvms文件夹里新建两个子文件夹store和download</p>
<p>![image-20230517175753265](安装和切换多版本java (windows篇)/image-20230517175753265.png)</p>
<h2 id="运行工具"><a href="#运行工具" class="headerlink" title="运行工具"></a>运行工具</h2><p>然后以管理员身份运行cmd或者powershell</p>
<p>![image-20230517175644642](安装和切换多版本java (windows篇)/image-20230517175644642.png)</p>
<h2 id="初始化工具"><a href="#初始化工具" class="headerlink" title="初始化工具"></a>初始化工具</h2><p>输入以下命令来初始化jvms配置文件</p>
<blockquote>
<p>用 D:\jvms\jvms.exe init –help 命令 在OPTIONS选项中可以看到设置的默认值</p>
<p>OPTIONS:<br>   –java_home value     the JAVA_HOME location (default: “C:\Program Files\jdk”)<br>   –originalpath value  the jdk download index file url. (default: “<a href="https://raw.githubusercontent.com/ystyle/jvms/new/jdkdlindex.json&quot;">https://raw.githubusercontent.com/ystyle/jvms/new/jdkdlindex.json&quot;</a>)</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">D:\jvms\jvms.exe init</span><br></pre></td></tr></table></figure>

<h2 id="下载JDK"><a href="#下载JDK" class="headerlink" title="下载JDK"></a>下载JDK</h2><p>因为是国内网，访问raw.githubusercontent.com一般都会连不上，这时候有两种方法解决</p>
<p>第一种方法：</p>
<p>raw.github的ip经常更换，所以我们先去查一下该网址IP，打开<a href="https://www.ipaddress.com/">IP查询</a>然后输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">raw.githubusercontent.com</span><br></pre></td></tr></table></figure>

<p>在今天 2023/05/17 查询得有4个ipv4的地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">185.199.108.133</span><br><span class="line">185.199.109.133</span><br><span class="line">185.199.110.133</span><br><span class="line">185.199.111.133</span><br></pre></td></tr></table></figure>

<p>修改hosts文件</p>
<p>位置：<code>C:\Windows\System32\drivers\etc\hosts</code></p>
<p>直接在最下面添加上面查到的随便一个IP，保存</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">185.199.108.133 raw.githubusercontent.com</span><br></pre></td></tr></table></figure>

<p>我用这个方法偶尔可以偶尔又不行，我放弃了</p>
<p>第二种方法：</p>
<p>直接在搜索引擎搜github国内镜像站，找一找应该能找到能用的，我找到的<a href="https://kgithub.com/%EF%BC%8C%E5%9C%A8%E4%BB%8A%E5%A4%A92023/05/17">https://kgithub.com/，在今天2023/05/17</a> 还能用</p>
<p>直接把原先的地址中的<code>githubusercontent</code>换成<code>kgithub</code>就行</p>
<p>或者用cdn加速的github镜像仓库</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#我没有用作者的集成的jdk下载链接，我自己写了一个ZuluJDK（一个OpenJDK的发行版本）的下载链接</span></span><br><span class="line">jvms init  <span class="literal">--originalpath</span> https://fastly.jsdelivr.net/gh/AienH/jvms@master/openjdk.json</span><br><span class="line"></span><br><span class="line"><span class="comment">#列出可供下载的可用 jdk 版本</span></span><br><span class="line">jvms rls</span><br><span class="line"><span class="comment">#这个是列出的版本</span></span><br><span class="line">    <span class="number">1</span>) <span class="number">20.0</span>.<span class="number">1</span></span><br><span class="line">    <span class="number">2</span>) <span class="number">19.0</span>.<span class="number">2</span></span><br><span class="line">    <span class="number">3</span>) <span class="number">17.0</span>.<span class="number">7</span></span><br><span class="line">    <span class="number">4</span>) <span class="number">13.0</span>.<span class="number">14</span></span><br><span class="line">    <span class="number">5</span>) <span class="number">11.0</span>.<span class="number">19</span></span><br><span class="line">    <span class="number">6</span>) <span class="number">8.0</span>.<span class="number">372</span></span><br><span class="line">    <span class="number">7</span>) <span class="number">7.0</span>.<span class="number">352</span></span><br><span class="line">    <span class="number">8</span>) <span class="number">6.0</span>.<span class="number">119</span></span><br><span class="line">    <span class="number">9</span>) <span class="number">21.0</span>.<span class="number">0</span><span class="literal">-ea</span></span><br><span class="line">    <span class="number">10</span>) OpenJDK8U<span class="literal">-jdk_x64_windows_hotspot_8u372b07</span></span><br><span class="line"></span><br><span class="line">use <span class="string">&quot;jvm rls -a&quot;</span> show all the versions</span><br><span class="line"></span><br><span class="line"><span class="keyword">For</span> a complete list, visit https://fastly.jsdelivr.net/gh/AienH/jvms@master/openjdk.json</span><br><span class="line"></span><br><span class="line"><span class="comment">#下载JDK17和JDK11</span></span><br><span class="line">jvms install <span class="number">11.0</span>.<span class="number">19</span></span><br><span class="line">jvms install <span class="number">17.0</span>.<span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看下载的jdk版本</span></span><br><span class="line">jvms <span class="built_in">ls</span></span><br></pre></td></tr></table></figure>

<p>下载完后在<code>D:\jvms\store</code>目录下能看到下载的几个不同版本的jdk，在<code>D:\jvms\download</code>目录看到jdk的源码包</p>
<h2 id="配置JAVA"><a href="#配置JAVA" class="headerlink" title="配置JAVA"></a>配置JAVA</h2><p>在<code>C:\Program Files</code>目录下新建文件夹<code>jdk</code></p>
<p>把<code>D:\jvms\store</code>目录下的所有jdk版本复制到<code>C:\Program Files\jdk</code>目录下</p>
<p>然后切换想要使用的ava版本</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用jdk17</span></span><br><span class="line">jvms <span class="keyword">switch</span> <span class="number">17.0</span>.<span class="number">7</span></span><br></pre></td></tr></table></figure>

<p>测试环境是否成功</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">java <span class="literal">--version</span></span><br></pre></td></tr></table></figure>

<h2 id="手动下载JDK包"><a href="#手动下载JDK包" class="headerlink" title="手动下载JDK包"></a>手动下载JDK包</h2><p>不通过<code>jvms install</code>在线下载</p>
<p>直接把自己下载好的jdk包解压到<code>D:\jvms\store</code>和<code>C:\Program Files\jdk</code>目录下</p>
<p>例如：添加<code>jdk 17.0.1</code></p>
<ol>
<li>将 jdk 主文件夹复制到<code>jvms/store</code></li>
<li>将文件夹重命名为<code>17.0.1</code></li>
<li><code>jvms list</code>检查是否显示存在</li>
</ol>
]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>环境</tag>
      </tags>
  </entry>
  <entry>
    <title>安装和切换多版本java (linux篇)</title>
    <url>/2023/04/10/%E5%AE%89%E8%A3%85%E5%92%8C%E5%88%87%E6%8D%A2%E5%A4%9A%E7%89%88%E6%9C%ACjava%20(linux%E7%AF%87)/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>一、JDK是什么？</strong></p>
<p>1、JDK : Java Development ToolKit(Java开发工具包)。JDK是整个JAVA的核心，包括了Java运行环境（Java Runtime Envirnment），一堆Java工具（javac/java/jdb等）和Java基础的类库（即Java API 包括rt.jar）。</p>
<p>最主流的JDK是Oracle公司发布的JDK，除了Oracle之外，还有很多公司和组织都开发了属于自己的JDK，例如国外IBM公司开发了属于自己的JDK，国内淘宝也开发了属于自己的JDK，各个组织开发自己的JDK都是为了在某些方面得到一些提高，以适应自己的需求，比如IBM的JDK据说运行效率就比Oralce的JDK高的多。但不管怎么说，我们还是需要先把基础的Oracle JDK掌握好。</p>
<p>2、JDK是java开发工具包，在其安装目录下面有五个文件夹、一些描述文件、一个src压缩文件。bin、lib、 jre这四个文件夹起作用。可以看出来JDK包含JRE，而JRE包含JVM。</p>
<p>·bin:最主要的是编译器(javac.exe)</p>
<p>·lib：类库（开发中需要使用到的一些jdk提供的一些类）</p>
<p>·jre:java运行环境（注意：这里的bin、lib文件夹和jre里的bin、lib是不同的）</p>
<p>· <strong>总的来说JDK是用于java程序的开发,而jre则是只能运行class而没有编译的功能</strong>。</p>
<p>3、JDK是提供给Java开发人员使用的，其中包含了java的开发工具，也包括了JRE。所以安装了JDK，就不用在单独安装JRE了。</p>
<p><strong>二、jdk和jre的区别？</strong></p>
<p>JRE顾名思义是java运行时环境，包含了java虚拟机，java基础类库。是使用java语言编写的程序运行所需要的软件环境，是提供给想运行java程序的用户使用的。</p>
<p>一句话： jre就是Java程序运行的环境。</p>
<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h2 id="1-包管理安装"><a href="#1-包管理安装" class="headerlink" title="1.包管理安装"></a>1.包管理安装</h2><h3 id="1-1centos7"><a href="#1-1centos7" class="headerlink" title="1.1centos7"></a>1.1centos7</h3><p><strong>随意使用一条命令便可以查询到java的安装信息</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@centos:~<span class="comment">#yum list installed | grep java</span></span><br><span class="line"></span><br><span class="line">root@centos:~<span class="comment">#rpm -qa | grep java</span></span><br></pre></td></tr></table></figure>

<p><strong>出现内容，表明你系统已经安装了java，如果安装的版本不适合将要搭建的服务环境，你就需要卸载掉。</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@centos:~<span class="comment">#yum -y remove java-11-openjdk* #卸载所有java-11-openjdk</span></span><br></pre></td></tr></table></figure>

<p><strong>查看所有JDK版本</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@centos:~<span class="comment">#yum search java | grep jdk</span></span><br></pre></td></tr></table></figure>

<p><strong>选择版本并安装（这里我安装的是java8）</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@centos:~<span class="comment">#yum install -y java-1.8.0-openjdk*</span></span><br></pre></td></tr></table></figure>

<p><strong>检查jdk是否安装成功</strong></p>
<hr>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment">#java --version</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意这里是–version  </p>
</blockquote>
<h3 id="1-2ubuntu"><a href="#1-2ubuntu" class="headerlink" title="1.2ubuntu"></a>1.2ubuntu</h3><p><strong>查询已安装java的信息</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment">#java -version</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意这里是-version</p>
</blockquote>
<p><strong>先卸载之前的版本</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#之前安装过jdk11</span></span><br><span class="line">root@ubuntu:~<span class="comment">#apt remove openjdk-11-jdk</span></span><br><span class="line"></span><br><span class="line">root@ubuntu:~<span class="comment">#apt autoremove</span></span><br></pre></td></tr></table></figure>

<p><strong>查看所有JDK版本</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment">#apt search openjdk</span></span><br></pre></td></tr></table></figure>

<p><strong>选择版本并安装（这里我安装的是java8）</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment">#apt install -y openjdk-8-jdk</span></span><br></pre></td></tr></table></figure>

<p><strong>检查jdk是否安装成功</strong></p>
<hr>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment">#java -version</span></span><br></pre></td></tr></table></figure>



<h2 id="2-源码包安装"><a href="#2-源码包安装" class="headerlink" title="2.源码包安装"></a>2.源码包安装</h2><p><strong>这里就和windows安装java差不多了，linux是下载压缩包后，解压完添加环境变量即可使用</strong></p>
<p><strong>winget给出了所有jdk的最新版本列表，winget查找JDK的网址==&gt; <a href="https://whichjdk.com/">whichjdk</a></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">winget search OpenJDK</span><br><span class="line">Name                                       Id                             Version     Match        Source</span><br><span class="line">---------------------------------------------------------------------------------------------------------</span><br><span class="line">ojdkbuild OpenJDK JRE 8                    ojdkbuild.ojdkbuild            1.8.3221.6               winget</span><br><span class="line">Java SE Development Kit 18                 Oracle.JDK.18                  18.0.2.0    Tag: openjdk winget</span><br><span class="line">Java SE Development Kit 17                 Oracle.JDK.17                  17.0.4.0    Tag: openjdk winget</span><br><span class="line">ojdkbuild OpenJDK JRE 17                   ojdkbuild.openjdk.17.jre       17.0030.6.1 Tag: openjdk winget</span><br><span class="line">ojdkbuild OpenJDK 17                       ojdkbuild.openjdk.17.jdk       17.0030.6.1 Tag: openjdk winget</span><br><span class="line">OpenJDK JRE 11                             ojdkbuild.openjdk.11.jre       11.0.15.1   Tag: openjdk winget</span><br><span class="line">OpenJDK 11                                 ojdkbuild.openjdk.11.jdk       11.0.15.1   Tag: openjdk winget</span><br><span class="line">Microsoft Build of OpenJDK with Hotspot 17 Microsoft.OpenJDK.17           17.0.4.8    Tag: openjdk winget</span><br><span class="line">Microsoft Build of OpenJDK with Hotspot 16 Microsoft.OpenJDK.16           16.0.2.7    Tag: openjdk winget</span><br><span class="line">Microsoft Build of OpenJDK with Hotspot 11 Microsoft.OpenJDK.11           11.0.16.8   Tag: openjdk winget</span><br><span class="line">Eclipse Temurin JRE with Hotspot 8         EclipseAdoptium.TemurinJRE.8   8.0.322.9   Tag: openjdk winget</span><br><span class="line">Eclipse Temurin JRE with Hotspot 18        EclipseAdoptium.TemurinJRE.18  18.0.1.10   Tag: openjdk winget</span><br><span class="line">Eclipse Temurin JRE with Hotspot 17        EclipseAdoptium.TemurinJRE.17  17.0.4.8    Tag: openjdk winget</span><br><span class="line">Eclipse Temurin JRE with Hotspot 11        EclipseAdoptium.TemurinJRE.11  11.0.16.8   Tag: openjdk winget</span><br><span class="line">Liberica JDK 8 Full                        BellSoft.LibericaJDK.8.Full    8.0.342.7   Tag: openjdk winget</span><br><span class="line">Liberica JDK 8                             BellSoft.LibericaJDK.8         8.0.342.7   Tag: openjdk winget</span><br><span class="line">Liberica JDK 18 Full                       BellSoft.LibericaJDK.18.Full   18.0.2.10   Tag: openjdk winget</span><br><span class="line">Liberica JDK 18                            BellSoft.LibericaJDK.18        18.0.2.10   Tag: openjdk winget</span><br><span class="line">Liberica JDK 17 Full                       BellSoft.LibericaJDK.17.Full   17.0.4.8    Tag: openjdk winget</span><br><span class="line">Liberica JDK 17                            BellSoft.LibericaJDK.17        17.0.4.8    Tag: openjdk winget</span><br><span class="line">Liberica JDK 16 Full                       BellSoft.LibericaJDK.16.Full   16.0.2.7    Tag: openjdk winget</span><br><span class="line">Liberica JDK 16                            BellSoft.LibericaJDK.16        16.0.2.7    Tag: openjdk winget</span><br><span class="line">Liberica JDK 15 Full                       BellSoft.LibericaJDK.15.Full   15.0.2.10   Tag: openjdk winget</span><br><span class="line">Liberica JDK 15                            BellSoft.LibericaJDK.15        15.0.2.10   Tag: openjdk winget</span><br><span class="line">Liberica JDK 14 Full                       BellSoft.LibericaJDK.14.Full   14.0.2.13   Tag: openjdk winget</span><br><span class="line">Liberica JDK 14                            BellSoft.LibericaJDK.14        14.0.2.13   Tag: openjdk winget</span><br><span class="line">Liberica JDK 11 Full                       BellSoft.LibericaJDK.11.Full   11.0.16.8   Tag: openjdk winget</span><br><span class="line">Liberica JDK 11                            BellSoft.LibericaJDK.11        11.0.16.8   Tag: openjdk winget</span><br><span class="line">Azul Zulu JDK 7                            Azul.Zulu.7                    7.56.0.11   Tag: openjdk winget</span><br><span class="line">Azul Zulu JDK 6                            Azul.Zulu.6                    6.22.0.3    Tag: openjdk winget</span><br><span class="line">AdoptOpenJDK JDK with Hotspot 8            AdoptOpenJDK.OpenJDK.8         8.0.292.10  Tag: openjdk winget</span><br><span class="line">AdoptOpenJDK JDK with Hotspot 16           AdoptOpenJDK.OpenJDK.16        16.0.1.9    Tag: openjdk winget</span><br><span class="line">AdoptOpenJDK JDK with Hotspot 15           AdoptOpenJDK.OpenJDK.15        15.0.2.7    Tag: openjdk winget</span><br><span class="line">AdoptOpenJDK JDK with Hotspot 14           AdoptOpenJDK.OpenJDK.14        14.0.2.12   Tag: openjdk winget</span><br><span class="line">AdoptOpenJDK JDK with Hotspot 11           AdoptOpenJDK.OpenJDK.11        11.0.11.9   Tag: openjdk winget</span><br><span class="line">Eclipse Temurin JDK with Hotspot 8         EclipseAdoptium.Temurin.8.JDK  8.0.332.9   Tag: openjdk winget</span><br><span class="line">Eclipse Temurin JDK with Hotspot 11        EclipseAdoptium.Temurin.11.JDK 11.0.16.8   Tag: openjdk winget</span><br><span class="line">Azul Zulu JDK 17                           Azul.Zulu.17.JDK               17.36.15    Tag: openjdk winget</span><br><span class="line">Eclipse Temurin JDK with Hotspot 20 (Beta) EclipseAdoptium.Temurin.20.JDK 20.0.0.5    Tag: openjdk winget</span><br><span class="line">Eclipse Temurin JDK with Hotspot 19 (Beta) EclipseAdoptium.Temurin.19.JDK 19.0.0.30   Tag: openjdk winget</span><br><span class="line">Eclipse Temurin JDK with Hotspot 18        EclipseAdoptium.Temurin.18.JDK 18.0.2.9    Tag: openjdk winget</span><br><span class="line">Eclipse Temurin JDK with Hotspot 17        EclipseAdoptium.Temurin.17.JDK 17.0.4.8    Tag: openjdk winget</span><br><span class="line">Eclipse Temurin JDK with Hotspot 16        EclipseAdoptium.Temurin.16.JDK 16.0.2.7    Tag: openjdk winget</span><br><span class="line">Azul Zulu JDK 18                           Azul.Zulu.18.JDK               18.32.11    Tag: openjdk winget</span><br><span class="line">Azul Zulu JDK 16                           Azul.Zulu.16.JDK               16.32.15    Tag: openjdk winget</span><br><span class="line">Azul Zulu JDK 15                           Azul.Zulu.15.JDK               15.42.15    Tag: openjdk winget</span><br><span class="line">Azul Zulu JDK 13                           Azul.Zulu.13.JDK               13.50.15    Tag: openjdk winget</span><br><span class="line">Azul Zulu JDK 11                           Azul.Zulu.11.JDK               11.58.17    Tag: openjdk winget</span><br><span class="line">Azul Zulu JDK 8                            Azul.Zulu.8.JDK                8.64.0.15   Tag: openjdk winget</span><br><span class="line">OpenJDK 14                                 ojdkbuild.openjdk.14.jdk       14.0.1.1                 winget</span><br><span class="line">OpenJDK 13                                 ojdkbuild.openjdk.13.jdk       13.0.3.1                 winget</span><br><span class="line">AdoptOpenJDK JDK with Eclipse OpenJ9 17    AdoptOpenJDK.OpenJDK.17        17.0.0.18                winget</span><br><span class="line">Update Watcher for AdoptOpenJDK            tushev.org.AJUpdateWatcher     2.0.4.0                  winget</span><br></pre></td></tr></table></figure>



<p><strong>从<a href="https://www.oracle.com/java/technologies/downloads/">oracle官网</a>下载Java压缩包</strong>    </p>
<p><strong>Java8：</strong><a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html">Java SE Development Kit 8 Downloads</a></p>
<p>![image-20230404181515372](安装和切换多版本java (linux篇)/image-20230404181515372.png)</p>
<p><strong>注册登录后即可获得下载链接，这里注意自己的系统是arm64还是amd64</strong></p>
<p><strong>也可使用<a href="https://www.azul.com/downloads/?package=jdk#zulu">ZuluJDK（一个OpenJDK的发行版本）</a></strong></p>
<blockquote>
<p>我arm64架构的系统试过安装多个这种版本的openjdk，会报错，所以我重新选择了oracle的jdk</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment">#wget https://cdn.azul.com/zulu/bin/zulu8.66.0.15-ca-jdk8.0.352-linux_x64.tar.gz</span></span><br></pre></td></tr></table></figure>



<h3 id="2-1创建一个存放源码包的目录并解压"><a href="#2-1创建一个存放源码包的目录并解压" class="headerlink" title="2.1创建一个存放源码包的目录并解压"></a><strong>2.1创建一个存放源码包的目录并解压</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment">#mkdir /usr/local/JDK</span></span><br><span class="line">root@ubuntu:~<span class="comment">#cd /usr/local/JDK</span></span><br><span class="line">root@ubuntu:~<span class="comment">#tar -xvf jdk-8u361-linux-i586.tar.gz -C /usr/local/JDK</span></span><br><span class="line">root@ubuntu:~<span class="comment"># mv jdk1.8.0_361 jdk8</span></span><br></pre></td></tr></table></figure>



<h2 id="3-配置环境"><a href="#3-配置环境" class="headerlink" title="3.配置环境"></a>3.配置环境</h2><h3 id="3-1添加环境变量的两种方法："><a href="#3-1添加环境变量的两种方法：" class="headerlink" title="3.1添加环境变量的两种方法："></a><strong>3.1添加环境变量的两种方法：</strong></h3><p><strong>适用于centos，ubuntu</strong></p>
<h4 id="1）vim-etc-profile"><a href="#1）vim-etc-profile" class="headerlink" title="1）vim /etc/profile"></a>1）vim /etc/profile</h4><ul>
<li>推荐使用这种方法，因为所有用户的shell都有权使用这些环境变量，<strong>缺点</strong>是可能会给系统带来安全性问题。 这里是针对<strong>所有的用户的</strong>,<strong>所有的shell</strong>;</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"><span class="comment"># 使用source命令使修改立刻生效： </span></span><br><span class="line"><span class="built_in">source</span>  /etc/profile</span><br></pre></td></tr></table></figure>

<h4 id="2）vi-bashrc"><a href="#2）vi-bashrc" class="headerlink" title="2）vi ~/.bashrc"></a>2）vi ~/.bashrc</h4><p>修改.bashrc文件,这种方法更为安全，它可以把使用这些环境变量的权限控制到用户级别,这里是针对某一个特定的用户，如果需要给某个用户权限<br>使用这些环境变量，只需要修改其个人用户主目录下的.bashrc文件就可以了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>



<h3 id="3-2添加java环境变量"><a href="#3-2添加java环境变量" class="headerlink" title="3.2添加java环境变量"></a>3.2添加java环境变量</h3><blockquote>
<p>我用的是vi ~/.bashrc</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment">#vim ~/.bashrc</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#然后在文本末端，加上这么几句</span></span><br><span class="line">JAVA_HOME=/usr/local/JDK/jdk8   <span class="comment">#安装java的路径，路径一定要对</span></span><br><span class="line">CLASSPATH=<span class="variable">$JAVA_HOME</span>/lib/</span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin/</span><br><span class="line"><span class="built_in">export</span> PATH JAVA_HOME CLASSSPATH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root@ubuntu:~<span class="comment">#source ~/.bashrc</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#执行java -version或java --version，到Java的版本号就成功了</span></span><br></pre></td></tr></table></figure>



<h2 id="4-切换java版本"><a href="#4-切换java版本" class="headerlink" title="4.切换java版本"></a>4.切换java版本</h2><ul>
<li><p><strong>用包管理安装可能不是很全，没有自己需要的java版本，管理也不方便，所以一般都是用源码包方式来安装的多个版本的java</strong></p>
</li>
<li><p><strong>不管理只使用的话也可以直接用包管理安装</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@Debian:~<span class="comment"># apt search openjdk</span></span><br><span class="line"><span class="comment">#比如我安装11和17</span></span><br><span class="line">root@Debian:~<span class="comment"># apt install openjdk-11-jdk -y &amp;&amp; apt install openjdk-17-jdk -y</span></span><br><span class="line">root@Debian:~<span class="comment"># which java</span></span><br><span class="line">/usr/bin/java</span><br><span class="line">root@Debian:~<span class="comment"># ls -l /usr/bin/java</span></span><br><span class="line">lrwxrwxrwx 1 root root 22 May 17 17:27 /usr/bin/java -&gt; /etc/alternatives/java</span><br><span class="line">root@Debian:~<span class="comment"># ls -l /etc/alternatives/java</span></span><br><span class="line">lrwxrwxrwx 1 root root 43 May 17 17:27 /etc/alternatives/java -&gt; /usr/lib/jvm/java-11-openjdk-amd64/bin/java</span><br><span class="line"></span><br><span class="line"><span class="comment">#用apt安装的不需要用update-alternatives --install 来添加链接，因为它自己会自动添加的</span></span><br><span class="line">root@Debian:~<span class="comment"># update-alternatives --display java</span></span><br><span class="line">java - auto mode</span><br><span class="line">  <span class="built_in">link</span> best version is /usr/lib/jvm/java-17-openjdk-amd64/bin/java</span><br><span class="line">  <span class="built_in">link</span> currently points to /usr/lib/jvm/java-17-openjdk-amd64/bin/java</span><br><span class="line">  <span class="built_in">link</span> java is /usr/bin/java</span><br><span class="line">  slave java.1.gz is /usr/share/man/man1/java.1.gz</span><br><span class="line">/usr/lib/jvm/java-11-openjdk-amd64/bin/java - priority 1111</span><br><span class="line">  slave java.1.gz: /usr/lib/jvm/java-11-openjdk-amd64/man/man1/java.1.gz</span><br><span class="line">/usr/lib/jvm/java-17-openjdk-amd64/bin/java - priority 1711</span><br><span class="line">  slave java.1.gz: /usr/lib/jvm/java-17-openjdk-amd64/man/man1/java.1.gz</span><br><span class="line">  </span><br><span class="line"><span class="comment">#切换java</span></span><br><span class="line">root@Debian:~<span class="comment"># update-alternatives --config java</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="alternatives命令介绍"><a href="#alternatives命令介绍" class="headerlink" title="alternatives命令介绍"></a>alternatives命令介绍</h3><p>当我们频繁使用java的不同版本，不可能采用卸载java后在重新安装需要用的java的版本的方法，这时我们可以用到alternatives命令。</p>
<p>alternatives是Linux下的一个功能强大的命令。只能在root权限下执行。如系统中有几个命令功能十分类似，却又不能随意删除，那么可以用 alternatives 来指定一个全局的设置。<br>alternatives常用于同一个系统中安装同一软件的多个版本。比如为了开发需要，我需要安装JDK16，同时还需要JDK8，我怎么样才能忽略安装路径，按照我自己的意思，使用我想要的java版本呢？<br>命令格式:<br>update-alternatives [options] command</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">update-alternatives</span><br><span class="line">用法：alternatives --install &lt;链接&gt; &lt;名称&gt; &lt;路径&gt; &lt;优先度&gt;</span><br><span class="line">                    [--initscript &lt;服务&gt;]</span><br><span class="line">                    [--slave &lt;链接&gt; &lt;名称&gt; &lt;路径&gt;]*</span><br><span class="line">       alternatives --remove &lt;名称&gt; &lt;路径&gt;</span><br><span class="line">       alternatives --auto &lt;名称&gt;</span><br><span class="line">       alternatives --config &lt;名称&gt;</span><br><span class="line">       alternatives --display &lt;名称&gt;</span><br><span class="line">       alternatives --<span class="built_in">set</span> &lt;名称&gt; &lt;路径&gt;</span><br><span class="line">       alternatives --list</span><br></pre></td></tr></table></figure>



<h3 id="4-1使用方法"><a href="#4-1使用方法" class="headerlink" title="4.1使用方法"></a>4.1使用方法</h3><p><strong>通过以下指令来看我们安装了多少openJDK</strong></p>
<blockquote>
<p>我的用到ubuntu，centos命令则把apt改为yum </p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment">#apt list installed | grep jdk</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>在这里我又下载了一个jdk17，解压放到了/usr/local/JDK/目录下 </p>
</blockquote>
<p><strong>先修改添加的java环境变量，修改为</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在这里添加你想切换的jdk版本，例如我在8和17之间切换，如需更多版本则将路径添加到JAVA_HOME中（冒号添加路径）</span></span><br><span class="line">JAVA_HOME=/usr/local/JDK/jdk8:/usr/local/JDK/jdk17  </span><br><span class="line">CLASSPATH=<span class="variable">$JAVA_HOME</span>/lib/</span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin/</span><br><span class="line"><span class="built_in">export</span> PATH JAVA_HOME CLASSSPATH</span><br></pre></td></tr></table></figure>

<p><strong>使配置生效</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># source ~/.bashrc</span></span><br></pre></td></tr></table></figure>



<p><strong>然后用update-alternatives –install 命令</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment">#update-alternatives --install /usr/bin/java java /usr/local/JDK/jdk8/bin/java 8</span></span><br><span class="line"></span><br><span class="line">root@ubuntu:~<span class="comment">#update-alternatives --install /usr/bin/javac javac /usr/local/JDK/jdk8/bin/javac 8</span></span><br><span class="line"></span><br><span class="line">root@ubuntu:~<span class="comment">#update-alternatives --install /usr/bin/java java /usr/local/JDK/jdk17/bin/java 17</span></span><br><span class="line"></span><br><span class="line">root@ubuntu:~<span class="comment">#update-alternatives --install /usr/bin/javac javac /usr/local/JDK/jdk17/bin/javac 17</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>–install 选项</p>
<p>使用语法：<br>update-alternatives –install link name path priority [–slave link name path]…<br>其中link为系统中功能相同软件的 公共链接目录，比如/usr/bin/java(需绝对目录);</p>
<p>name为命令链接符名称,如java；</p>
<p>path为你所要使用新命令、新软件的所在目录；</p>
<p>priority为优先级， 当命令链接已存在时，需高于当前值，因为当alternative为自动模式时,系统默认启用priority高的链接;</p>
<p>–slave为从alternative。</p>
<p>alternative有两种模式：auto和manual，默认都为auto模式，因为大多数情况下update-alternatives命令都被postinst (configure) or prerm (install)调用的，如果将其更改成手动的话安装脚本将不会更新它了。</p>
</blockquote>
<p><strong>切换java版本命令</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># update-alternatives --config java   #java是我设置的链接符名称</span></span><br><span class="line">There are 2 choices <span class="keyword">for</span> the alternative java (providing /usr/bin/java).</span><br><span class="line"></span><br><span class="line">  Selection    Path                  Priority   Status</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">* 0            /usr/local/JDK/jdk17/bin/java   17        auto mode</span><br><span class="line">  1            /usr/local/JDK/jdk8/bin/java    8         manual mode</span><br><span class="line">  2            /usr/local/JDK/jdk17/bin/java   17        manual mode</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Press &lt;enter&gt; to keep the current choice[*], or <span class="built_in">type</span> selection number: 1</span><br><span class="line">update-alternatives: using /usr/local/JDK/jdk8 to provide /usr/local/JDK/ (java) <span class="keyword">in</span> manual mode</span><br><span class="line">update-alternatives: warning: not replacing /usr/local/JDK/ with a <span class="built_in">link</span></span><br><span class="line">root@ubuntu:~<span class="comment"># java -version</span></span><br><span class="line">java version <span class="string">&quot;1.8.0_361&quot;</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_361-b09)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.361-b09, mixed mode)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="5-切换其它的环境（例如python）"><a href="#5-切换其它的环境（例如python）" class="headerlink" title="5.切换其它的环境（例如python）"></a>5.切换其它的环境（例如python）</h2><p><strong>其实切换其它的依赖环境也是可以的，例如debian内置python2和python3，我的默认使用python2，然后切换成python3</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@orangepi5:~<span class="comment"># whereis python2</span></span><br><span class="line">python2: /usr/bin/python2.7 /usr/bin/python2 /usr/lib/python2.7 /etc/python2.7 /usr/local/lib/python2.7 /usr/share/man/man1/python2.1.gz</span><br><span class="line">root@orangepi5:~<span class="comment"># whereis python3</span></span><br><span class="line">python3: /usr/bin/python3.9-config /usr/bin/python3 /usr/bin/python3.9 /usr/lib/aarch64-linux-gnu/python3.9 /usr/lib/python3 /usr/lib/python3.9 /etc/python3 /etc/python3.9 /usr/local/lib/python3.9 /usr/include/python3.9 /usr/share/python3 /usr/share/man/man1/python3.1.gz</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root@orangepi5:~<span class="comment"># update-alternatives --install /usr/bin/python python /usr/bin/python2 100</span></span><br><span class="line">root@orangepi5:~<span class="comment"># update-alternatives --install /usr/bin/python python /usr/bin/python3 150</span></span><br><span class="line">root@orangepi5:~<span class="comment"># update-alternatives --config python</span></span><br><span class="line">There are 2 choices <span class="keyword">for</span> the alternative python (providing /usr/bin/python).</span><br><span class="line"></span><br><span class="line">  Selection    Path              Priority   Status</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">* 0            /usr/bin/python3   150       auto mode</span><br><span class="line">  1            /usr/bin/python2   100       manual mode</span><br><span class="line">  2            /usr/bin/python3   150       manual mode</span><br><span class="line"></span><br><span class="line">Press &lt;enter&gt; to keep the current choice[*], or <span class="built_in">type</span> selection number: 2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root@orangepi5:~<span class="comment"># python --version</span></span><br></pre></td></tr></table></figure>



<h2 id="6-centos7中安装python3后使用yum命令报错解决办法"><a href="#6-centos7中安装python3后使用yum命令报错解决办法" class="headerlink" title="6.centos7中安装python3后使用yum命令报错解决办法"></a>6.centos7中安装python3后使用yum命令报错解决办法</h2><p>把第一行<code>#! /usr/bin/python</code>后面的<code>python</code>改成 <code>python2</code>保存退出<br>再输入：<code>vi /usr/libexec/urlgrabber-ext-down</code>同样第一行后面的<code>python</code>改成 <code>python2</code>保存退出</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>环境</tag>
      </tags>
  </entry>
  <entry>
    <title>自建内网穿透服务器</title>
    <url>/2023/03/30/%E8%87%AA%E5%BB%BA%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>几种通过自己服务器实现内网穿透的教程</p>
<h2 id="基于Docker的FRP内网穿透部署"><a href="#基于Docker的FRP内网穿透部署" class="headerlink" title="基于Docker的FRP内网穿透部署"></a>基于Docker的FRP内网穿透部署</h2><h3 id="服务器搭建（FRPS）"><a href="#服务器搭建（FRPS）" class="headerlink" title="服务器搭建（FRPS）"></a>服务器搭建（FRPS）</h3><p>创建配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建存放目录</span></span><br><span class="line">sudo <span class="built_in">mkdir</span> /etc/frp</span><br><span class="line"><span class="comment"># 创建frps.ini文件</span></span><br><span class="line">nano /etc/frp/frps.ini</span><br></pre></td></tr></table></figure>
<p>frps.ini内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line"><span class="comment"># 监听端口</span></span><br><span class="line">bind_port = 7000</span><br><span class="line"><span class="comment"># 面板端口</span></span><br><span class="line">dashboard_port = 7500</span><br><span class="line"><span class="comment"># 登录面板账号设置</span></span><br><span class="line">dashboard_user = admin</span><br><span class="line">dashboard_pwd = spoto1234</span><br><span class="line"><span class="comment"># 设置http及https协议下代理端口（非重要）</span></span><br><span class="line">vhost_http_port = 7080</span><br><span class="line">vhost_https_port = 7081</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 身份验证</span></span><br><span class="line">token = 12345678</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#服务器镜像：snowdreamtech/frps</span></span><br><span class="line"><span class="comment">#重启：always</span></span><br><span class="line"><span class="comment">#网络模式：host</span></span><br><span class="line"><span class="comment">#文件映射：/etc/frp/frps.ini:/etc/frp/frps.ini</span></span><br><span class="line"></span><br><span class="line">docker run --restart=always --network host -d -v /etc/frp/frps.ini:/etc/frp/frps.ini --name frps snowdreamtech/frps</span><br></pre></td></tr></table></figure>



<h3 id="中转客户端配置（FRPC）"><a href="#中转客户端配置（FRPC）" class="headerlink" title="中转客户端配置（FRPC）"></a>中转客户端配置（FRPC）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">服务器镜像：snowdreamtech/frpc</span><br><span class="line">重启：always</span><br><span class="line">网络模式：host</span><br><span class="line">文件映射：/路径/frp/:/etc/frp/</span><br><span class="line"></span><br><span class="line">docker run --restart=always --network host -d -v /etc/frp/frpc.ini:/etc/frp/frpc.ini --name frpc snowdreamtech/frpc</span><br></pre></td></tr></table></figure>

<p>配置文件示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line"><span class="comment"># server_addr为FRPS服务器IP地址</span></span><br><span class="line">server_addr = x.x.x.x</span><br><span class="line"><span class="comment"># server_port为服务端监听端口，bind_port</span></span><br><span class="line">server_port = 7000</span><br><span class="line"><span class="comment"># 身份验证</span></span><br><span class="line">token = 12345678</span><br><span class="line"></span><br><span class="line">[ssh]</span><br><span class="line"><span class="built_in">type</span> = tcp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 22</span><br><span class="line">remote_port = 2288</span><br><span class="line"></span><br><span class="line"><span class="comment"># [ssh] 为服务名称，下方此处设置为，访问frp服务段的2288端口时，等同于通过中转服务器访问127.0.0.1的22端口。</span></span><br><span class="line"><span class="comment"># type 为连接的类型，此处为tcp</span></span><br><span class="line"><span class="comment"># local_ip 为中转客户端实际访问的IP </span></span><br><span class="line"><span class="comment"># local_port 为目标端口</span></span><br><span class="line"><span class="comment"># remote_port 为远程端口</span></span><br><span class="line"></span><br><span class="line">[ssh]</span><br><span class="line"><span class="built_in">type</span> = tcp</span><br><span class="line">local_ip = 192.168.1.229</span><br><span class="line">local_port = 80</span><br><span class="line">remote_port = 18022</span><br><span class="line"></span><br><span class="line">[unRAID web]</span><br><span class="line"><span class="built_in">type</span> = tcp</span><br><span class="line">local_ip = 192.168.1.229</span><br><span class="line">local_port = 80</span><br><span class="line">remote_port = 18088</span><br><span class="line"></span><br><span class="line">[Truenas web]</span><br><span class="line"><span class="built_in">type</span> = tcp</span><br><span class="line">local_ip = 192.168.1.235</span><br><span class="line">local_port = 80</span><br><span class="line">remote_port = 18188</span><br><span class="line"></span><br><span class="line">[speedtest]</span><br><span class="line"><span class="built_in">type</span> = tcp</span><br><span class="line">local_ip = 192.168.1.229</span><br><span class="line">local_port = 6580</span><br><span class="line">remote_port = 18190</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[webdav]</span><br><span class="line"><span class="built_in">type</span> = tcp</span><br><span class="line">local_ip = 192.168.1.235</span><br><span class="line">local_port = 18080</span><br><span class="line">remote_port = 18189</span><br><span class="line"></span><br><span class="line">[RDP PC1]</span><br><span class="line"><span class="built_in">type</span> = tcp</span><br><span class="line">local_ip = 192.168.1.235</span><br><span class="line">local_port = 3389</span><br><span class="line">remote_port = 18389</span><br></pre></td></tr></table></figure>
<ul>
<li>如果监听服务可以有IP限制的设置，需要允许的访问IP为中转内网设备的内网IP；</li>
<li>FRP由于端口会暴露在互联网上，虽然说使用方便但安全性较差；</li>
</ul>
<h2 id="基于Zerotier根服务器的内网穿透部署"><a href="#基于Zerotier根服务器的内网穿透部署" class="headerlink" title="基于Zerotier根服务器的内网穿透部署"></a>基于Zerotier根服务器的内网穿透部署</h2><h3 id="创建（伪）根服务器-项目地址：https-github-com-Jonnyan404-zerotier-planet"><a href="#创建（伪）根服务器-项目地址：https-github-com-Jonnyan404-zerotier-planet" class="headerlink" title="创建（伪）根服务器 | 项目地址：https://github.com/Jonnyan404/zerotier-planet"></a>创建（伪）根服务器 | 项目地址：<a href="https://github.com/Jonnyan404/zerotier-planet">https://github.com/Jonnyan404/zerotier-planet</a></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --restart=on-failure:3 -d --name ztncui -e HTTP_PORT=4000 -e HTTP_ALL_INTERFACES=<span class="built_in">yes</span> -e ZTNCUI_PASSWD=mrdoc.fun -p 4000:4000 keynetworks/ztncui</span><br></pre></td></tr></table></figure>

<h3 id="创建-moon-服务器-项目地址：https-github-com-jonnyan404-docker-zerotier-moon"><a href="#创建-moon-服务器-项目地址：https-github-com-jonnyan404-docker-zerotier-moon" class="headerlink" title="创建 moon 服务器 | 项目地址：https://github.com/jonnyan404/docker-zerotier-moon"></a>创建 moon 服务器 | 项目地址：<a href="https://github.com/jonnyan404/docker-zerotier-moon">https://github.com/jonnyan404/docker-zerotier-moon</a></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建容器</span></span><br><span class="line">docker run --name zerotier-moon -d -p 9993:9993 -p 9993:9993/udp -v /etc/ztconf/:/var/lib/zerotier-one jonnyan404/zerotier-moon -4 [公网ipx.x.x.x]</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看moon ID</span></span><br><span class="line">docker logs zerotier-moon</span><br></pre></td></tr></table></figure>

<h3 id="群晖-DSM-7-x-安装Zerotier客户端"><a href="#群晖-DSM-7-x-安装Zerotier客户端" class="headerlink" title="群晖 DSM 7.x 安装Zerotier客户端"></a>群晖 DSM 7.x 安装Zerotier客户端</h3><h4 id="登录SSH并创建虚拟网络设备TUN"><a href="#登录SSH并创建虚拟网络设备TUN" class="headerlink" title="登录SSH并创建虚拟网络设备TUN"></a>登录SSH并创建虚拟网络设备TUN</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#获取权限</span></span><br><span class="line">sudo -i</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建“创建虚拟网络设备TUN”的脚本，并设为开机自动运行</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&#x27;#!/bin/sh -e \ninsmod /lib/modules/tun.ko&#x27;</span> &gt; /usr/local/etc/rc.d/tun.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#给予脚本运行权限</span></span><br><span class="line"><span class="built_in">chmod</span> a+x /usr/local/etc/rc.d/tun.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行脚本创建TUN</span></span><br><span class="line">/usr/local/etc/rc.d/tun.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#确认TUN是否创建成功</span></span><br><span class="line"><span class="built_in">ls</span> /dev/net/tun</span><br></pre></td></tr></table></figure>

<p>创建存放配置文件的目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /var/lib/zerotier-one</span><br></pre></td></tr></table></figure>
<p>创建Zerotier应用容器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d           \</span><br><span class="line">  --name zt             \</span><br><span class="line">  --restart=always      \</span><br><span class="line">  --device=/dev/net/tun \</span><br><span class="line">  --net=host            \</span><br><span class="line">  --cap-add=NET_ADMIN   \</span><br><span class="line">  --cap-add=SYS_ADMIN   \</span><br><span class="line">  -v /var/lib/zerotier-one:/var/lib/zerotier-one zerotier/zerotier-synology:latest</span><br></pre></td></tr></table></figure>

<p>常用命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看zerotier状态</span></span><br><span class="line">docker <span class="built_in">exec</span> -it zt zerotier-cli status</span><br><span class="line"></span><br><span class="line"><span class="comment">#加入网络</span></span><br><span class="line">docker <span class="built_in">exec</span> -it zt zerotier-cli <span class="built_in">join</span> [xxxxxxxxxxxx]</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#加入moon服务器</span></span><br><span class="line">docker <span class="built_in">exec</span> zt zerotier-cli orbit [moon_ID] [moon_ID]</span><br><span class="line"><span class="comment">#确认是否加入</span></span><br><span class="line">docker <span class="built_in">exec</span> zt zerotier-cli listpeers </span><br></pre></td></tr></table></figure>

<h3 id="Windows-客户端加入moon服务器"><a href="#Windows-客户端加入moon服务器" class="headerlink" title="Windows 客户端加入moon服务器"></a>Windows 客户端加入moon服务器</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> C:\ProgramData\ZeroTier\One</span><br><span class="line">zerotier<span class="literal">-cli</span> orbit [<span class="type">moon_id</span>] [<span class="type">moon_id</span>]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>内网穿透</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建hexo个人博客</title>
    <url>/2023/03/29/%E6%90%AD%E5%BB%BAhexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页，这边就教大家怎么搭建Hexo并配置。大家可以参考<a href="https://hexo.io/zh-cn/docs/">Hexo官方文档</a>配合使用。</p>
<p><strong>安装前提</strong></p>
<p><strong>安装 Hexo 相当简单，只需要先安装下列应用程序即可：</strong></p>
<ul>
<li><a href="http://nodejs.org/">Node.js</a> <strong>(Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</strong></li>
<li><a href="http://git-scm.com/">Git</a></li>
</ul>
<p><strong>随着大前端的快速发展，node版本更新很快，我们在工作中，可以会有老版本的node的项目需要维护，也可能有新版本的node的项目需要开发，如果我们只有一个node版本的话将会很麻烦，<a href="https://github.com/creationix/nvm">nvm</a> 应运而生，nvm 是 Mac 下的 node 管理工具，有点类似管理 Ruby 的 rvm，如果需要管理 Windows 下的 node，官方推荐使用 <a href="https://github.com/hakobera/nvmw">nvmw</a> 或 <a href="https://github.com/coreybutler/nvm-windows">nvm-windows</a>。不过，nvm-windows 并不是 nvm 的简单移植，他们也没有任何关系。但下面介绍的所有命令，都可以在 nvm-windows 中运行，nvm是<a href="https://so.csdn.net/so/search?q=node&spm=1001.2101.3001.7020">node</a>的版本管理器，可以方便地安装&amp;切换不同版本的node</strong></p>
<h2 id="安装NVM"><a href="#安装NVM" class="headerlink" title="安装NVM"></a>安装NVM</h2><p><strong>进入NVM-Windows项目发布地址：</strong> <a href="https://github.com/coreybutler/nvm-windows/releases">https://github.com/coreybutler/nvm-windows/releases</a> <strong>，选择最新发行版本<code>nvm-setup.zip</code>下载：</strong></p>
<p><img src="/2023/03/29/%E6%90%AD%E5%BB%BAhexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/20210531232213538.png" alt="20210531232213538"></p>
<p><strong>安装需要注意两点</strong></p>
<p><strong>1、 把电脑上面的node环境先卸载干净（C:\Users\用户名\AppData\Roaming\node下面的文件也要解决干净）</strong></p>
<p><strong>2、 安装时，建议选择手动安装版，然后疯狂下一步就行，不要尝试改变安装目录。</strong></p>
<p><strong>如果不想放在C盘，例如放在D盘，安装路径是这样的：</strong></p>
<blockquote>
<p>第一步：D:/你想放的文件夹名 </p>
<p>第二步：D:/你想放的文件夹名(最好不要中文名)/nodejs</p>
</blockquote>
<p><strong>检查安装是否成功</strong></p>
<p><strong>在搜索栏查找<code>poweshell</code>,选中<code>x86</code>的<code>powershell</code>鼠标右击选择<code>以管理员身份运行</code>。</strong><img src="/2023/03/29/%E6%90%AD%E5%BB%BAhexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20221127134846193.png" alt="image-20221127134846193"></p>
<p><strong>在<code>Powershell</code>下，输入<code>NVM</code>，即可发现安装完成：</strong></p>
<h2 id="配置国内源"><a href="#配置国内源" class="headerlink" title="配置国内源"></a>配置国内源</h2><p><strong>到你<code>NVM</code>安装路径，*打开<code>setting.txt</code>文件（如果没有，则创建即可），更改为：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root: D:\NVM</span><br><span class="line">path: D:\NVM\nodejs</span><br><span class="line">arch: 64</span><br><span class="line">proxy: none</span><br><span class="line">node_mirror: https://npm.taobao.org/mirrors/node/</span><br><span class="line">npm_mirror: https://npm.taobao.org/mirrors/npm/</span><br></pre></td></tr></table></figure>

<p><strong>解释参数：</strong></p>
<ul>
<li><strong>root：NVM的安装地址。即上文的<code>%NVM_HOME%</code></strong></li>
<li><strong>path：激活node.js时的存储路径，即上文的<code>%NVM_SYMLINK%</code></strong></li>
<li><strong>arch：系统架构，如果你的Windwos不是<code>x64</code>，则填<code>32</code></strong></li>
<li><strong>proxy：是否走代理</strong></li>
<li><strong>node_mirror：node.js的下载源，这里使用的是淘宝源</strong></li>
<li><strong>npm_mirror：npm的下载源，这里使用的是淘宝源</strong></li>
</ul>
<p><img src="/2023/03/29/%E6%90%AD%E5%BB%BAhexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20230331220734968.png" alt="image-20230331220734968"></p>
<h2 id="使用NVM"><a href="#使用NVM" class="headerlink" title="使用NVM"></a>使用NVM</h2><p><strong>在cmd或pwoershell使用命令</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">nvm list available</span><br></pre></td></tr></table></figure>

<p><img src="/2023/03/29/%E6%90%AD%E5%BB%BAhexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220710002047715.png" alt="image-20220710002047715"></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span>、安装方式 nvm install 版本号</span><br><span class="line">current：当前最新的版本</span><br><span class="line">LTS：稳定版本</span><br><span class="line"></span><br><span class="line">nvm install <span class="number">19.8</span>.<span class="number">1</span> （当前稳定的最新版）</span><br><span class="line"></span><br><span class="line">我安装了两个</span><br><span class="line">nvm install <span class="number">18.13</span>.<span class="number">0</span></span><br><span class="line">nvm install <span class="number">16.15</span>.<span class="number">1</span></span><br><span class="line">使用nvm <span class="built_in">ls</span> 或者 nvm list可以查看安装的不同node版本，*指向的就是当前版本</span><br></pre></td></tr></table></figure>

<h3 id="激活Node-js版本"><a href="#激活Node-js版本" class="headerlink" title="激活Node.js版本"></a>激活Node.js版本</h3><p><strong>我们安装好Node.js以后，需要激活它</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">nvm use <span class="number">16.15</span>.<span class="number">1</span></span><br></pre></td></tr></table></figure>

<h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p><strong>无脑下一步！！！<a href="https://git-scm.com/">Git的官网地址</a></strong> </p>
<h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p><strong>先在NVM安装目录内建立2个目录node_cache和node_global</strong></p>
<p><img src="/2023/03/29/%E6%90%AD%E5%BB%BAhexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20230331224443212.png" alt="image-20230331224443212"></p>
<p><strong>输入下面命令</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> prefix <span class="string">&quot;D:\NVM\node_global&quot;</span></span><br><span class="line">npm config <span class="built_in">set</span> cache <span class="string">&quot;D:\NVM\node_cache&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>更换源</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config set registry=http://registry.npm.taobao.org </span><br></pre></td></tr></table></figure>

<p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p>
<h3 id="使用Npm安装Hexo"><a href="#使用Npm安装Hexo" class="headerlink" title="使用Npm安装Hexo"></a>使用Npm安装Hexo</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install <span class="literal">-g</span> hexo<span class="literal">-cli</span></span><br></pre></td></tr></table></figure>

<p>如报错，更新一下npm</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install <span class="literal">-g</span> npm<span class="literal">-windows-upgrade</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">set-ExecutionPolicy</span> RemoteSigned</span><br><span class="line"></span><br><span class="line">执行策略更改</span><br><span class="line">执行策略可帮助你防止执行不信任的脚本。更改执行策略可能会产生安全风险，如 https:/go.microsoft.com/fwlink/?LinkID=<span class="number">135170</span></span><br><span class="line">中的 about_Execution_Policies 帮助主题所述。是否要更改执行策略?</span><br><span class="line">[<span class="type">Y</span>] 是(Y)  [<span class="type">A</span>] 全是(A)  [<span class="type">N</span>] 否(N)  [<span class="type">L</span>] 全否(L)  [<span class="type">S</span>] 暂停(S)  [?] 帮助 (默认值为“N”): y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">npm<span class="literal">-windows-upgrade</span></span><br><span class="line">npm<span class="literal">-windows-upgrade</span> v6.<span class="number">0.1</span></span><br><span class="line">? Which version <span class="keyword">do</span> you want to install? <span class="number">8.13</span>.<span class="number">2</span></span><br><span class="line">Checked system <span class="keyword">for</span> npm installation:</span><br><span class="line">According to PowerShell: D:\nodejs</span><br><span class="line">According to npm:        D:\nodejs</span><br><span class="line">Decided that npm is installed <span class="keyword">in</span> D:\nodejs</span><br><span class="line">Upgrading npm... |</span><br><span class="line"></span><br><span class="line">Upgrade finished. Your new npm version is <span class="number">8.13</span>.<span class="number">2</span>. Have a nice day!</span><br></pre></td></tr></table></figure>

<p><strong>安装好以后，测试一下：</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hexo</span><br></pre></td></tr></table></figure>

<p><img src="/2023/03/29/%E6%90%AD%E5%BB%BAhexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220710004601578.png"></p>
<p><strong>没有出现未知命令，说明安装成功。可以接下来操作了。</strong></p>
<p><strong>如果出现hexo : 无法加载文件 C:\Program  Files\nodejs\hexo.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https:/go.micros  oft.com/fwlink/?LinkID=135170 中的 about_Execution_Policies。 所在位置 行:1 字符:  1。</strong></p>
<p><strong>那是因为你用的是win11系统，你需要在<code>设置-&gt;隐私和安全性-&gt;开发者选项-&gt;允许本地powershell脚本在为签名的情况下运行</code></strong><img src="/2023/03/29/%E6%90%AD%E5%BB%BAhexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20230308210045396.png" alt="image-20230308210045396"></p>
<p><strong>应用之后，重新打开新的powershell，再次输入hexo即可。</strong></p>
<p><img src="/2023/03/29/%E6%90%AD%E5%BB%BAhexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20230308210149994.png"></p>
<h2 id="创建hexo"><a href="#创建hexo" class="headerlink" title="创建hexo"></a>创建hexo</h2><p><strong>创建你的博客的空白文件夹，然后打开文件夹,我们已经安装好Git，所以我们直接是由鼠标右键的<code>Git Bash Here</code></strong></p>
<p><img src="/2023/03/29/%E6%90%AD%E5%BB%BAhexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220710233249939.png" alt="image-20220710233249939"></p>
<h3 id="在博客目录内初始化博客"><a href="#在博客目录内初始化博客" class="headerlink" title="在博客目录内初始化博客"></a>在博客目录内初始化博客</h3><p><strong>初始化目录：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进目录之后，在Git bash里面输入下面目录初始化</span></span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure>

<p><strong>初始化后回生成许多文件</strong></p>
<p><img src="/2023/03/29/%E6%90%AD%E5%BB%BAhexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20230331230347045.png" alt="image-20230331230347045"></p>
<p><strong>输入命令后，它会自动爬取hexo的初始化目录，在国内网络是非常不好的，如果出错需要删除目录内容重新执行命令直到成功。</strong></p>
<h2 id="构建hexo"><a href="#构建hexo" class="headerlink" title="构建hexo"></a>构建hexo</h2><p><strong>初始化Hexo后，其实Hexo就可以使用了；构建Hexo：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<h2 id="启动Hexo内建服务器"><a href="#启动Hexo内建服务器" class="headerlink" title="启动Hexo内建服务器"></a>启动Hexo内建服务器</h2><p><strong>其实，整个<code>public</code>文件就是一个博客了，但是我们还要部署<code>Nginx</code>等网络环境或者使用<code>HBuilderX</code>等根据，启动Web服务器才能用浏览器本地IP(即：<code>127.0.0.1</code>或<code>localhost</code>)加端口进行访问；为了减少麻烦，可以使用Hexo内建服务器：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p><img src="/2023/03/29/%E6%90%AD%E5%BB%BAhexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220710234306097.png" alt="image-20220710234306097"></p>
<p><strong>我们可以去<code>127.0.0.1:4000</code>网址看看初始化页面的样子</strong><img src="/2023/03/29/%E6%90%AD%E5%BB%BAhexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220710234335015.png" alt="image-20220710234335015"></p>
<h2 id="部署Hexo到github"><a href="#部署Hexo到github" class="headerlink" title="部署Hexo到github"></a>部署Hexo到github</h2><p><strong>上述操作，我们已经把<code>Hexo</code>部署在本地；接下来，我们来看看怎么部署到远程平台，部署到远程平台后，公网用户就可以访问了（也就是可以让你小伙伴通过浏览器访问到你的博客）。</strong></p>
<h3 id="创建github仓库"><a href="#创建github仓库" class="headerlink" title="创建github仓库"></a>创建github仓库</h3><p><img src="/2023/03/29/%E6%90%AD%E5%BB%BAhexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20230407151939650.png" alt="image-20230407151939650"></p>
<blockquote>
<p>需要注意的是作为网站访问的这个仓库，仓库名称一定是，<strong>拥有者名+github.io</strong></p>
</blockquote>
<h3 id="生成ssh-keys"><a href="#生成ssh-keys" class="headerlink" title="生成ssh keys"></a>生成ssh keys</h3><blockquote>
<p>在博客文件夹根目录下，右键，调用<strong>git bash here</strong>功能</p>
</blockquote>
<p>输入命令，本地生成<strong>ssh keys</strong>  ，有回车按回车，有（y/n）？就输入y</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t ed25519 -C <span class="string">&quot;your_email@example.com&quot;</span></span><br></pre></td></tr></table></figure>

<p>注意：如果你使用的是不支持 Ed25519 算法的旧系统，请使用以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure>

<p><strong>出现这个则生成成功</strong></p>
<p><img src="/2023/03/29/%E6%90%AD%E5%BB%BAhexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20230407152653491.png" alt="image-20230407152653491"></p>
<blockquote>
<p>在电脑打开生成公钥的文件夹</p>
<p><strong>路径：C:/用户/你的用户名/.ssh</strong></p>
</blockquote>
<p>找到后打开id_rsa.pub（默认记事本打开），复制公钥（ctrl+A全选， ctrl+C复制）</p>
<p>打开github，头像箭头，下拉选项setting（设置）-SSH与GPG keys -new ssh keys（新建ssh秘钥）</p>
<p>tilte随便起，然后ctrl+V粘贴到key里面</p>
<p><img src="/2023/03/29/%E6%90%AD%E5%BB%BAhexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20230416135608274.png" alt="image-20230416135608274"></p>
<h3 id="测试是否绑定成功"><a href="#测试是否绑定成功" class="headerlink" title="测试是否绑定成功"></a>测试是否绑定成功</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<p><img src="/2023/03/29/%E6%90%AD%E5%BB%BAhexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20230416134842427.png" alt="image-20230416134842427"></p>
<blockquote>
<p>yes，然后按回车</p>
<p>出现successfully字样则绑定成功</p>
</blockquote>
<h3 id="上传博客到github仓库"><a href="#上传博客到github仓库" class="headerlink" title="上传博客到github仓库"></a>上传博客到github仓库</h3><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>在创建博客文件夹的根目录下修改-config.yml文件</p>
<p><img src="/2023/03/29/%E6%90%AD%E5%BB%BAhexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20230407163241369.png" alt="image-20230407163241369"></p>
<p>输入时注意冒号后面有空格，然后保存退出</p>
<h4 id="安装hexo-deployer-git"><a href="#安装hexo-deployer-git" class="headerlink" title="安装hexo-deployer-git"></a>安装hexo-deployer-git</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#注意这些插件是安装在博客目录内的，所以是跟随博客内容一起走的</span></span><br><span class="line"><span class="comment">#这个插件是提供上传git能力</span></span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>



<blockquote>
<p><strong>因为github在国外，有些时候推送会出现ssl出错，其实就是网络差，我们在Git Bash里面输入下面这行命令，不验证ssl：</strong></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global http.sslVerify <span class="string">&quot;false&quot;</span></span><br></pre></td></tr></table></figure>



<h4 id="博客推送"><a href="#博客推送" class="headerlink" title="博客推送"></a>博客推送</h4><p><strong>在博客目录下命令窗口/终端输入</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置git push的信息</span></span><br><span class="line">git config --global user.email <span class="string">&quot;your_email&quot;</span></span><br><span class="line">git config --global user.name <span class="string">&quot;your_name&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看和检查配置的信息</span></span><br><span class="line">git config --list</span><br><span class="line"></span><br><span class="line"><span class="comment"># hexo d就是推送博客到指定的地方(本博客推送的地方是Github)</span></span><br><span class="line">hexo cl &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>





<h2 id="博客主题"><a href="#博客主题" class="headerlink" title="博客主题"></a>博客主题</h2><p><strong>打开hexo的<a href="https://hexo.io/themes/">主题网站</a></strong></p>
<p><img src="/2023/03/29/%E6%90%AD%E5%BB%BAhexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20230508003429447.png" alt="image-20230508003429447"></p>
<p><strong>比如打开Ayer这款主题，打开后能看到主题的效果</strong></p>
<p><img src="/2023/03/29/%E6%90%AD%E5%BB%BAhexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20230508003515559.png" alt="image-20230508003515559"></p>
<p><strong>一般在博客主题内会有github的项目链接或者安装和使用的指南</strong></p>
<p><img src="/2023/03/29/%E6%90%AD%E5%BB%BAhexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20230508003741044.png" alt="image-20230508003741044"></p>
<p><strong>打开github项目有下面有个README.md的安装教程，其安装步骤我就不一一展示了，按教程来有手就行[doge]</strong></p>
<p><img src="/2023/03/29/%E6%90%AD%E5%BB%BAhexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20230508003943456.png" alt="image-20230508003943456"></p>
<h2 id="解决图片不显示问题"><a href="#解决图片不显示问题" class="headerlink" title="解决图片不显示问题"></a>解决图片不显示问题</h2><h3 id="更改hexo配置文件"><a href="#更改hexo配置文件" class="headerlink" title="更改hexo配置文件"></a>更改hexo配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim _config.yml <span class="comment">#配置_config.yml里面的post_asset_folder:false 设置为 true 如图</span></span><br></pre></td></tr></table></figure>

<p><img src="/2023/03/29/%E6%90%AD%E5%BB%BAhexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/031161b88a660fd50ecc872d942c43fa.png" alt="031161b88a660fd50ecc872d942c43fa"></p>
<h3 id="安装npm插件"><a href="#安装npm插件" class="headerlink" title="安装npm插件"></a>安装npm插件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br></pre></td></tr></table></figure>

<h3 id="修改Typora设置"><a href="#修改Typora设置" class="headerlink" title="修改Typora设置"></a>修改Typora设置</h3><p><strong>打开文件菜单的偏好设置</strong></p>
<p><img src="/2023/03/29/%E6%90%AD%E5%BB%BAhexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20240514232927394.png" alt="image-20240514232927394"></p>
<p><strong>打开图像选项，设置如下图</strong></p>
<p><img src="/2023/03/29/%E6%90%AD%E5%BB%BAhexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20240514233130356.png" alt="image-20240514233130356"></p>
]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
</search>
